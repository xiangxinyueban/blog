{"ast":null,"code":"import _objectSpread from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { getCurrentInstance, computed, watch, onMounted } from 'vue';\nimport { isFunction } from '@vue/shared';\nimport { isClient, isBoolean } from '@vueuse/core';\nimport '../../utils/index.mjs';\nimport { buildProp, definePropType } from '../../utils/vue/props.mjs';\n\nvar _prop = buildProp({\n  type: definePropType(Boolean),\n  \"default\": null\n});\n\nvar _event = buildProp({\n  type: definePropType(Function)\n});\n\nvar createModelToggleComposable = function createModelToggleComposable(name) {\n  var _useModelToggleProps;\n\n  var useModelToggleProps2 = (_useModelToggleProps = {}, _defineProperty(_useModelToggleProps, name, _prop), _defineProperty(_useModelToggleProps, \"onUpdate:\".concat(name), _event), _useModelToggleProps);\n  var useModelToggleEmits2 = [\"update:\".concat(name)];\n\n  var useModelToggle2 = function useModelToggle2(_ref) {\n    var indicator = _ref.indicator,\n        shouldHideWhenRouteChanges = _ref.shouldHideWhenRouteChanges,\n        shouldProceed = _ref.shouldProceed,\n        onShow = _ref.onShow,\n        onHide = _ref.onHide;\n    var instance = getCurrentInstance();\n    var props = instance.props;\n    var emit = instance.emit;\n    var updateEventKey = \"update:\".concat(name);\n    var hasUpdateHandler = computed(function () {\n      return isFunction(props[\"onUpdate:\".concat(name)]);\n    });\n    var isModelBindingAbsent = computed(function () {\n      return props[name] === null;\n    });\n\n    var doShow = function doShow() {\n      if (indicator.value === true) {\n        return;\n      }\n\n      indicator.value = true;\n\n      if (isFunction(onShow)) {\n        onShow();\n      }\n    };\n\n    var doHide = function doHide() {\n      if (indicator.value === false) {\n        return;\n      }\n\n      indicator.value = false;\n\n      if (isFunction(onHide)) {\n        onHide();\n      }\n    };\n\n    var show = function show() {\n      if (props.disabled === true || isFunction(shouldProceed) && !shouldProceed()) return;\n      var shouldEmit = hasUpdateHandler.value && isClient;\n\n      if (shouldEmit) {\n        emit(updateEventKey, true);\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doShow();\n      }\n    };\n\n    var hide = function hide() {\n      if (props.disabled === true || !isClient) return;\n      var shouldEmit = hasUpdateHandler.value && isClient;\n\n      if (shouldEmit) {\n        emit(updateEventKey, false);\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doHide();\n      }\n    };\n\n    var onChange = function onChange(val) {\n      if (!isBoolean(val)) return;\n\n      if (props.disabled && val) {\n        if (hasUpdateHandler.value) {\n          emit(updateEventKey, false);\n        }\n      } else if (indicator.value !== val) {\n        if (val) {\n          doShow();\n        } else {\n          doHide();\n        }\n      }\n    };\n\n    var toggle = function toggle() {\n      if (indicator.value) {\n        hide();\n      } else {\n        show();\n      }\n    };\n\n    watch(function () {\n      return props[name];\n    }, onChange);\n\n    if (shouldHideWhenRouteChanges && instance.appContext.config.globalProperties.$route !== void 0) {\n      watch(function () {\n        return _objectSpread({}, instance.proxy.$route);\n      }, function () {\n        if (shouldHideWhenRouteChanges.value && indicator.value) {\n          hide();\n        }\n      });\n    }\n\n    onMounted(function () {\n      onChange(props[name]);\n    });\n    return {\n      hide: hide,\n      show: show,\n      toggle: toggle\n    };\n  };\n\n  return {\n    useModelToggle: useModelToggle2,\n    useModelToggleProps: useModelToggleProps2,\n    useModelToggleEmits: useModelToggleEmits2\n  };\n};\n\nvar _createModelToggleCom = createModelToggleComposable(\"modelValue\"),\n    useModelToggle = _createModelToggleCom.useModelToggle,\n    useModelToggleProps = _createModelToggleCom.useModelToggleProps,\n    useModelToggleEmits = _createModelToggleCom.useModelToggleEmits;\n\nexport { createModelToggleComposable, useModelToggle, useModelToggleEmits, useModelToggleProps };","map":{"version":3,"mappings":"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","names":["_prop","buildProp","type","definePropType","Boolean","_event","Function","createModelToggleComposable","name","useModelToggleProps2","useModelToggleEmits2","useModelToggle2","indicator","shouldHideWhenRouteChanges","shouldProceed","onShow","onHide","instance","getCurrentInstance","props","emit","updateEventKey","hasUpdateHandler","computed","isFunction","isModelBindingAbsent","doShow","value","doHide","show","disabled","shouldEmit","isClient","hide","onChange","val","isBoolean","toggle","watch","appContext","config","globalProperties","$route","proxy","onMounted","useModelToggle","useModelToggleProps","useModelToggleEmits"],"sources":["../../../../../packages/hooks/use-model-toggle/index.ts"],"sourcesContent":["import { computed, getCurrentInstance, onMounted, watch } from 'vue'\nimport { isFunction } from '@vue/shared'\nimport { isClient } from '@vueuse/core'\nimport { buildProp, definePropType, isBoolean } from '@element-plus/utils'\nimport type { RouteLocationNormalizedLoaded } from 'vue-router'\n\nimport type { ComponentPublicInstance, ExtractPropTypes, Ref } from 'vue'\n\nconst _prop = buildProp({\n  type: definePropType<boolean | null>(Boolean),\n  default: null,\n} as const)\nconst _event = buildProp({\n  type: definePropType<(val: boolean) => void>(Function),\n} as const)\n\ntype _UseModelToggleProps<T extends string> = {\n  [K in T]: typeof _prop\n} & {\n  [K in `onUpdate:${T}`]: typeof _event\n}\n\nexport const createModelToggleComposable = <T extends string>(name: T) => {\n  const useModelToggleProps = {\n    [name]: _prop,\n    [`onUpdate:${name}`]: _event,\n  } as _UseModelToggleProps<T>\n\n  const useModelToggleEmits = [`update:${name}`]\n\n  const useModelToggle = ({\n    indicator,\n    shouldHideWhenRouteChanges,\n    shouldProceed,\n    onShow,\n    onHide,\n  }: ModelToggleParams) => {\n    const instance = getCurrentInstance()!\n    const props = instance.props as _UseModelToggleProps<T> & {\n      disabled: boolean\n    }\n    const { emit } = instance\n\n    const updateEventKey = `update:${name}`\n\n    const hasUpdateHandler = computed(() =>\n      isFunction(props[`onUpdate:${name}`])\n    )\n    // when it matches the default value we say this is absent\n    // though this could be mistakenly passed from the user but we need to rule out that\n    // condition\n    const isModelBindingAbsent = computed(() => props[name] === null)\n\n    const doShow = () => {\n      if (indicator.value === true) {\n        return\n      }\n\n      indicator.value = true\n      if (isFunction(onShow)) {\n        onShow()\n      }\n    }\n\n    const doHide = () => {\n      if (indicator.value === false) {\n        return\n      }\n\n      indicator.value = false\n\n      if (isFunction(onHide)) {\n        onHide()\n      }\n    }\n\n    const show = () => {\n      if (\n        props.disabled === true ||\n        (isFunction(shouldProceed) && !shouldProceed())\n      )\n        return\n\n      const shouldEmit = hasUpdateHandler.value && isClient\n\n      if (shouldEmit) {\n        emit(updateEventKey, true)\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doShow()\n      }\n    }\n\n    const hide = () => {\n      if (props.disabled === true || !isClient) return\n\n      const shouldEmit = hasUpdateHandler.value && isClient\n\n      if (shouldEmit) {\n        emit(updateEventKey, false)\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doHide()\n      }\n    }\n\n    const onChange = (val: boolean) => {\n      if (!isBoolean(val)) return\n      if (props.disabled && val) {\n        if (hasUpdateHandler.value) {\n          emit(updateEventKey, false)\n        }\n      } else if (indicator.value !== val) {\n        if (val) {\n          doShow()\n        } else {\n          doHide()\n        }\n      }\n    }\n\n    const toggle = () => {\n      if (indicator.value) {\n        hide()\n      } else {\n        show()\n      }\n    }\n\n    watch(() => props[name], onChange as any)\n\n    if (\n      shouldHideWhenRouteChanges &&\n      instance.appContext.config.globalProperties.$route !== undefined\n    ) {\n      watch(\n        () => ({\n          ...(\n            instance.proxy as ComponentPublicInstance<{\n              $route: RouteLocationNormalizedLoaded\n            }>\n          ).$route,\n        }),\n        () => {\n          if (shouldHideWhenRouteChanges.value && indicator.value) {\n            hide()\n          }\n        }\n      )\n    }\n\n    onMounted(() => {\n      onChange(props[name] as boolean)\n    })\n\n    return {\n      hide,\n      show,\n      toggle,\n    }\n  }\n\n  return {\n    useModelToggle,\n    useModelToggleProps,\n    useModelToggleEmits,\n  }\n}\n\nconst { useModelToggle, useModelToggleProps, useModelToggleEmits } =\n  createModelToggleComposable('modelValue')\n\nexport { useModelToggle, useModelToggleEmits, useModelToggleProps }\n\nexport type UseModelToggleProps = ExtractPropTypes<typeof useModelToggleProps>\n\nexport type ModelToggleParams = {\n  indicator: Ref<boolean>\n  shouldHideWhenRouteChanges?: Ref<boolean>\n  shouldProceed?: () => boolean\n  onShow?: () => void\n  onHide?: () => void\n}\n"]},"metadata":{},"sourceType":"module"}