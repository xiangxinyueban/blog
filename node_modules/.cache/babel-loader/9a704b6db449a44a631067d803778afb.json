{"ast":null,"code":"import \"core-js/modules/es.number.parse-int.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport { isRef, watch, onScopeDispose } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport '../../utils/index.mjs';\nimport { throwError } from '../../utils/error.mjs';\nimport { hasClass, removeClass, getStyle, addClass } from '../../utils/dom/style.mjs';\nimport { getScrollBarWidth } from '../../utils/dom/scroll.mjs';\n\nvar useLockscreen = function useLockscreen(trigger) {\n  if (!isRef(trigger)) {\n    throwError(\"[useLockscreen]\", \"You need to pass a ref param to this function\");\n  }\n\n  if (!isClient || hasClass(document.body, \"el-popup-parent--hidden\")) {\n    return;\n  }\n\n  var scrollBarWidth = 0;\n  var withoutHiddenClass = false;\n  var bodyPaddingRight = \"0\";\n  var computedBodyPaddingRight = 0;\n\n  var cleanup = function cleanup() {\n    removeClass(document.body, \"el-popup-parent--hidden\");\n\n    if (withoutHiddenClass) {\n      document.body.style.paddingRight = bodyPaddingRight;\n    }\n  };\n\n  watch(trigger, function (val) {\n    if (!val) {\n      cleanup();\n      return;\n    }\n\n    withoutHiddenClass = !hasClass(document.body, \"el-popup-parent--hidden\");\n\n    if (withoutHiddenClass) {\n      bodyPaddingRight = document.body.style.paddingRight;\n      computedBodyPaddingRight = Number.parseInt(getStyle(document.body, \"paddingRight\"), 10);\n    }\n\n    scrollBarWidth = getScrollBarWidth();\n    var bodyHasOverflow = document.documentElement.clientHeight < document.body.scrollHeight;\n    var bodyOverflowY = getStyle(document.body, \"overflowY\");\n\n    if (scrollBarWidth > 0 && (bodyHasOverflow || bodyOverflowY === \"scroll\") && withoutHiddenClass) {\n      document.body.style.paddingRight = \"\".concat(computedBodyPaddingRight + scrollBarWidth, \"px\");\n    }\n\n    addClass(document.body, \"el-popup-parent--hidden\");\n  });\n  onScopeDispose(function () {\n    return cleanup();\n  });\n};\n\nexport { useLockscreen };","map":{"version":3,"mappings":";;;;;;;;;AAUY,IAACA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAa;AACxC,MAAI,CAACC,KAAK,CAACD,OAAD,CAAV,EAAqB;AACnBE,cAAU,CAAC,iBAAD,EAAoB,+CAApB,CAAV;AACD;;AACD,MAAI,CAACC,QAAD,IAAaC,QAAQ,CAACC,QAAQ,CAACC,IAAV,EAAgB,yBAAhB,CAAzB,EAAqE;AACnE;AACD;;AACD,MAAIC,cAAc,GAAG,CAArB;AACA,MAAIC,kBAAkB,GAAG,KAAzB;AACA,MAAIC,gBAAgB,GAAG,GAAvB;AACA,MAAIC,wBAAwB,GAAG,CAA/B;;AACA,MAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBC,eAAW,CAACP,QAAQ,CAACC,IAAV,EAAgB,yBAAhB,CAAX;;AACA,QAAIE,kBAAJ,EAAwB;AACtBH,cAAQ,CAACC,IAAT,CAAcO,KAAd,CAAoBC,YAApB,GAAmCL,gBAAnC;AACD;AACF,GALD;;AAMAM,OAAK,CAACf,OAAD,EAAU,UAACgB,GAAD,EAAS;AACtB,QAAI,CAACA,GAAL,EAAU;AACRL,aAAO;AACP;AACD;;AACDH,sBAAkB,GAAG,CAACJ,QAAQ,CAACC,QAAQ,CAACC,IAAV,EAAgB,yBAAhB,CAA9B;;AACA,QAAIE,kBAAJ,EAAwB;AACtBC,sBAAgB,GAAGJ,QAAQ,CAACC,IAAT,CAAcO,KAAd,CAAoBC,YAAvC;AACAJ,8BAAwB,GAAGO,MAAM,CAACC,QAAP,CAAgBC,QAAQ,CAACd,QAAQ,CAACC,IAAV,EAAgB,cAAhB,CAAxB,EAAyD,EAAzD,CAA3B;AACD;;AACDC,kBAAc,GAAGa,iBAAiB,EAAlC;AACA,QAAMC,eAAe,GAAGhB,QAAQ,CAACiB,eAAT,CAAyBC,YAAzB,GAAwClB,QAAQ,CAACC,IAAT,CAAckB,YAA9E;AACA,QAAMC,aAAa,GAAGN,QAAQ,CAACd,QAAQ,CAACC,IAAV,EAAgB,WAAhB,CAA9B;;AACA,QAAIC,cAAc,GAAG,CAAjB,KAAuBc,eAAe,IAAII,aAAa,KAAK,QAA5D,KAAyEjB,kBAA7E,EAAiG;AAC/FH,cAAQ,CAACC,IAAT,CAAcO,KAAd,CAAoBC,YAApB,aAAsCJ,wBAAwB,GAAGH,cAAjE;AACD;;AACDmB,YAAQ,CAACrB,QAAQ,CAACC,IAAV,EAAgB,yBAAhB,CAAR;AACD,GAjBI,CAAL;AAkBAqB,gBAAc,CAAC;AAAA,WAAMhB,OAAO,EAAb;AAAA,GAAD,CAAd;AACF,CApCY","names":["useLockscreen","trigger","isRef","throwError","isClient","hasClass","document","body","scrollBarWidth","withoutHiddenClass","bodyPaddingRight","computedBodyPaddingRight","cleanup","removeClass","style","paddingRight","watch","val","Number","parseInt","getStyle","getScrollBarWidth","bodyHasOverflow","documentElement","clientHeight","scrollHeight","bodyOverflowY","addClass","onScopeDispose"],"sources":["../../../../../packages/hooks/use-lockscreen/index.ts"],"sourcesContent":["import { isRef, onScopeDispose, watch } from 'vue'\n\nimport { isClient } from '@vueuse/core'\nimport {\n  addClass,\n  getScrollBarWidth,\n  getStyle,\n  hasClass,\n  removeClass,\n  throwError,\n} from '@element-plus/utils'\n\nimport type { Ref } from 'vue'\n\n/**\n * Hook that monitoring the ref value to lock or unlock the screen.\n * When the trigger became true, it assumes modal is now opened and vice versa.\n * @param trigger {Ref<boolean>}\n */\nexport const useLockscreen = (trigger: Ref<boolean>) => {\n  if (!isRef(trigger)) {\n    throwError(\n      '[useLockscreen]',\n      'You need to pass a ref param to this function'\n    )\n  }\n  if (!isClient || hasClass(document.body, 'el-popup-parent--hidden')) {\n    return\n  }\n\n  let scrollBarWidth = 0\n  let withoutHiddenClass = false\n  let bodyPaddingRight = '0'\n  let computedBodyPaddingRight = 0\n\n  const cleanup = () => {\n    removeClass(document.body, 'el-popup-parent--hidden')\n    if (withoutHiddenClass) {\n      document.body.style.paddingRight = bodyPaddingRight\n    }\n  }\n  watch(trigger, (val) => {\n    if (!val) {\n      cleanup()\n      return\n    }\n\n    withoutHiddenClass = !hasClass(document.body, 'el-popup-parent--hidden')\n    if (withoutHiddenClass) {\n      bodyPaddingRight = document.body.style.paddingRight\n      computedBodyPaddingRight = Number.parseInt(\n        getStyle(document.body, 'paddingRight'),\n        10\n      )\n    }\n    scrollBarWidth = getScrollBarWidth()\n    const bodyHasOverflow =\n      document.documentElement.clientHeight < document.body.scrollHeight\n    const bodyOverflowY = getStyle(document.body, 'overflowY')\n    if (\n      scrollBarWidth > 0 &&\n      (bodyHasOverflow || bodyOverflowY === 'scroll') &&\n      withoutHiddenClass\n    ) {\n      document.body.style.paddingRight = `${\n        computedBodyPaddingRight + scrollBarWidth\n      }px`\n    }\n    addClass(document.body, 'el-popup-parent--hidden')\n  })\n  onScopeDispose(() => cleanup())\n}\n"]},"metadata":{},"sourceType":"module"}