{"ast":null,"code":"import _createClass from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport './types.mjs';\nimport { isString } from '@vue/shared';\n\nvar ElementPlusError = /*#__PURE__*/function (_Error) {\n  _inherits(ElementPlusError, _Error);\n\n  var _super = _createSuper(ElementPlusError);\n\n  function ElementPlusError(m) {\n    var _this;\n\n    _classCallCheck(this, ElementPlusError);\n\n    _this = _super.call(this, m);\n    _this.name = \"ElementPlusError\";\n    return _this;\n  }\n\n  return _createClass(ElementPlusError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction throwError(scope, m) {\n  throw new ElementPlusError(\"[\".concat(scope, \"] \").concat(m));\n}\n\nfunction debugWarn(scope, message) {\n  if (process.env.NODE_ENV !== \"production\") {\n    var error = isString(scope) ? new ElementPlusError(\"[\".concat(scope, \"] \").concat(message)) : scope;\n    console.warn(error);\n  }\n}\n\nexport { debugWarn, throwError };","map":{"version":3,"mappings":";;;;;;;;;;;;IACMA,gB;;;;;AACJ,4BAAYC,CAAZ,EAAe;AAAA;;AAAA;;AACb,8BAAMA,CAAN;AACA,UAAKC,IAAL,GAAY,kBAAZ;AAFa;AAGd;;;iCAJ4BC,K;;AAMxB,SAASC,UAAT,CAAoBC,KAApB,EAA2BJ,CAA3B,EAA8B;AACnC,QAAM,IAAID,gBAAJ,YAAyBK,KAAzB,eAAmCJ,CAAnC,EAAN;AACD;;AACM,SAASK,SAAT,CAAmBD,KAAnB,EAA0BE,OAA1B,EAAmC;AACxC,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAMC,KAAK,GAAGC,QAAQ,CAACP,KAAD,CAAR,GAAkB,IAAIL,gBAAJ,YAAyBK,KAAzB,eAAmCE,OAAnC,EAAlB,GAAkEF,KAAhF;AACAQ,WAAO,CAACC,IAAR,CAAaH,KAAb;AACD;AACH","names":["ElementPlusError","m","name","Error","throwError","scope","debugWarn","message","process","env","NODE_ENV","error","isString","console","warn"],"sources":["../../../../packages/utils/error.ts"],"sourcesContent":["import { isString } from './types'\n\nclass ElementPlusError extends Error {\n  constructor(m: string) {\n    super(m)\n    this.name = 'ElementPlusError'\n  }\n}\n\nexport function throwError(scope: string, m: string): never {\n  throw new ElementPlusError(`[${scope}] ${m}`)\n}\n\nexport function debugWarn(err: Error): void\nexport function debugWarn(scope: string, message: string): void\nexport function debugWarn(scope: string | Error, message?: string): void {\n  if (process.env.NODE_ENV !== 'production') {\n    const error: Error = isString(scope)\n      ? new ElementPlusError(`[${scope}] ${message}`)\n      : scope\n    // eslint-disable-next-line no-console\n    console.warn(error)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}