{"ast":null,"code":"import \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport { getCurrentInstance, watch } from 'vue';\nimport '../../../../utils/index.mjs';\nimport { parseWidth, parseMinWidth } from '../util.mjs';\nimport { hasOwn } from '@vue/shared';\n\nfunction getAllAliases(props, aliases) {\n  return props.reduce(function (prev, cur) {\n    prev[cur] = cur;\n    return prev;\n  }, aliases);\n}\n\nfunction useWatcher(owner, props_) {\n  var instance = getCurrentInstance();\n\n  var registerComplexWatchers = function registerComplexWatchers() {\n    var props = [\"fixed\"];\n    var aliases = {\n      realWidth: \"width\",\n      realMinWidth: \"minWidth\"\n    };\n    var allAliases = getAllAliases(props, aliases);\n    Object.keys(allAliases).forEach(function (key) {\n      var columnKey = aliases[key];\n\n      if (hasOwn(props_, columnKey)) {\n        watch(function () {\n          return props_[columnKey];\n        }, function (newVal) {\n          var value = newVal;\n\n          if (columnKey === \"width\" && key === \"realWidth\") {\n            value = parseWidth(newVal);\n          }\n\n          if (columnKey === \"minWidth\" && key === \"realMinWidth\") {\n            value = parseMinWidth(newVal);\n          }\n\n          instance.columnConfig.value[columnKey] = value;\n          instance.columnConfig.value[key] = value;\n          var updateColumns = columnKey === \"fixed\";\n          owner.value.store.scheduleLayout(updateColumns);\n        });\n      }\n    });\n  };\n\n  var registerNormalWatchers = function registerNormalWatchers() {\n    var props = [\"label\", \"filters\", \"filterMultiple\", \"sortable\", \"index\", \"formatter\", \"className\", \"labelClassName\", \"showOverflowTooltip\"];\n    var aliases = {\n      property: \"prop\",\n      align: \"realAlign\",\n      headerAlign: \"realHeaderAlign\"\n    };\n    var allAliases = getAllAliases(props, aliases);\n    Object.keys(allAliases).forEach(function (key) {\n      var columnKey = aliases[key];\n\n      if (hasOwn(props_, columnKey)) {\n        watch(function () {\n          return props_[columnKey];\n        }, function (newVal) {\n          instance.columnConfig.value[key] = newVal;\n        });\n      }\n    });\n  };\n\n  return {\n    registerComplexWatchers: registerComplexWatchers,\n    registerNormalWatchers: registerNormalWatchers\n  };\n}\n\nexport { useWatcher as default };","map":{"version":3,"mappings":";;;;;;;;;;AAGA,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuC;AACrC,SAAOD,KAAK,CAACE,MAAN,CAAa,UAACC,IAAD,EAAOC,GAAP,EAAe;AACjCD,QAAI,CAACC,GAAD,CAAJ,GAAYA,GAAZ;AACA,WAAOD,IAAP;AACD,GAHM,EAGJF,OAHI,CAAP;AAID;;AACD,SAASI,UAAT,CAAoBC,KAApB,EAA2BC,MAA3B,EAAmC;AACjC,MAAMC,QAAQ,GAAGC,kBAAkB,EAAnC;;AACA,MAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACpC,QAAMV,KAAK,GAAG,CAAC,OAAD,CAAd;AACA,QAAMC,OAAO,GAAG;AACdU,eAAS,EAAE,OADG;AAEdC,kBAAY,EAAE;AAFA,KAAhB;AAIA,QAAMC,UAAU,GAAGd,aAAa,CAACC,KAAD,EAAQC,OAAR,CAAhC;AACAa,UAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,OAAxB,CAAgC,UAACC,GAAD,EAAS;AACvC,UAAMC,SAAS,GAAGjB,OAAO,CAACgB,GAAD,CAAzB;;AACA,UAAIE,MAAM,CAACZ,MAAD,EAASW,SAAT,CAAV,EAA+B;AAC7BE,aAAK,CAAC;AAAA,iBAAMb,MAAM,CAACW,SAAD,CAAZ;AAAA,SAAD,EAA0B,UAACG,MAAD,EAAY;AACzC,cAAIC,KAAK,GAAGD,MAAZ;;AACA,cAAIH,SAAS,KAAK,OAAd,IAAyBD,GAAG,KAAK,WAArC,EAAkD;AAChDK,iBAAK,GAAGC,UAAU,CAACF,MAAD,CAAlB;AACD;;AACD,cAAIH,SAAS,KAAK,UAAd,IAA4BD,GAAG,KAAK,cAAxC,EAAwD;AACtDK,iBAAK,GAAGE,aAAa,CAACH,MAAD,CAArB;AACD;;AACDb,kBAAQ,CAACiB,YAAT,CAAsBH,KAAtB,CAA4BJ,SAA5B,IAAyCI,KAAzC;AACAd,kBAAQ,CAACiB,YAAT,CAAsBH,KAAtB,CAA4BL,GAA5B,IAAmCK,KAAnC;AACA,cAAMI,aAAa,GAAGR,SAAS,KAAK,OAApC;AACAZ,eAAK,CAACgB,KAAN,CAAYK,KAAZ,CAAkBC,cAAlB,CAAiCF,aAAjC;AACD,SAZI,CAAL;AAaD;AACF,KAjBD;AAkBD,GAzBD;;AA0BA,MAAMG,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACnC,QAAM7B,KAAK,GAAG,CACZ,OADY,EAEZ,SAFY,EAGZ,gBAHY,EAIZ,UAJY,EAKZ,OALY,EAMZ,WANY,EAOZ,WAPY,EAQZ,gBARY,EASZ,qBATY,CAAd;AAWA,QAAMC,OAAO,GAAG;AACd6B,cAAQ,EAAE,MADI;AAEdC,WAAK,EAAE,WAFO;AAGdC,iBAAW,EAAE;AAHC,KAAhB;AAKA,QAAMnB,UAAU,GAAGd,aAAa,CAACC,KAAD,EAAQC,OAAR,CAAhC;AACAa,UAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,OAAxB,CAAgC,UAACC,GAAD,EAAS;AACvC,UAAMC,SAAS,GAAGjB,OAAO,CAACgB,GAAD,CAAzB;;AACA,UAAIE,MAAM,CAACZ,MAAD,EAASW,SAAT,CAAV,EAA+B;AAC7BE,aAAK,CAAC;AAAA,iBAAMb,MAAM,CAACW,SAAD,CAAZ;AAAA,SAAD,EAA0B,UAACG,MAAD,EAAY;AACzCb,kBAAQ,CAACiB,YAAT,CAAsBH,KAAtB,CAA4BL,GAA5B,IAAmCI,MAAnC;AACD,SAFI,CAAL;AAGD;AACF,KAPD;AAQD,GA1BD;;AA2BA,SAAO;AACLX,2BAAuB,EAAvBA,uBADK;AAELmB,0BAAsB,EAAtBA;AAFK,GAAP;AAIF","names":["getAllAliases","props","aliases","reduce","prev","cur","useWatcher","owner","props_","instance","getCurrentInstance","registerComplexWatchers","realWidth","realMinWidth","allAliases","Object","keys","forEach","key","columnKey","hasOwn","watch","newVal","value","parseWidth","parseMinWidth","columnConfig","updateColumns","store","scheduleLayout","registerNormalWatchers","property","align","headerAlign"],"sources":["../../../../../../../packages/components/table/src/table-column/watcher-helper.ts"],"sourcesContent":["import { getCurrentInstance, watch } from 'vue'\nimport { hasOwn } from '@element-plus/utils'\nimport { parseMinWidth, parseWidth } from '../util'\n\nimport type { ComputedRef } from 'vue'\nimport type { TableColumn, TableColumnCtx, ValueOf } from './defaults'\n\nfunction getAllAliases(props, aliases) {\n  return props.reduce((prev, cur) => {\n    prev[cur] = cur\n    return prev\n  }, aliases)\n}\nfunction useWatcher<T>(\n  owner: ComputedRef<any>,\n  props_: Partial<TableColumnCtx<T>>\n) {\n  const instance = getCurrentInstance() as TableColumn<T>\n  const registerComplexWatchers = () => {\n    const props = ['fixed']\n    const aliases = {\n      realWidth: 'width',\n      realMinWidth: 'minWidth',\n    }\n    const allAliases = getAllAliases(props, aliases)\n    Object.keys(allAliases).forEach((key) => {\n      const columnKey = aliases[key]\n      if (hasOwn(props_, columnKey)) {\n        watch(\n          () => props_[columnKey],\n          (newVal) => {\n            let value: ValueOf<TableColumnCtx<T>> = newVal\n            if (columnKey === 'width' && key === 'realWidth') {\n              value = parseWidth(newVal)\n            }\n            if (columnKey === 'minWidth' && key === 'realMinWidth') {\n              value = parseMinWidth(newVal)\n            }\n            instance.columnConfig.value[columnKey as any] = value\n            instance.columnConfig.value[key] = value\n            const updateColumns = columnKey === 'fixed'\n            owner.value.store.scheduleLayout(updateColumns)\n          }\n        )\n      }\n    })\n  }\n  const registerNormalWatchers = () => {\n    const props = [\n      'label',\n      'filters',\n      'filterMultiple',\n      'sortable',\n      'index',\n      'formatter',\n      'className',\n      'labelClassName',\n      'showOverflowTooltip',\n    ]\n    const aliases = {\n      property: 'prop',\n      align: 'realAlign',\n      headerAlign: 'realHeaderAlign',\n    }\n    const allAliases = getAllAliases(props, aliases)\n    Object.keys(allAliases).forEach((key) => {\n      const columnKey = aliases[key]\n      if (hasOwn(props_, columnKey)) {\n        watch(\n          () => props_[columnKey],\n          (newVal) => {\n            instance.columnConfig.value[key] = newVal\n          }\n        )\n      }\n    })\n  }\n\n  return {\n    registerComplexWatchers,\n    registerNormalWatchers,\n  }\n}\n\nexport default useWatcher\n"]},"metadata":{},"sourceType":"module"}