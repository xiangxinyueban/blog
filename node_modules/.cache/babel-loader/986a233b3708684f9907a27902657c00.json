{"ast":null,"code":"import _defineProperty from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport { defineComponent, useSlots, ref, computed, openBlock, createBlock, Transition, unref, withCtx, withDirectives, createElementVNode, normalizeClass, resolveDynamicComponent, createCommentVNode, createElementBlock, renderSlot, createTextVNode, toDisplayString, Fragment, createVNode, vShow } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { alertProps, alertEmits } from './alert.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { TypeComponents, TypeComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar __default__ = {\n  name: \"ElAlert\"\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: alertProps,\n  emits: alertEmits,\n  setup: function setup(__props, _ref) {\n    var emit = _ref.emit;\n    var props = __props;\n    var Close = TypeComponents.Close;\n    var slots = useSlots();\n    var ns = useNamespace(\"alert\");\n    var visible = ref(true);\n    var iconComponent = computed(function () {\n      return TypeComponentsMap[props.type] || TypeComponentsMap[\"info\"];\n    });\n    var isBigIcon = computed(function () {\n      return props.description || _defineProperty({}, ns.is(\"big\"), slots[\"default\"]);\n    });\n    var isBoldTitle = computed(function () {\n      return props.description || _defineProperty({}, ns.is(\"bold\"), slots[\"default\"]);\n    });\n\n    var close = function close(evt) {\n      visible.value = false;\n      emit(\"close\", evt);\n    };\n\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(Transition, {\n        name: unref(ns).b(\"fade\")\n      }, {\n        \"default\": withCtx(function () {\n          return [withDirectives(createElementVNode(\"div\", {\n            \"class\": normalizeClass([unref(ns).b(), unref(ns).m(_ctx.type), unref(ns).is(\"center\", _ctx.center), unref(ns).is(_ctx.effect)]),\n            role: \"alert\"\n          }, [_ctx.showIcon && unref(iconComponent) ? (openBlock(), createBlock(unref(ElIcon), {\n            key: 0,\n            \"class\": normalizeClass([unref(ns).e(\"icon\"), unref(isBigIcon)])\n          }, {\n            \"default\": withCtx(function () {\n              return [(openBlock(), createBlock(resolveDynamicComponent(unref(iconComponent))))];\n            }),\n            _: 1\n          }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n            \"class\": normalizeClass(unref(ns).e(\"content\"))\n          }, [_ctx.title || _ctx.$slots.title ? (openBlock(), createElementBlock(\"span\", {\n            key: 0,\n            \"class\": normalizeClass([unref(ns).e(\"title\"), unref(isBoldTitle)])\n          }, [renderSlot(_ctx.$slots, \"title\", {}, function () {\n            return [createTextVNode(toDisplayString(_ctx.title), 1)];\n          })], 2)) : createCommentVNode(\"v-if\", true), _ctx.$slots[\"default\"] || _ctx.description ? (openBlock(), createElementBlock(\"p\", {\n            key: 1,\n            \"class\": normalizeClass(unref(ns).e(\"description\"))\n          }, [renderSlot(_ctx.$slots, \"default\", {}, function () {\n            return [createTextVNode(toDisplayString(_ctx.description), 1)];\n          })], 2)) : createCommentVNode(\"v-if\", true), _ctx.closable ? (openBlock(), createElementBlock(Fragment, {\n            key: 2\n          }, [_ctx.closeText ? (openBlock(), createElementBlock(\"div\", {\n            key: 0,\n            \"class\": normalizeClass([unref(ns).e(\"close-btn\"), unref(ns).is(\"customed\")]),\n            onClick: close\n          }, toDisplayString(_ctx.closeText), 3)) : (openBlock(), createBlock(unref(ElIcon), {\n            key: 1,\n            \"class\": normalizeClass(unref(ns).e(\"close-btn\")),\n            onClick: close\n          }, {\n            \"default\": withCtx(function () {\n              return [createVNode(unref(Close))];\n            }),\n            _: 1\n          }, 8, [\"class\"]))], 2112)) : createCommentVNode(\"v-if\", true)], 2)], 2), [[vShow, visible.value]])];\n        }),\n        _: 3\n      }, 8, [\"name\"]);\n    };\n  }\n}));\n\nvar Alert = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/alert/src/alert.vue\"]]);\n\nexport { Alert as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAgDA;AAQA;AAEA;AAGA;AAGA,gCACA;AAAA;AAAA,MADA;AAGA,6BACA;AAAA;AAAA,KADA;AAGA,+BACA;AAAA;AAAA,KADA;;AAKA;AACAA;AACAC;AACA,KAHA","names":["visible","emit"],"sources":["../../../../../../packages/components/alert/src/alert.vue"],"sourcesContent":["<template>\n  <transition :name=\"ns.b('fade')\">\n    <div\n      v-show=\"visible\"\n      :class=\"[ns.b(), ns.m(type), ns.is('center', center), ns.is(effect)]\"\n      role=\"alert\"\n    >\n      <el-icon\n        v-if=\"showIcon && iconComponent\"\n        :class=\"[ns.e('icon'), isBigIcon]\"\n      >\n        <component :is=\"iconComponent\" />\n      </el-icon>\n      <div :class=\"ns.e('content')\">\n        <span\n          v-if=\"title || $slots.title\"\n          :class=\"[ns.e('title'), isBoldTitle]\"\n        >\n          <slot name=\"title\">{{ title }}</slot>\n        </span>\n        <p v-if=\"$slots.default || description\" :class=\"ns.e('description')\">\n          <slot>\n            {{ description }}\n          </slot>\n        </p>\n        <template v-if=\"closable\">\n          <div\n            v-if=\"closeText\"\n            :class=\"[ns.e('close-btn'), ns.is('customed')]\"\n            @click=\"close\"\n          >\n            {{ closeText }}\n          </div>\n          <el-icon v-else :class=\"ns.e('close-btn')\" @click=\"close\">\n            <Close />\n          </el-icon>\n        </template>\n      </div>\n    </div>\n  </transition>\n</template>\n<script lang=\"ts\" setup>\nimport { computed, ref, useSlots } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { TypeComponents, TypeComponentsMap } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { alertEmits, alertProps } from './alert'\n\nconst { Close } = TypeComponents\n\ndefineOptions({\n  name: 'ElAlert',\n})\n\nconst props = defineProps(alertProps)\nconst emit = defineEmits(alertEmits)\nconst slots = useSlots()\n\nconst ns = useNamespace('alert')\n\n// state\nconst visible = ref(true)\n\n// computed\nconst iconComponent = computed(\n  () => TypeComponentsMap[props.type] || TypeComponentsMap['info']\n)\nconst isBigIcon = computed(\n  () => props.description || { [ns.is('big')]: slots.default }\n)\nconst isBoldTitle = computed(\n  () => props.description || { [ns.is('bold')]: slots.default }\n)\n\n// methods\nconst close = (evt: MouseEvent) => {\n  visible.value = false\n  emit('close', evt)\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}