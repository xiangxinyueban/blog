{"ast":null,"code":"import _typeof from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _toConsumableArray from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.string.fixed.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport { inject } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport { getFixedColumnOffset, ensurePosition, getFixedColumnsClass } from '../util.mjs';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\n\nfunction useStyles(props) {\n  var parent = inject(TABLE_INJECTION_KEY);\n  var ns = useNamespace(\"table\");\n\n  var getRowStyle = function getRowStyle(row, rowIndex) {\n    var rowStyle = parent == null ? void 0 : parent.props.rowStyle;\n\n    if (typeof rowStyle === \"function\") {\n      return rowStyle.call(null, {\n        row: row,\n        rowIndex: rowIndex\n      });\n    }\n\n    return rowStyle || null;\n  };\n\n  var getRowClass = function getRowClass(row, rowIndex) {\n    var classes = [ns.e(\"row\")];\n\n    if ((parent == null ? void 0 : parent.props.highlightCurrentRow) && row === props.store.states.currentRow.value) {\n      classes.push(\"current-row\");\n    }\n\n    if (props.stripe && rowIndex % 2 === 1) {\n      classes.push(ns.em(\"row\", \"striped\"));\n    }\n\n    var rowClassName = parent == null ? void 0 : parent.props.rowClassName;\n\n    if (typeof rowClassName === \"string\") {\n      classes.push(rowClassName);\n    } else if (typeof rowClassName === \"function\") {\n      classes.push(rowClassName.call(null, {\n        row: row,\n        rowIndex: rowIndex\n      }));\n    }\n\n    return classes;\n  };\n\n  var getCellStyle = function getCellStyle(rowIndex, columnIndex, row, column) {\n    var cellStyle = parent == null ? void 0 : parent.props.cellStyle;\n    var cellStyles = cellStyle != null ? cellStyle : {};\n\n    if (typeof cellStyle === \"function\") {\n      cellStyles = cellStyle.call(null, {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex,\n        row: row,\n        column: column\n      });\n    }\n\n    var fixedStyle = column.isSubColumn ? null : getFixedColumnOffset(columnIndex, props == null ? void 0 : props.fixed, props.store);\n    ensurePosition(fixedStyle, \"left\");\n    ensurePosition(fixedStyle, \"right\");\n    return Object.assign({}, cellStyles, fixedStyle);\n  };\n\n  var getCellClass = function getCellClass(rowIndex, columnIndex, row, column) {\n    var fixedClasses = column.isSubColumn ? [] : getFixedColumnsClass(ns.b(), columnIndex, props == null ? void 0 : props.fixed, props.store);\n    var classes = [column.id, column.align, column.className].concat(_toConsumableArray(fixedClasses));\n    var cellClassName = parent == null ? void 0 : parent.props.cellClassName;\n\n    if (typeof cellClassName === \"string\") {\n      classes.push(cellClassName);\n    } else if (typeof cellClassName === \"function\") {\n      classes.push(cellClassName.call(null, {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex,\n        row: row,\n        column: column\n      }));\n    }\n\n    classes.push(ns.e(\"cell\"));\n    return classes.filter(function (className) {\n      return Boolean(className);\n    }).join(\" \");\n  };\n\n  var getSpan = function getSpan(row, column, rowIndex, columnIndex) {\n    var rowspan = 1;\n    var colspan = 1;\n    var fn = parent == null ? void 0 : parent.props.spanMethod;\n\n    if (typeof fn === \"function\") {\n      var result = fn({\n        row: row,\n        column: column,\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      });\n\n      if (Array.isArray(result)) {\n        rowspan = result[0];\n        colspan = result[1];\n      } else if (_typeof(result) === \"object\") {\n        rowspan = result.rowspan;\n        colspan = result.colspan;\n      }\n    }\n\n    return {\n      rowspan: rowspan,\n      colspan: colspan\n    };\n  };\n\n  var getColspanRealWidth = function getColspanRealWidth(columns, colspan, index) {\n    if (colspan < 1) {\n      return columns[index].realWidth;\n    }\n\n    var widthArr = columns.map(function (_ref) {\n      var realWidth = _ref.realWidth,\n          width = _ref.width;\n      return realWidth || width;\n    }).slice(index, index + colspan);\n    return Number(widthArr.reduce(function (acc, width) {\n      return Number(acc) + Number(width);\n    }, -1));\n  };\n\n  return {\n    getRowStyle: getRowStyle,\n    getRowClass: getRowClass,\n    getCellStyle: getCellStyle,\n    getCellClass: getCellClass,\n    getSpan: getSpan,\n    getColspanRealWidth: getColspanRealWidth\n  };\n}\n\nexport { useStyles as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAQA,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,MAAMC,MAAM,GAAGC,MAAM,CAACC,mBAAD,CAArB;AACA,MAAMC,EAAE,GAAGC,YAAY,CAAC,OAAD,CAAvB;;AACA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAMC,QAAN,EAAmB;AACrC,QAAMC,QAAQ,GAAGR,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACD,KAAP,CAAaS,QAAxD;;AACA,QAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,aAAOA,QAAQ,CAACC,IAAT,CAAc,IAAd,EAAoB;AACzBH,WAAG,EAAHA,GADyB;AAEzBC,gBAAQ,EAARA;AAFyB,OAApB,CAAP;AAID;;AACD,WAAOC,QAAQ,IAAI,IAAnB;AACD,GATD;;AAUA,MAAME,WAAW,GAAG,SAAdA,WAAc,CAACJ,GAAD,EAAMC,QAAN,EAAmB;AACrC,QAAMI,OAAO,GAAG,CAACR,EAAE,CAACS,CAAH,CAAK,KAAL,CAAD,CAAhB;;AACA,QAAI,CAACZ,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACD,KAAP,CAAac,mBAAxC,KAAgEP,GAAG,KAAKP,KAAK,CAACe,KAAN,CAAYC,MAAZ,CAAmBC,UAAnB,CAA8BC,KAA1G,EAAiH;AAC/GN,aAAO,CAACO,IAAR,CAAa,aAAb;AACD;;AACD,QAAInB,KAAK,CAACoB,MAAN,IAAgBZ,QAAQ,GAAG,CAAX,KAAiB,CAArC,EAAwC;AACtCI,aAAO,CAACO,IAAR,CAAaf,EAAE,CAACiB,EAAH,CAAM,KAAN,EAAa,SAAb,CAAb;AACD;;AACD,QAAMC,YAAY,GAAGrB,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACD,KAAP,CAAasB,YAA5D;;AACA,QAAI,OAAOA,YAAP,KAAwB,QAA5B,EAAsC;AACpCV,aAAO,CAACO,IAAR,CAAaG,YAAb;AACD,KAFD,MAEO,IAAI,OAAOA,YAAP,KAAwB,UAA5B,EAAwC;AAC7CV,aAAO,CAACO,IAAR,CAAaG,YAAY,CAACZ,IAAb,CAAkB,IAAlB,EAAwB;AACnCH,WAAG,EAAHA,GADmC;AAEnCC,gBAAQ,EAARA;AAFmC,OAAxB,CAAb;AAID;;AACD,WAAOI,OAAP;AACD,GAlBD;;AAmBA,MAAMW,YAAY,GAAG,SAAfA,YAAe,CAACf,QAAD,EAAWgB,WAAX,EAAwBjB,GAAxB,EAA6BkB,MAA7B,EAAwC;AAC3D,QAAMC,SAAS,GAAGzB,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACD,KAAP,CAAa0B,SAAzD;AACA,QAAIC,UAAU,GAAGD,SAAS,IAAI,IAAb,GAAoBA,SAApB,GAAgC,EAAjD;;AACA,QAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;AACnCC,gBAAU,GAAGD,SAAS,CAAChB,IAAV,CAAe,IAAf,EAAqB;AAChCF,gBAAQ,EAARA,QADgC;AAEhCgB,mBAAW,EAAXA,WAFgC;AAGhCjB,WAAG,EAAHA,GAHgC;AAIhCkB,cAAM,EAANA;AAJgC,OAArB,CAAb;AAMD;;AACD,QAAMG,UAAU,GAAGH,MAAM,CAACI,WAAP,GAAqB,IAArB,GAA4BC,oBAAoB,CAACN,WAAD,EAAcxB,KAAK,IAAI,IAAT,GAAgB,KAAK,CAArB,GAAyBA,KAAK,CAAC+B,KAA7C,EAAoD/B,KAAK,CAACe,KAA1D,CAAnE;AACAiB,kBAAc,CAACJ,UAAD,EAAa,MAAb,CAAd;AACAI,kBAAc,CAACJ,UAAD,EAAa,OAAb,CAAd;AACA,WAAOK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,UAAlB,EAA8BC,UAA9B,CAAP;AACD,GAfD;;AAgBA,MAAMO,YAAY,GAAG,SAAfA,YAAe,CAAC3B,QAAD,EAAWgB,WAAX,EAAwBjB,GAAxB,EAA6BkB,MAA7B,EAAwC;AAC3D,QAAMW,YAAY,GAAGX,MAAM,CAACI,WAAP,GAAqB,EAArB,GAA0BQ,oBAAoB,CAACjC,EAAE,CAACkC,CAAH,EAAD,EAASd,WAAT,EAAsBxB,KAAK,IAAI,IAAT,GAAgB,KAAK,CAArB,GAAyBA,KAAK,CAAC+B,KAArD,EAA4D/B,KAAK,CAACe,KAAlE,CAAnE;AACA,QAAMH,OAAO,IAAIa,MAAM,CAACc,EAAX,EAAed,MAAM,CAACe,KAAtB,EAA6Bf,MAAM,CAACgB,SAApC,4BAAkDL,YAAlD,EAAb;AACA,QAAMM,aAAa,GAAGzC,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACD,KAAP,CAAa0C,aAA7D;;AACA,QAAI,OAAOA,aAAP,KAAyB,QAA7B,EAAuC;AACrC9B,aAAO,CAACO,IAAR,CAAauB,aAAb;AACD,KAFD,MAEO,IAAI,OAAOA,aAAP,KAAyB,UAA7B,EAAyC;AAC9C9B,aAAO,CAACO,IAAR,CAAauB,aAAa,CAAChC,IAAd,CAAmB,IAAnB,EAAyB;AACpCF,gBAAQ,EAARA,QADoC;AAEpCgB,mBAAW,EAAXA,WAFoC;AAGpCjB,WAAG,EAAHA,GAHoC;AAIpCkB,cAAM,EAANA;AAJoC,OAAzB,CAAb;AAMD;;AACDb,WAAO,CAACO,IAAR,CAAaf,EAAE,CAACS,CAAH,CAAK,MAAL,CAAb;AACA,WAAOD,OAAO,CAAC+B,MAAR,CAAe,UAACF,SAAD;AAAA,aAAeG,OAAO,CAACH,SAAD,CAAtB;AAAA,KAAf,EAAkDI,IAAlD,CAAuD,GAAvD,CAAP;AACD,GAhBD;;AAiBA,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAACvC,GAAD,EAAMkB,MAAN,EAAcjB,QAAd,EAAwBgB,WAAxB,EAAwC;AACtD,QAAIuB,OAAO,GAAG,CAAd;AACA,QAAIC,OAAO,GAAG,CAAd;AACA,QAAMC,EAAE,GAAGhD,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACD,KAAP,CAAakD,UAAlD;;AACA,QAAI,OAAOD,EAAP,KAAc,UAAlB,EAA8B;AAC5B,UAAME,MAAM,GAAGF,EAAE,CAAC;AAChB1C,WAAG,EAAHA,GADgB;AAEhBkB,cAAM,EAANA,MAFgB;AAGhBjB,gBAAQ,EAARA,QAHgB;AAIhBgB,mBAAW,EAAXA;AAJgB,OAAD,CAAjB;;AAMA,UAAI4B,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACzBJ,eAAO,GAAGI,MAAM,CAAC,CAAD,CAAhB;AACAH,eAAO,GAAGG,MAAM,CAAC,CAAD,CAAhB;AACD,OAHD,MAGO,IAAI,QAAOA,MAAP,MAAkB,QAAtB,EAAgC;AACrCJ,eAAO,GAAGI,MAAM,CAACJ,OAAjB;AACAC,eAAO,GAAGG,MAAM,CAACH,OAAjB;AACD;AACF;;AACD,WAAO;AAAED,aAAO,EAAPA,OAAF;AAAWC,aAAO,EAAPA;AAAX,KAAP;AACD,GApBD;;AAqBA,MAAMM,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,OAAD,EAAUP,OAAV,EAAmBQ,KAAnB,EAA6B;AACvD,QAAIR,OAAO,GAAG,CAAd,EAAiB;AACf,aAAOO,OAAO,CAACC,KAAD,CAAP,CAAeC,SAAtB;AACD;;AACD,QAAMC,QAAQ,GAAGH,OAAO,CAACI,GAAR,CAAY;AAAA,UAAGF,SAAH,QAAGA,SAAH;AAAA,UAAcG,KAAd,QAAcA,KAAd;AAAA,aAA0BH,SAAS,IAAIG,KAAvC;AAAA,KAAZ,EAA0DC,KAA1D,CAAgEL,KAAhE,EAAuEA,KAAK,GAAGR,OAA/E,CAAjB;AACA,WAAOc,MAAM,CAACJ,QAAQ,CAACK,MAAT,CAAgB,UAACC,GAAD,EAAMJ,KAAN;AAAA,aAAgBE,MAAM,CAACE,GAAD,CAAN,GAAcF,MAAM,CAACF,KAAD,CAApC;AAAA,KAAhB,EAA6D,CAAC,CAA9D,CAAD,CAAb;AACD,GAND;;AAOA,SAAO;AACLtD,eAAW,EAAXA,WADK;AAELK,eAAW,EAAXA,WAFK;AAGLY,gBAAY,EAAZA,YAHK;AAILY,gBAAY,EAAZA,YAJK;AAKLW,WAAO,EAAPA,OALK;AAMLQ,uBAAmB,EAAnBA;AANK,GAAP;AAQF","names":["useStyles","props","parent","inject","TABLE_INJECTION_KEY","ns","useNamespace","getRowStyle","row","rowIndex","rowStyle","call","getRowClass","classes","e","highlightCurrentRow","store","states","currentRow","value","push","stripe","em","rowClassName","getCellStyle","columnIndex","column","cellStyle","cellStyles","fixedStyle","isSubColumn","getFixedColumnOffset","fixed","ensurePosition","Object","assign","getCellClass","fixedClasses","getFixedColumnsClass","b","id","align","className","cellClassName","filter","Boolean","join","getSpan","rowspan","colspan","fn","spanMethod","result","Array","isArray","getColspanRealWidth","columns","index","realWidth","widthArr","map","width","slice","Number","reduce","acc"],"sources":["../../../../../../../packages/components/table/src/table-body/styles-helper.ts"],"sourcesContent":["import { inject } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport {\n  ensurePosition,\n  getFixedColumnOffset,\n  getFixedColumnsClass,\n} from '../util'\nimport { TABLE_INJECTION_KEY } from '../tokens'\nimport type { TableColumnCtx } from '../table-column/defaults'\nimport type { TableBodyProps } from './defaults'\n\nfunction useStyles<T>(props: Partial<TableBodyProps<T>>) {\n  const parent = inject(TABLE_INJECTION_KEY)\n  const ns = useNamespace('table')\n\n  const getRowStyle = (row: T, rowIndex: number) => {\n    const rowStyle = parent?.props.rowStyle\n    if (typeof rowStyle === 'function') {\n      return rowStyle.call(null, {\n        row,\n        rowIndex,\n      })\n    }\n    return rowStyle || null\n  }\n\n  const getRowClass = (row: T, rowIndex: number) => {\n    const classes = [ns.e('row')]\n    if (\n      parent?.props.highlightCurrentRow &&\n      row === props.store.states.currentRow.value\n    ) {\n      classes.push('current-row')\n    }\n\n    if (props.stripe && rowIndex % 2 === 1) {\n      classes.push(ns.em('row', 'striped'))\n    }\n    const rowClassName = parent?.props.rowClassName\n    if (typeof rowClassName === 'string') {\n      classes.push(rowClassName)\n    } else if (typeof rowClassName === 'function') {\n      classes.push(\n        rowClassName.call(null, {\n          row,\n          rowIndex,\n        })\n      )\n    }\n    return classes\n  }\n\n  const getCellStyle = (\n    rowIndex: number,\n    columnIndex: number,\n    row: T,\n    column: TableColumnCtx<T>\n  ) => {\n    const cellStyle = parent?.props.cellStyle\n    let cellStyles = cellStyle ?? {}\n    if (typeof cellStyle === 'function') {\n      cellStyles = cellStyle.call(null, {\n        rowIndex,\n        columnIndex,\n        row,\n        column,\n      })\n    }\n    const fixedStyle = column.isSubColumn\n      ? null\n      : getFixedColumnOffset(columnIndex, props?.fixed, props.store)\n    ensurePosition(fixedStyle, 'left')\n    ensurePosition(fixedStyle, 'right')\n    return Object.assign({}, cellStyles, fixedStyle)\n  }\n\n  const getCellClass = (\n    rowIndex: number,\n    columnIndex: number,\n    row: T,\n    column: TableColumnCtx<T>\n  ) => {\n    const fixedClasses = column.isSubColumn\n      ? []\n      : getFixedColumnsClass(ns.b(), columnIndex, props?.fixed, props.store)\n    const classes = [column.id, column.align, column.className, ...fixedClasses]\n    const cellClassName = parent?.props.cellClassName\n    if (typeof cellClassName === 'string') {\n      classes.push(cellClassName)\n    } else if (typeof cellClassName === 'function') {\n      classes.push(\n        cellClassName.call(null, {\n          rowIndex,\n          columnIndex,\n          row,\n          column,\n        })\n      )\n    }\n    classes.push(ns.e('cell'))\n    return classes.filter((className) => Boolean(className)).join(' ')\n  }\n  const getSpan = (\n    row: T,\n    column: TableColumnCtx<T>,\n    rowIndex: number,\n    columnIndex: number\n  ) => {\n    let rowspan = 1\n    let colspan = 1\n    const fn = parent?.props.spanMethod\n    if (typeof fn === 'function') {\n      const result = fn({\n        row,\n        column,\n        rowIndex,\n        columnIndex,\n      })\n      if (Array.isArray(result)) {\n        rowspan = result[0]\n        colspan = result[1]\n      } else if (typeof result === 'object') {\n        rowspan = result.rowspan\n        colspan = result.colspan\n      }\n    }\n    return { rowspan, colspan }\n  }\n  const getColspanRealWidth = (\n    columns: TableColumnCtx<T>[],\n    colspan: number,\n    index: number\n  ): number => {\n    if (colspan < 1) {\n      return columns[index].realWidth\n    }\n    const widthArr = columns\n      .map(({ realWidth, width }) => realWidth || width)\n      .slice(index, index + colspan)\n    return Number(\n      widthArr.reduce((acc, width) => Number(acc) + Number(width), -1)\n    )\n  }\n\n  return {\n    getRowStyle,\n    getRowClass,\n    getCellStyle,\n    getCellClass,\n    getSpan,\n    getColspanRealWidth,\n  }\n}\n\nexport default useStyles\n"]},"metadata":{},"sourceType":"module"}