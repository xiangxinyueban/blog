{"ast":null,"code":"var on = function on(element, event, handler) {\n  var useCapture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  if (element && event && handler) {\n    element == null ? void 0 : element.addEventListener(event, handler, useCapture);\n  }\n};\n\nvar off = function off(element, event, handler) {\n  var useCapture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  if (element && event && handler) {\n    element == null ? void 0 : element.removeEventListener(event, handler, useCapture);\n  }\n};\n\nvar once = function once(el, event, fn) {\n  var listener = function listener() {\n    if (fn) {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      fn.apply(this, args);\n    }\n\n    off(el, event, listener);\n  };\n\n  on(el, event, listener);\n};\n\nvar composeEventHandlers = function composeEventHandlers(theirsHandler, oursHandler) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$checkForDefaultP = _ref.checkForDefaultPrevented,\n      checkForDefaultPrevented = _ref$checkForDefaultP === void 0 ? true : _ref$checkForDefaultP;\n\n  var handleEvent = function handleEvent(event) {\n    var shouldPrevent = theirsHandler == null ? void 0 : theirsHandler(event);\n\n    if (checkForDefaultPrevented === false || !shouldPrevent) {\n      return oursHandler == null ? void 0 : oursHandler(event);\n    }\n  };\n\n  return handleEvent;\n};\n\nvar whenMouse = function whenMouse(handler) {\n  return function (e) {\n    return e.pointerType === \"mouse\" ? handler(e) : void 0;\n  };\n};\n\nexport { composeEventHandlers, off, on, once, whenMouse };","map":{"version":3,"mappings":"AAAY,IAACA,EAAE,GAAG,SAALA,EAAK,CAACC,OAAD,EAAUC,KAAV,EAAiBC,OAAjB,EAAiD;AAAA,MAAvBC,UAAuB,uEAAV,KAAU;;AACjE,MAAIH,OAAO,IAAIC,KAAX,IAAoBC,OAAxB,EAAiC;AAC/BF,WAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACI,gBAAR,CAAyBH,KAAzB,EAAgCC,OAAhC,EAAyCC,UAAzC,CAA3B;AACD;AACH,CAJY;;AAKA,IAACE,GAAG,GAAG,SAANA,GAAM,CAACL,OAAD,EAAUC,KAAV,EAAiBC,OAAjB,EAAiD;AAAA,MAAvBC,UAAuB,uEAAV,KAAU;;AAClE,MAAIH,OAAO,IAAIC,KAAX,IAAoBC,OAAxB,EAAiC;AAC/BF,WAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACM,mBAAR,CAA4BL,KAA5B,EAAmCC,OAAnC,EAA4CC,UAA5C,CAA3B;AACD;AACH,CAJY;;AAKA,IAACI,IAAI,GAAG,SAAPA,IAAO,CAACC,EAAD,EAAKP,KAAL,EAAYQ,EAAZ,EAAmB;AACrC,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAkB;AACjC,QAAID,EAAJ,EAAQ;AAAA,wCADmBE,IACnB;AADmBA,YACnB;AAAA;;AACNF,QAAE,CAACG,KAAH,CAAS,IAAT,EAAeD,IAAf;AACD;;AACDN,OAAG,CAACG,EAAD,EAAKP,KAAL,EAAYS,QAAZ,CAAH;AACD,GALD;;AAMAX,IAAE,CAACS,EAAD,EAAKP,KAAL,EAAYS,QAAZ,CAAF;AACF,CARY;;AASA,IAACG,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,aAAD,EAAgBC,WAAhB,EAA0E;AAAA,iFAAP,EAAO;AAAA,mCAA3CC,wBAA2C;AAAA,MAA3CA,wBAA2C,sCAAhB,IAAgB;;AAC5G,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAAChB,KAAD,EAAW;AAC7B,QAAMiB,aAAa,GAAGJ,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACb,KAAD,CAApE;;AACA,QAAIe,wBAAwB,KAAK,KAA7B,IAAsC,CAACE,aAA3C,EAA0D;AACxD,aAAOH,WAAW,IAAI,IAAf,GAAsB,KAAK,CAA3B,GAA+BA,WAAW,CAACd,KAAD,CAAjD;AACD;AACF,GALD;;AAMA,SAAOgB,WAAP;AACF,CARY;;AASA,IAACE,SAAS,GAAG,SAAZA,SAAY,CAACjB,OAAD,EAAa;AACpC,SAAO,UAACkB,CAAD;AAAA,WAAOA,CAAC,CAACC,WAAF,KAAkB,OAAlB,GAA4BnB,OAAO,CAACkB,CAAD,CAAnC,GAAyC,KAAK,CAArD;AAAA,GAAP;AACF,CAFY","names":["on","element","event","handler","useCapture","addEventListener","off","removeEventListener","once","el","fn","listener","args","apply","composeEventHandlers","theirsHandler","oursHandler","checkForDefaultPrevented","handleEvent","shouldPrevent","whenMouse","e","pointerType"],"sources":["../../../../../packages/utils/dom/event.ts"],"sourcesContent":["/** @deprecated use `element.addEventListener` instead */\nexport const on = (\n  element: HTMLElement | Document | Window,\n  event: string,\n  handler: EventListenerOrEventListenerObject,\n  useCapture = false\n): void => {\n  if (element && event && handler) {\n    element?.addEventListener(event, handler, useCapture)\n  }\n}\n\n/** @deprecated use `element.addEventListener` instead */\nexport const off = (\n  element: HTMLElement | Document | Window,\n  event: string,\n  handler: EventListenerOrEventListenerObject,\n  useCapture = false\n): void => {\n  if (element && event && handler) {\n    element?.removeEventListener(event, handler, useCapture)\n  }\n}\n\n/** @deprecated use `element.addEventListener` instead */\nexport const once = (\n  el: HTMLElement,\n  event: string,\n  fn: EventListener\n): void => {\n  const listener = function (this: any, ...args: any) {\n    if (fn) {\n      fn.apply(this, args)\n    }\n    off(el, event, listener)\n  }\n  on(el, event, listener)\n}\n\nexport const composeEventHandlers = <E>(\n  theirsHandler?: (event: E) => boolean | void,\n  oursHandler?: (event: E) => void,\n  { checkForDefaultPrevented = true } = {}\n) => {\n  const handleEvent = (event: E) => {\n    const shouldPrevent = theirsHandler?.(event)\n\n    if (checkForDefaultPrevented === false || !shouldPrevent) {\n      return oursHandler?.(event)\n    }\n  }\n  return handleEvent\n}\n\ntype WhenMouseHandler = (e: PointerEvent) => any\nexport const whenMouse = (handler: WhenMouseHandler): WhenMouseHandler => {\n  return (e: PointerEvent) =>\n    e.pointerType === 'mouse' ? handler(e) : undefined\n}\n"]},"metadata":{},"sourceType":"module"}