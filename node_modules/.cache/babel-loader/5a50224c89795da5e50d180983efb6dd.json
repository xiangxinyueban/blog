{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { defineComponent, inject, ref, computed, onBeforeUnmount, toRef, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, vShow } from 'vue';\nimport { isClient, useEventListener } from '@vueuse/core';\nimport '../../../tokens/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { BAR_MAP, renderThumbStyle } from './util.mjs';\nimport { thumbProps } from './thumb.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { scrollbarContextKey } from '../../../tokens/scrollbar.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nvar COMPONENT_NAME = \"Thumb\";\n\nvar _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  props: thumbProps,\n  setup: function setup(props) {\n    var scrollbar = inject(scrollbarContextKey);\n    var ns = useNamespace(\"scrollbar\");\n    if (!scrollbar) throwError(COMPONENT_NAME, \"can not inject scrollbar context\");\n    var instance = ref();\n    var thumb = ref();\n    var thumbState = ref({});\n    var visible = ref(false);\n    var cursorDown = false;\n    var cursorLeave = false;\n    var originalOnSelectStart = isClient ? document.onselectstart : null;\n    var bar = computed(function () {\n      return BAR_MAP[props.vertical ? \"vertical\" : \"horizontal\"];\n    });\n    var thumbStyle = computed(function () {\n      return renderThumbStyle({\n        size: props.size,\n        move: props.move,\n        bar: bar.value\n      });\n    });\n    var offsetRatio = computed(function () {\n      return Math.pow(instance.value[bar.value.offset], 2) / scrollbar.wrapElement[bar.value.scrollSize] / props.ratio / thumb.value[bar.value.offset];\n    });\n\n    var clickThumbHandler = function clickThumbHandler(e) {\n      var _a;\n\n      e.stopPropagation();\n      if (e.ctrlKey || [1, 2].includes(e.button)) return;\n      (_a = window.getSelection()) == null ? void 0 : _a.removeAllRanges();\n      startDrag(e);\n      var el = e.currentTarget;\n      if (!el) return;\n      thumbState.value[bar.value.axis] = el[bar.value.offset] - (e[bar.value.client] - el.getBoundingClientRect()[bar.value.direction]);\n    };\n\n    var clickTrackHandler = function clickTrackHandler(e) {\n      if (!thumb.value || !instance.value || !scrollbar.wrapElement) return;\n      var offset = Math.abs(e.target.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]);\n      var thumbHalf = thumb.value[bar.value.offset] / 2;\n      var thumbPositionPercentage = (offset - thumbHalf) * 100 * offsetRatio.value / instance.value[bar.value.offset];\n      scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;\n    };\n\n    var startDrag = function startDrag(e) {\n      e.stopImmediatePropagation();\n      cursorDown = true;\n      document.addEventListener(\"mousemove\", mouseMoveDocumentHandler);\n      document.addEventListener(\"mouseup\", mouseUpDocumentHandler);\n      originalOnSelectStart = document.onselectstart;\n\n      document.onselectstart = function () {\n        return false;\n      };\n    };\n\n    var mouseMoveDocumentHandler = function mouseMoveDocumentHandler(e) {\n      if (!instance.value || !thumb.value) return;\n      if (cursorDown === false) return;\n      var prevPage = thumbState.value[bar.value.axis];\n      if (!prevPage) return;\n      var offset = (instance.value.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]) * -1;\n      var thumbClickPosition = thumb.value[bar.value.offset] - prevPage;\n      var thumbPositionPercentage = (offset - thumbClickPosition) * 100 * offsetRatio.value / instance.value[bar.value.offset];\n      scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;\n    };\n\n    var mouseUpDocumentHandler = function mouseUpDocumentHandler() {\n      cursorDown = false;\n      thumbState.value[bar.value.axis] = 0;\n      document.removeEventListener(\"mousemove\", mouseMoveDocumentHandler);\n      document.removeEventListener(\"mouseup\", mouseUpDocumentHandler);\n      restoreOnselectstart();\n      if (cursorLeave) visible.value = false;\n    };\n\n    var mouseMoveScrollbarHandler = function mouseMoveScrollbarHandler() {\n      cursorLeave = false;\n      visible.value = !!props.size;\n    };\n\n    var mouseLeaveScrollbarHandler = function mouseLeaveScrollbarHandler() {\n      cursorLeave = true;\n      visible.value = cursorDown;\n    };\n\n    onBeforeUnmount(function () {\n      restoreOnselectstart();\n      document.removeEventListener(\"mouseup\", mouseUpDocumentHandler);\n    });\n\n    var restoreOnselectstart = function restoreOnselectstart() {\n      if (document.onselectstart !== originalOnSelectStart) document.onselectstart = originalOnSelectStart;\n    };\n\n    useEventListener(toRef(scrollbar, \"scrollbarElement\"), \"mousemove\", mouseMoveScrollbarHandler);\n    useEventListener(toRef(scrollbar, \"scrollbarElement\"), \"mouseleave\", mouseLeaveScrollbarHandler);\n    return {\n      ns: ns,\n      instance: instance,\n      thumb: thumb,\n      bar: bar,\n      thumbStyle: thumbStyle,\n      visible: visible,\n      clickTrackHandler: clickTrackHandler,\n      clickThumbHandler: clickThumbHandler\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createBlock(Transition, {\n    name: _ctx.ns.b(\"fade\")\n  }, {\n    \"default\": withCtx(function () {\n      return [withDirectives(createElementVNode(\"div\", {\n        ref: \"instance\",\n        \"class\": normalizeClass([_ctx.ns.e(\"bar\"), _ctx.ns.is(_ctx.bar.key)]),\n        onMousedown: _cache[1] || (_cache[1] = function () {\n          return _ctx.clickTrackHandler && _ctx.clickTrackHandler.apply(_ctx, arguments);\n        })\n      }, [createElementVNode(\"div\", {\n        ref: \"thumb\",\n        \"class\": normalizeClass(_ctx.ns.e(\"thumb\")),\n        style: normalizeStyle(_ctx.thumbStyle),\n        onMousedown: _cache[0] || (_cache[0] = function () {\n          return _ctx.clickThumbHandler && _ctx.clickThumbHandler.apply(_ctx, arguments);\n        })\n      }, null, 38)], 34), [[vShow, _ctx.always || _ctx.visible]])];\n    }),\n    _: 1\n  }, 8, [\"name\"]);\n}\n\nvar Thumb = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/scrollbar/src/thumb.vue\"]]);\n\nexport { Thumb as default };","map":{"version":3,"mappings":"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","names":["COMPONENT_NAME","_sfc_main","defineComponent","name","props","setup","inject","scrollbarContextKey","useNamespace","scrollbar","throwError","instance","ref","thumb","cursorDown","cursorLeave","isClient","onselectstart","bar","computed","BAR_MAP","renderThumbStyle","size","move","value","offset","wrapElement","scrollSize","clickThumbHandler","e","_a","startDrag","el","thumbState","clickTrackHandler","getBoundingClientRect","thumbHalf","offsetRatio","document","mouseMoveDocumentHandler","mouseUpDocumentHandler","originalOnSelectStart","prevPage","thumbClickPosition","restoreOnselectstart","visible","onBeforeUnmount","useEventListener","toRef","mouseMoveScrollbarHandler","ns","thumbStyle","_cache","onMousedown","_normalizeClass","_ctx","style"],"sources":["../../../../../../packages/components/scrollbar/src/thumb.vue"],"sourcesContent":["<template>\n  <transition :name=\"ns.b('fade')\">\n    <div\n      v-show=\"always || visible\"\n      ref=\"instance\"\n      :class=\"[ns.e('bar'), ns.is(bar.key)]\"\n      @mousedown=\"clickTrackHandler\"\n    >\n      <div\n        ref=\"thumb\"\n        :class=\"ns.e('thumb')\"\n        :style=\"thumbStyle\"\n        @mousedown=\"clickThumbHandler\"\n      />\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  onBeforeUnmount,\n  ref,\n  toRef,\n} from 'vue'\nimport { isClient, useEventListener } from '@vueuse/core'\nimport { scrollbarContextKey } from '@element-plus/tokens'\nimport { throwError } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { BAR_MAP, renderThumbStyle } from './util'\n\nimport { thumbProps } from './thumb'\n\nconst COMPONENT_NAME = 'Thumb'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  props: thumbProps,\n\n  setup(props) {\n    const scrollbar = inject(scrollbarContextKey)\n    const ns = useNamespace('scrollbar')\n\n    if (!scrollbar)\n      throwError(COMPONENT_NAME, 'can not inject scrollbar context')\n\n    const instance = ref<HTMLDivElement>()\n    const thumb = ref<HTMLDivElement>()\n\n    const thumbState = ref({})\n    const visible = ref(false)\n\n    let cursorDown = false\n    let cursorLeave = false\n    let originalOnSelectStart:\n      | ((this: GlobalEventHandlers, ev: Event) => any)\n      | null = isClient ? document.onselectstart : null\n\n    const bar = computed(\n      () => BAR_MAP[props.vertical ? 'vertical' : 'horizontal']\n    )\n\n    const thumbStyle = computed(() =>\n      renderThumbStyle({\n        size: props.size,\n        move: props.move,\n        bar: bar.value,\n      })\n    )\n\n    const offsetRatio = computed(\n      () =>\n        // offsetRatioX = original width of thumb / current width of thumb / ratioX\n        // offsetRatioY = original height of thumb / current height of thumb / ratioY\n        // instance height = wrap height - GAP\n        instance.value![bar.value.offset] ** 2 /\n        scrollbar.wrapElement![bar.value.scrollSize] /\n        props.ratio /\n        thumb.value![bar.value.offset]\n    )\n\n    const clickThumbHandler = (e: MouseEvent) => {\n      // prevent click event of middle and right button\n      e.stopPropagation()\n      if (e.ctrlKey || [1, 2].includes(e.button)) return\n\n      window.getSelection()?.removeAllRanges()\n      startDrag(e)\n\n      const el = e.currentTarget as HTMLDivElement\n      if (!el) return\n      thumbState.value[bar.value.axis] =\n        el[bar.value.offset] -\n        (e[bar.value.client] - el.getBoundingClientRect()[bar.value.direction])\n    }\n\n    const clickTrackHandler = (e: MouseEvent) => {\n      if (!thumb.value || !instance.value || !scrollbar.wrapElement) return\n\n      const offset = Math.abs(\n        (e.target as HTMLElement).getBoundingClientRect()[bar.value.direction] -\n          e[bar.value.client]\n      )\n      const thumbHalf = thumb.value[bar.value.offset] / 2\n      const thumbPositionPercentage =\n        ((offset - thumbHalf) * 100 * offsetRatio.value) /\n        instance.value[bar.value.offset]\n\n      scrollbar.wrapElement[bar.value.scroll] =\n        (thumbPositionPercentage *\n          scrollbar.wrapElement[bar.value.scrollSize]) /\n        100\n    }\n\n    const startDrag = (e: MouseEvent) => {\n      e.stopImmediatePropagation()\n      cursorDown = true\n      document.addEventListener('mousemove', mouseMoveDocumentHandler)\n      document.addEventListener('mouseup', mouseUpDocumentHandler)\n      originalOnSelectStart = document.onselectstart\n      document.onselectstart = () => false\n    }\n\n    const mouseMoveDocumentHandler = (e: MouseEvent) => {\n      if (!instance.value || !thumb.value) return\n      if (cursorDown === false) return\n\n      const prevPage = thumbState.value[bar.value.axis]\n      if (!prevPage) return\n\n      const offset =\n        (instance.value.getBoundingClientRect()[bar.value.direction] -\n          e[bar.value.client]) *\n        -1\n      const thumbClickPosition = thumb.value[bar.value.offset] - prevPage\n      const thumbPositionPercentage =\n        ((offset - thumbClickPosition) * 100 * offsetRatio.value) /\n        instance.value[bar.value.offset]\n      scrollbar.wrapElement[bar.value.scroll] =\n        (thumbPositionPercentage *\n          scrollbar.wrapElement[bar.value.scrollSize]) /\n        100\n    }\n\n    const mouseUpDocumentHandler = () => {\n      cursorDown = false\n      thumbState.value[bar.value.axis] = 0\n      document.removeEventListener('mousemove', mouseMoveDocumentHandler)\n      document.removeEventListener('mouseup', mouseUpDocumentHandler)\n      restoreOnselectstart()\n      if (cursorLeave) visible.value = false\n    }\n\n    const mouseMoveScrollbarHandler = () => {\n      cursorLeave = false\n      visible.value = !!props.size\n    }\n\n    const mouseLeaveScrollbarHandler = () => {\n      cursorLeave = true\n      visible.value = cursorDown\n    }\n\n    onBeforeUnmount(() => {\n      restoreOnselectstart()\n      document.removeEventListener('mouseup', mouseUpDocumentHandler)\n    })\n\n    const restoreOnselectstart = () => {\n      if (document.onselectstart !== originalOnSelectStart)\n        document.onselectstart = originalOnSelectStart\n    }\n\n    useEventListener(\n      toRef(scrollbar, 'scrollbarElement'),\n      'mousemove',\n      mouseMoveScrollbarHandler\n    )\n    useEventListener(\n      toRef(scrollbar, 'scrollbarElement'),\n      'mouseleave',\n      mouseLeaveScrollbarHandler\n    )\n\n    return {\n      ns,\n      instance,\n      thumb,\n      bar,\n      thumbStyle,\n      visible,\n      clickTrackHandler,\n      clickThumbHandler,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}