{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { defineComponent, reactive, toRefs, getCurrentInstance, onBeforeUnmount, nextTick, withDirectives, openBlock, createElementBlock, normalizeClass, withModifiers, renderSlot, createElementVNode, toDisplayString, vShow } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { useOption } from './useOption.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElOption\",\n  componentName: \"ElOption\",\n  props: {\n    value: {\n      required: true,\n      type: [String, Number, Boolean, Object]\n    },\n    label: [String, Number],\n    created: Boolean,\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  setup: function setup(props) {\n    var ns = useNamespace(\"select\");\n    var states = reactive({\n      index: -1,\n      groupDisabled: false,\n      visible: true,\n      hitState: false,\n      hover: false\n    });\n\n    var _useOption = useOption(props, states),\n        currentLabel = _useOption.currentLabel,\n        itemSelected = _useOption.itemSelected,\n        isDisabled = _useOption.isDisabled,\n        select = _useOption.select,\n        hoverItem = _useOption.hoverItem;\n\n    var _toRefs = toRefs(states),\n        visible = _toRefs.visible,\n        hover = _toRefs.hover;\n\n    var vm = getCurrentInstance().proxy;\n    var key = vm.value;\n    select.onOptionCreate(vm);\n    onBeforeUnmount(function () {\n      var selected = select.selected;\n      var selectedOptions = select.props.multiple ? selected : [selected];\n      var doesSelected = selectedOptions.some(function (item) {\n        return item.value === vm.value;\n      });\n\n      if (select.cachedOptions.get(key) === vm && !doesSelected) {\n        nextTick(function () {\n          select.cachedOptions[\"delete\"](key);\n        });\n      }\n\n      select.onOptionDestroy(key, vm);\n    });\n\n    function selectOptionClick() {\n      if (props.disabled !== true && states.groupDisabled !== true) {\n        select.handleOptionSelect(vm, true);\n      }\n    }\n\n    return {\n      ns: ns,\n      currentLabel: currentLabel,\n      itemSelected: itemSelected,\n      isDisabled: isDisabled,\n      select: select,\n      hoverItem: hoverItem,\n      visible: visible,\n      hover: hover,\n      selectOptionClick: selectOptionClick,\n      states: states\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return withDirectives((openBlock(), createElementBlock(\"li\", {\n    \"class\": normalizeClass([_ctx.ns.be(\"dropdown\", \"item\"), _ctx.ns.is(\"disabled\", _ctx.isDisabled), {\n      selected: _ctx.itemSelected,\n      hover: _ctx.hover\n    }]),\n    onMouseenter: _cache[0] || (_cache[0] = function () {\n      return _ctx.hoverItem && _ctx.hoverItem.apply(_ctx, arguments);\n    }),\n    onClick: _cache[1] || (_cache[1] = withModifiers(function () {\n      return _ctx.selectOptionClick && _ctx.selectOptionClick.apply(_ctx, arguments);\n    }, [\"stop\"]))\n  }, [renderSlot(_ctx.$slots, \"default\", {}, function () {\n    return [createElementVNode(\"span\", null, toDisplayString(_ctx.currentLabel), 1)];\n  })], 34)), [[vShow, _ctx.visible]]);\n}\n\nvar Option = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/select/src/option.vue\"]]);\n\nexport { Option as default };","map":{"version":3,"mappings":";;;;;;;;;AAiCA,IAAKA,YAAaC,eAAa;AAC7BC,MAAM,YADuB;AAE7BC,eAAe,YAFc;AAI7BC,OAAO;AACLC,SAAO;AACLC,cAAU,MADL;AAELC,UAAM,GAACC,MAAD,EAASC,MAAT,EAAiBC,OAAjB,EAA0BC,MAA1B;AAFD,KADF;AAKLC,WAAO,CAACJ,MAAD,EAASC,MAAT,CALF;AAMLI,WAAS,SANJ;AAOLC,YAAU;AACRP,UAAM,SADE;AAER,iBAAS;AAFD;AAPL,GAJsB;AAiB7BQ,OAjB6B,iBAiBvBX,KAjBuB,EAiBhB;AACL,aAAKY,aAAa,QAAb,CAAL;AACN,QAAMC,SAASC,QAAS;AACtBC,WAAO,IADe;AAEtBC,mBAAe,OAFO;AAGtBC,aAAS,MAHa;AAItBC,cAAU,OAJY;AAKtBC,WAAO;AALe,MAAxB;;AAQM,qBACJC,UAAUpB,KAAV,EAAiBa,MAAjB,CADI;AAAA,QAAEQ,YAAF,cAAEA,YAAF;AAAA,QAAgBC,YAAhB,cAAgBA,YAAhB;AAAA,QAA8BC,UAA9B,cAA8BA,UAA9B;AAAA,QAA0CC,MAA1C,cAA0CA,MAA1C;AAAA,QAAkDC,SAAlD,cAAkDA,SAAlD;;AAGN,kBAA2BC,OAAOb,MAAP,CAA3B;AAAA,QAAQI,OAAR,WAAQA,OAAR;AAAA,QAAiBE,KAAjB,WAAiBA,KAAjB;;AAEM,aAAKQ,qBAAqBC,KAA1B;AACN,QAAMC,MAAOC,EAAoC,MAAjD;AACAN,WAAOO,cAAP,CAAsBD,EAAtB;AAEAE,oBAAgB,YAAM;AACpB,UAAQC,QAAR,GAAqBT,MAArB,CAAQS,QAAR;AACA,UAAMC,kBAAkBV,MAAO,MAAP,CAAaW,QAAb,GAAwBF,QAAxB,GAAmC,CAACA,QAAD,CAA3D;AACA,UAAMG,YAAe,mBAAgBC,IAAhB,CAAqB,UAACC,IAAD,EAAU;AAC3C,oBAAKrC,KAAL,KAAgB6B,EAAoC,MAApD;AACR,OAFoB,CAArB;;AAIA,UAAIN,OAAOe,aAAP,CAAqBC,GAArB,CAAyBX,GAAzB,MAAkCC,EAAlC,IAAwC,CAACM,YAA7C,EAA2D;AACzDK,iBAAS,YAAM;AACNjB,yCAAqBK,GAArB;AACR,SAFD;AAGF;;AACOL,6BAAgBK,GAAhB,EAAqBC,EAArB;AACR,KAbD;;AAe6B;AAC3B,UAAI9B,KAAM,SAAN,KAAmB,IAAnB,IAA2Ba,OAAOG,aAAP,KAAyB,IAAxD,EAA8D;AACrDQ,kCAAmBM,EAAnB,EAAuB,IAAvB;AACT;AACF;;AAEO;AACLY,YADK;AAELrB,gCAFK;AAGLC,gCAHK;AAILC,4BAJK;AAKLC,oBALK;AAMLC,0BANK;AAOLR,sBAPK;AAQLE,kBARK;AASLwB,0CATK;AAUL9B;AAVK;AAYT;AArE6B,EAA/B;;;sCAhCE+B,kBAgBK;AAdF,aAAKC,gBAAUC,QAAGC,EAAH,CAAK,UAAL,EAAK,MAAL,CAAV,EAA2CD,QAAGE,EAAH,CAAK,UAAL,EAAkBF,IAAU,WAA5B,CAA3C,EAAuE;AAA6Bb,iCAA7B;AAAmDd;AAAnD,KAAvE,EAcH;AANF8B,kBAAUC,MAAE,GAAF,KAAEA;AAAA;AAAA,KAAF,CAMR;AALFC,aAAKD;AAAA,aAAOJ,IAAiB,kBAAjB,IAAiBA,6CAAxB;AAAA,OAAwB,QAAxB;AAKH,KAL2B,CAE9BM,WAEON,WAFP,EAEO,SAFP,EAEO,EAFP;AAAA,WAEO,CADLO,mBAA+B,MAA/B,EAA+B,IAA/B,EAA+BC,gBAAtBR,IAAY,aAAU,CAA/B,EAAqB,CAArB,CACK,CAFP;AAAA,IAF8B,CAK3B,iBAfKA,IAAO","names":["_sfc_main","defineComponent","name","componentName","props","value","required","type","String","Number","Boolean","Object","label","created","disabled","setup","useNamespace","states","reactive","index","groupDisabled","visible","hitState","hover","useOption","currentLabel","itemSelected","isDisabled","select","hoverItem","toRefs","getCurrentInstance","proxy","key","vm","onOptionCreate","onBeforeUnmount","selected","selectedOptions","multiple","doesSelected","some","item","cachedOptions","get","nextTick","ns","selectOptionClick","_createElementBlock","_normalizeClass","_ctx","be","is","onMouseenter","_cache","onClick","_renderSlot","_createElementVNode","toDisplayString"],"sources":["../../../../../../packages/components/select/src/option.vue"],"sourcesContent":["<template>\n  <li\n    v-show=\"visible\"\n    :class=\"[\n      ns.be('dropdown', 'item'),\n      ns.is('disabled', isDisabled),\n      {\n        selected: itemSelected,\n        hover,\n      },\n    ]\"\n    @mouseenter=\"hoverItem\"\n    @click.stop=\"selectOptionClick\"\n  >\n    <slot>\n      <span>{{ currentLabel }}</span>\n    </slot>\n  </li>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  getCurrentInstance,\n  nextTick,\n  onBeforeUnmount,\n  reactive,\n  toRefs,\n} from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useOption } from './useOption'\nimport type { SelectOptionProxy } from './token'\n\nexport default defineComponent({\n  name: 'ElOption',\n  componentName: 'ElOption',\n\n  props: {\n    value: {\n      required: true,\n      type: [String, Number, Boolean, Object],\n    },\n    label: [String, Number],\n    created: Boolean,\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  setup(props) {\n    const ns = useNamespace('select')\n    const states = reactive({\n      index: -1,\n      groupDisabled: false,\n      visible: true,\n      hitState: false,\n      hover: false,\n    })\n\n    const { currentLabel, itemSelected, isDisabled, select, hoverItem } =\n      useOption(props, states)\n\n    const { visible, hover } = toRefs(states)\n\n    const vm = getCurrentInstance().proxy\n    const key = (vm as unknown as SelectOptionProxy).value\n    select.onOptionCreate(vm as unknown as SelectOptionProxy)\n\n    onBeforeUnmount(() => {\n      const { selected } = select\n      const selectedOptions = select.props.multiple ? selected : [selected]\n      const doesSelected = selectedOptions.some((item) => {\n        return item.value === (vm as unknown as SelectOptionProxy).value\n      })\n      // if option is not selected, remove it from cache\n      if (select.cachedOptions.get(key) === vm && !doesSelected) {\n        nextTick(() => {\n          select.cachedOptions.delete(key)\n        })\n      }\n      select.onOptionDestroy(key, vm)\n    })\n\n    function selectOptionClick() {\n      if (props.disabled !== true && states.groupDisabled !== true) {\n        select.handleOptionSelect(vm, true)\n      }\n    }\n\n    return {\n      ns,\n      currentLabel,\n      itemSelected,\n      isDisabled,\n      select,\n      hoverItem,\n      visible,\n      hover,\n      selectOptionClick,\n      states,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}