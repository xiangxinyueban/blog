{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.parse-int.js\";\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { buildProps } from '../../../utils/vue/props.mjs';\nimport { componentSizes } from '../../../constants/size.mjs';\nimport { isNumber } from '@vueuse/core';\nvar inputNumberProps = buildProps({\n  step: {\n    type: Number,\n    \"default\": 1\n  },\n  stepStrictly: {\n    type: Boolean,\n    \"default\": false\n  },\n  max: {\n    type: Number,\n    \"default\": Number.POSITIVE_INFINITY\n  },\n  min: {\n    type: Number,\n    \"default\": Number.NEGATIVE_INFINITY\n  },\n  modelValue: {\n    type: Number\n  },\n  disabled: {\n    type: Boolean,\n    \"default\": false\n  },\n  size: {\n    type: String,\n    values: componentSizes\n  },\n  controls: {\n    type: Boolean,\n    \"default\": true\n  },\n  controlsPosition: {\n    type: String,\n    \"default\": \"\",\n    values: [\"\", \"right\"]\n  },\n  name: String,\n  label: String,\n  placeholder: String,\n  precision: {\n    type: Number,\n    validator: function validator(val) {\n      return val >= 0 && val === Number.parseInt(\"\".concat(val), 10);\n    }\n  }\n});\nvar inputNumberEmits = {\n  change: function change(prev, cur) {\n    return prev !== cur;\n  },\n  blur: function blur(e) {\n    return e instanceof FocusEvent;\n  },\n  focus: function focus(e) {\n    return e instanceof FocusEvent;\n  },\n  input: function input(val) {\n    return isNumber(val);\n  },\n  \"update:modelValue\": function updateModelValue(val) {\n    return isNumber(val) || val === void 0;\n  }\n};\nexport { inputNumberEmits, inputNumberProps };","map":{"version":3,"mappings":";;;;;;;AAEY,IAACA,gBAAgB,GAAGC,UAAU,CAAC;AACzCC,MAAI,EAAE;AACJC,QAAI,EAAEC,MADF;AAEJ,eAAS;AAFL,GADmC;AAKzCC,cAAY,EAAE;AACZF,QAAI,EAAEG,OADM;AAEZ,eAAS;AAFG,GAL2B;AASzCC,KAAG,EAAE;AACHJ,QAAI,EAAEC,MADH;AAEH,eAASA,MAAM,CAACI;AAFb,GAToC;AAazCC,KAAG,EAAE;AACHN,QAAI,EAAEC,MADH;AAEH,eAASA,MAAM,CAACM;AAFb,GAboC;AAiBzCC,YAAU,EAAE;AACVR,QAAI,EAAEC;AADI,GAjB6B;AAoBzCQ,UAAQ,EAAE;AACRT,QAAI,EAAEG,OADE;AAER,eAAS;AAFD,GApB+B;AAwBzCO,MAAI,EAAE;AACJV,QAAI,EAAEW,MADF;AAEJC,UAAM,EAAEC;AAFJ,GAxBmC;AA4BzCC,UAAQ,EAAE;AACRd,QAAI,EAAEG,OADE;AAER,eAAS;AAFD,GA5B+B;AAgCzCY,kBAAgB,EAAE;AAChBf,QAAI,EAAEW,MADU;AAEhB,eAAS,EAFO;AAGhBC,UAAM,EAAE,CAAC,EAAD,EAAK,OAAL;AAHQ,GAhCuB;AAqCzCI,MAAI,EAAEL,MArCmC;AAsCzCM,OAAK,EAAEN,MAtCkC;AAuCzCO,aAAW,EAAEP,MAvC4B;AAwCzCQ,WAAS,EAAE;AACTnB,QAAI,EAAEC,MADG;AAETmB,aAAS,EAAE,mBAACC,GAAD;AAAA,aAASA,GAAG,IAAI,CAAP,IAAYA,GAAG,KAAKpB,MAAM,CAACqB,QAAP,WAAmBD,GAAnB,GAA0B,EAA1B,CAA7B;AAAA;AAFF;AAxC8B,CAAD,CAA9B;AA6CA,IAACE,gBAAgB,GAAG;AAC9BC,QAAM,EAAE,gBAACC,IAAD,EAAOC,GAAP;AAAA,WAAeD,IAAI,KAAKC,GAAxB;AAAA,GADsB;AAE9BC,MAAI,EAAE,cAACC,CAAD;AAAA,WAAOA,CAAC,YAAYC,UAApB;AAAA,GAFwB;AAG9BC,OAAK,EAAE,eAACF,CAAD;AAAA,WAAOA,CAAC,YAAYC,UAApB;AAAA,GAHuB;AAI9BE,OAAK,EAAE,eAACV,GAAD;AAAA,WAASW,QAAQ,CAACX,GAAD,CAAjB;AAAA,GAJuB;AAK9B,uBAAqB,0BAACA,GAAD;AAAA,WAASW,QAAQ,CAACX,GAAD,CAAR,IAAiBA,GAAG,KAAK,KAAK,CAAvC;AAAA;AALS,CAApB","names":["inputNumberProps","buildProps","step","type","Number","stepStrictly","Boolean","max","POSITIVE_INFINITY","min","NEGATIVE_INFINITY","modelValue","disabled","size","String","values","componentSizes","controls","controlsPosition","name","label","placeholder","precision","validator","val","parseInt","inputNumberEmits","change","prev","cur","blur","e","FocusEvent","focus","input","isNumber"],"sources":["../../../../../../packages/components/input-number/src/input-number.ts"],"sourcesContent":["import { buildProps, isNumber } from '@element-plus/utils'\nimport { componentSizes } from '@element-plus/constants'\n\nexport const inputNumberProps = buildProps({\n  step: {\n    type: Number,\n    default: 1,\n  },\n  stepStrictly: {\n    type: Boolean,\n    default: false,\n  },\n  max: {\n    type: Number,\n    default: Number.POSITIVE_INFINITY,\n  },\n  min: {\n    type: Number,\n    default: Number.NEGATIVE_INFINITY,\n  },\n  modelValue: {\n    type: Number,\n  },\n  disabled: {\n    type: Boolean,\n    default: false,\n  },\n  size: {\n    type: String,\n    values: componentSizes,\n  },\n  controls: {\n    type: Boolean,\n    default: true,\n  },\n  controlsPosition: {\n    type: String,\n    default: '',\n    values: ['', 'right'],\n  },\n  name: String,\n  label: String,\n  placeholder: String,\n  precision: {\n    type: Number,\n    validator: (val: number) =>\n      val >= 0 && val === Number.parseInt(`${val}`, 10),\n  },\n} as const)\n\nexport const inputNumberEmits = {\n  change: (prev: number | undefined, cur: number | undefined) => prev !== cur,\n  blur: (e: FocusEvent) => e instanceof FocusEvent,\n  focus: (e: FocusEvent) => e instanceof FocusEvent,\n  input: (val: number | undefined) => isNumber(val),\n  'update:modelValue': (val: number | undefined) =>\n    isNumber(val) || val === undefined,\n}\n"]},"metadata":{},"sourceType":"module"}