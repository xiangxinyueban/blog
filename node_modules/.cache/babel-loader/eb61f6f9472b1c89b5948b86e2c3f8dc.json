{"ast":null,"code":"import _objectSpread from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport { defineComponent, nextTick, computed, provide, toRefs, watch, h, renderSlot } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { useCheckboxGroup } from './useCheckbox.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElCheckboxGroup\",\n  props: {\n    modelValue: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    disabled: Boolean,\n    min: {\n      type: Number,\n      \"default\": void 0\n    },\n    max: {\n      type: Number,\n      \"default\": void 0\n    },\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    fill: {\n      type: String,\n      \"default\": void 0\n    },\n    textColor: {\n      type: String,\n      \"default\": void 0\n    },\n    tag: {\n      type: String,\n      \"default\": \"div\"\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, \"change\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useCheckboxGroup = useCheckboxGroup(),\n        elFormItem = _useCheckboxGroup.elFormItem;\n\n    var checkboxGroupSize = useSize();\n    var ns = useNamespace(\"checkbox\");\n\n    var changeEvent = function changeEvent(value) {\n      emit(UPDATE_MODEL_EVENT, value);\n      nextTick(function () {\n        emit(\"change\", value);\n      });\n    };\n\n    var modelValue = computed({\n      get: function get() {\n        return props.modelValue;\n      },\n      set: function set(val) {\n        changeEvent(val);\n      }\n    });\n    provide(\"CheckboxGroup\", _objectSpread(_objectSpread({\n      name: \"ElCheckboxGroup\",\n      modelValue: modelValue\n    }, toRefs(props)), {}, {\n      checkboxGroupSize: checkboxGroupSize,\n      changeEvent: changeEvent\n    }));\n    watch(function () {\n      return props.modelValue;\n    }, function () {\n      var _a;\n\n      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\")[\"catch\"](function (err) {\n        return debugWarn(err);\n      });\n    });\n    return function () {\n      return h(props.tag, {\n        \"class\": ns.b(\"group\"),\n        role: \"group\",\n        \"aria-label\": \"checkbox-group\"\n      }, [renderSlot(slots, \"default\")]);\n    };\n  }\n});\n\nvar CheckboxGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-group.vue\"]]);\n\nexport { CheckboxGroup as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAmBA,IAAKA,YAAaC,eAAa;AAC7BC,MAAM,mBADuB;AAG7BC,OAAO;AACLC,cAAY;AACVC,UAAM,OADI;AAEV,iBAAS;AAAA,eAAM,EAAN;AAAA;AAFC,KADP;AAKLC,YAAU,SALL;AAMLC,OAAK;AACHF,UAAM,QADH;AAEH,iBAAS;AAFN,KANA;AAULG,OAAK;AACHH,UAAM,QADH;AAEH,iBAAS;AAFN,KAVA;AAcLI,QAAM;AACJJ,UAAM,QADF;AAEJK,eAAW;AAFP,KAdD;AAkBLC,QAAM;AACJN,UAAM,QADF;AAEJ,iBAAS;AAFL,KAlBD;AAsBLO,aAAW;AACTP,UAAM,QADG;AAET,iBAAS;AAFA,KAtBN;AA0BLQ,OAAK;AACHR,UAAM,QADH;AAEH,iBAAS;AAFN;AA1BA,GAHsB;AAmC7BS,SAAO,CAACC,kBAAD,EAAqB,QAArB,CAnCsB;AAqC7BC,OArC6B,iBAqCvBb,KArCuB,QAqCC;AAAA,QAAfc,IAAe,QAAfA,IAAe;AAAA,QAATC,KAAS,QAATA,KAAS;;AACtB,4BAAiBC,gBAAiB,EAAlC;AAAA,QAAEC,UAAF,qBAAEA,UAAF;;AACN,QAAMC,oBAAoBC,OAAQ,EAAlC;AACM,aAAKC,aAAa,UAAb,CAAL;;AAEA,sBAAc,SAAdC,WAAc,CAACC,KAAD,EAAW;AAC7BR,WAAKF,kBAAL,EAAyBU,KAAzB;AACAC,eAAS,YAAM;AACbT,aAAK,QAAL,EAAeQ,KAAf;AACD,OAFD;AAGF,KALM;;AAON,QAAMrB,aAAauB,QAAS;AAC1BC,SAD0B,iBACpB;AACJ,eAAOzB,KAAM,WAAb;AACF,OAH0B;AAI1B0B,SAJ0B,eAItBC,GAJsB,EAIjB;AACPN,oBAAYM,GAAZ;AACF;AAN0B,MAA5B;AASAC,YAAQ,eAAR;AACE7B,UAAM,mBADR;AAEEE;AAFF,OAGK4B,OAAO7B,KAAP,CAHL;AAIEkB,0CAJF;AAKEG;AALF;AASES;AAAA,aAAM9B,KAAM,WAAZ;AAAA,OACA,YAAM;AACO;;AAEf;AAAA;AAAA;AACA,KALE;AAMO;AAGH,eAAOA,KAAK,CAAOU,GAAnB,EAAmB;AACnB,iBAAMqB,aADa;AAEnBC,YAAc,SAFK;AAEL,sBAEG;AAJE,OAAnB,EAMN,8BANM;AAOR,KAVW;AAWZ;AApF8B,EAA/B","names":["_sfc_main","defineComponent","name","props","modelValue","type","disabled","min","max","size","validator","fill","textColor","tag","emits","UPDATE_MODEL_EVENT","setup","emit","slots","useCheckboxGroup","elFormItem","checkboxGroupSize","useSize","useNamespace","changeEvent","value","nextTick","computed","get","set","val","provide","toRefs","watch","ns","role"],"sources":["../../../../../../packages/components/checkbox/src/checkbox-group.vue"],"sourcesContent":["<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  h,\n  nextTick,\n  provide,\n  renderSlot,\n  toRefs,\n  watch,\n} from 'vue'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn, isValidComponentSize } from '@element-plus/utils'\nimport { useNamespace, useSize } from '@element-plus/hooks'\nimport { useCheckboxGroup } from './useCheckbox'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\n\nexport default defineComponent({\n  name: 'ElCheckboxGroup',\n\n  props: {\n    modelValue: {\n      type: Array,\n      default: () => [],\n    },\n    disabled: Boolean,\n    min: {\n      type: Number,\n      default: undefined,\n    },\n    max: {\n      type: Number,\n      default: undefined,\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    fill: {\n      type: String,\n      default: undefined,\n    },\n    textColor: {\n      type: String,\n      default: undefined,\n    },\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  emits: [UPDATE_MODEL_EVENT, 'change'],\n\n  setup(props, { emit, slots }) {\n    const { elFormItem } = useCheckboxGroup()\n    const checkboxGroupSize = useSize()\n    const ns = useNamespace('checkbox')\n\n    const changeEvent = (value) => {\n      emit(UPDATE_MODEL_EVENT, value)\n      nextTick(() => {\n        emit('change', value)\n      })\n    }\n\n    const modelValue = computed({\n      get() {\n        return props.modelValue\n      },\n      set(val) {\n        changeEvent(val)\n      },\n    })\n\n    provide('CheckboxGroup', {\n      name: 'ElCheckboxGroup',\n      modelValue,\n      ...toRefs(props),\n      checkboxGroupSize,\n      changeEvent,\n    })\n\n    watch(\n      () => props.modelValue,\n      () => {\n        elFormItem.validate?.('change').catch((err) => debugWarn(err))\n      }\n    )\n    return () => {\n      return h(\n        props.tag,\n        {\n          class: ns.b('group'),\n          role: 'group',\n          'aria-label': 'checkbox-group',\n        },\n        [renderSlot(slots, 'default')]\n      )\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}