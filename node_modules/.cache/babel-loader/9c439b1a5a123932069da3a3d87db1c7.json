{"ast":null,"code":"import _objectSpread from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defineComponent, ref, provide, computed, openBlock, createBlock, Teleport, createVNode, Transition, unref, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, createSlots, renderSlot, createCommentVNode, vShow } from 'vue';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport ElDialogContent from './dialog-content2.mjs';\nimport { dialogProps, dialogEmits } from './dialog.mjs';\nimport { useDialog } from './use-dialog.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { dialogInjectionKey } from '../../../tokens/dialog.mjs';\nimport { useSameTarget } from '../../../hooks/use-same-target/index.mjs';\nimport { useDraggable } from '../../../hooks/use-draggable/index.mjs';\nvar __default__ = {\n  name: \"ElDialog\"\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: dialogProps,\n  emits: dialogEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    var props = __props;\n    var ns = useNamespace(\"dialog\");\n    var dialogRef = ref();\n    var headerRef = ref();\n\n    var _useDialog = useDialog(props, dialogRef),\n        visible = _useDialog.visible,\n        style = _useDialog.style,\n        rendered = _useDialog.rendered,\n        zIndex = _useDialog.zIndex,\n        afterEnter = _useDialog.afterEnter,\n        afterLeave = _useDialog.afterLeave,\n        beforeLeave = _useDialog.beforeLeave,\n        handleClose = _useDialog.handleClose,\n        onModalClick = _useDialog.onModalClick;\n\n    provide(dialogInjectionKey, {\n      dialogRef: dialogRef,\n      headerRef: headerRef,\n      ns: ns,\n      rendered: rendered,\n      style: style\n    });\n    var overlayEvent = useSameTarget(onModalClick);\n    var draggable = computed(function () {\n      return props.draggable && !props.fullscreen;\n    });\n    useDraggable(dialogRef, headerRef, draggable);\n    expose({\n      visible: visible\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(Teleport, {\n        to: \"body\",\n        disabled: !_ctx.appendToBody\n      }, [createVNode(Transition, {\n        name: \"dialog-fade\",\n        onAfterEnter: unref(afterEnter),\n        onAfterLeave: unref(afterLeave),\n        onBeforeLeave: unref(beforeLeave)\n      }, {\n        \"default\": withCtx(function () {\n          return [withDirectives(createVNode(unref(ElOverlay), {\n            \"custom-mask-event\": \"\",\n            mask: _ctx.modal,\n            \"overlay-class\": _ctx.modalClass,\n            \"z-index\": unref(zIndex)\n          }, {\n            \"default\": withCtx(function () {\n              return [createElementVNode(\"div\", {\n                \"class\": normalizeClass(\"\".concat(unref(ns).namespace.value, \"-overlay-dialog\")),\n                onClick: _cache[0] || (_cache[0] = function () {\n                  var _unref;\n\n                  return unref(overlayEvent).onClick && (_unref = unref(overlayEvent)).onClick.apply(_unref, arguments);\n                }),\n                onMousedown: _cache[1] || (_cache[1] = function () {\n                  var _unref2;\n\n                  return unref(overlayEvent).onMousedown && (_unref2 = unref(overlayEvent)).onMousedown.apply(_unref2, arguments);\n                }),\n                onMouseup: _cache[2] || (_cache[2] = function () {\n                  var _unref3;\n\n                  return unref(overlayEvent).onMouseup && (_unref3 = unref(overlayEvent)).onMouseup.apply(_unref3, arguments);\n                })\n              }, [unref(rendered) ? (openBlock(), createBlock(ElDialogContent, {\n                key: 0,\n                \"custom-class\": _ctx.customClass,\n                center: _ctx.center,\n                \"close-icon\": _ctx.closeIcon,\n                draggable: unref(draggable),\n                fullscreen: _ctx.fullscreen,\n                \"show-close\": _ctx.showClose,\n                style: normalizeStyle(unref(style)),\n                title: _ctx.title,\n                onClose: unref(handleClose)\n              }, createSlots({\n                title: withCtx(function () {\n                  return [renderSlot(_ctx.$slots, \"title\")];\n                }),\n                \"default\": withCtx(function () {\n                  return [renderSlot(_ctx.$slots, \"default\")];\n                }),\n                _: 2\n              }, [_ctx.$slots.footer ? {\n                name: \"footer\",\n                fn: withCtx(function () {\n                  return [renderSlot(_ctx.$slots, \"footer\")];\n                })\n              } : void 0]), 1032, [\"custom-class\", \"center\", \"close-icon\", \"draggable\", \"fullscreen\", \"show-close\", \"style\", \"title\", \"onClose\"])) : createCommentVNode(\"v-if\", true)], 34)];\n            }),\n            _: 3\n          }, 8, [\"mask\", \"overlay-class\", \"z-index\"]), [[vShow, unref(visible)]])];\n        }),\n        _: 3\n      }, 8, [\"onAfterEnter\", \"onAfterLeave\", \"onBeforeLeave\"])], 8, [\"disabled\"]);\n    };\n  }\n}));\n\nvar Dialog = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog.vue\"]]);\n\nexport { Dialog as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AA+DA;AACA;AACA;;AAEA,qBAUAA,2BAVA;AAAA,QACAC,OADA,cACAA,OADA;AAAA,QAEAC,KAFA,cAEAA,KAFA;AAAA,QAGAC,QAHA,cAGAA,QAHA;AAAA,QAIAC,MAJA,cAIAA,MAJA;AAAA,QAKAC,UALA,cAKAA,UALA;AAAA,QAMAC,UANA,cAMAA,UANA;AAAA,QAOAC,WAPA,cAOAA,WAPA;AAAA,QAQAC,WARA,cAQAA,WARA;AAAA,QASAC,YATA,cASAA,YATA;;AAYAC;AACAC,0BADA;AAEAC,0BAFA;AAGAC,YAHA;AAIAV,wBAJA;AAKAD;AALA;AAQA;AAEA;AAAA;AAAA;AAEAY;AAEAC;AAEAd;AAFA","names":["useDialog","visible","style","rendered","zIndex","afterEnter","afterLeave","beforeLeave","handleClose","onModalClick","provide","dialogRef","headerRef","ns","useDraggable","expose"],"sources":["../../../../../../packages/components/dialog/src/dialog.vue"],"sourcesContent":["<template>\n  <teleport to=\"body\" :disabled=\"!appendToBody\">\n    <transition\n      name=\"dialog-fade\"\n      @after-enter=\"afterEnter\"\n      @after-leave=\"afterLeave\"\n      @before-leave=\"beforeLeave\"\n    >\n      <el-overlay\n        v-show=\"visible\"\n        custom-mask-event\n        :mask=\"modal\"\n        :overlay-class=\"modalClass\"\n        :z-index=\"zIndex\"\n      >\n        <div\n          :class=\"`${ns.namespace.value}-overlay-dialog`\"\n          @click=\"overlayEvent.onClick\"\n          @mousedown=\"overlayEvent.onMousedown\"\n          @mouseup=\"overlayEvent.onMouseup\"\n        >\n          <el-dialog-content\n            v-if=\"rendered\"\n            :custom-class=\"customClass\"\n            :center=\"center\"\n            :close-icon=\"closeIcon\"\n            :draggable=\"draggable\"\n            :fullscreen=\"fullscreen\"\n            :show-close=\"showClose\"\n            :style=\"style\"\n            :title=\"title\"\n            @close=\"handleClose\"\n          >\n            <template #title>\n              <slot name=\"title\" />\n            </template>\n            <slot />\n            <template v-if=\"$slots.footer\" #footer>\n              <slot name=\"footer\" />\n            </template>\n          </el-dialog-content>\n        </div>\n      </el-overlay>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, provide, ref } from 'vue'\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport { useDraggable, useNamespace, useSameTarget } from '@element-plus/hooks'\nimport { dialogInjectionKey } from '@element-plus/tokens'\nimport ElDialogContent from './dialog-content.vue'\nimport { dialogEmits, dialogProps } from './dialog'\nimport { useDialog } from './use-dialog'\n\ndefineOptions({\n  name: 'ElDialog',\n})\n\nconst props = defineProps(dialogProps)\ndefineEmits(dialogEmits)\n\nconst ns = useNamespace('dialog')\nconst dialogRef = ref<HTMLElement>()\nconst headerRef = ref<HTMLElement>()\n\nconst {\n  visible,\n  style,\n  rendered,\n  zIndex,\n  afterEnter,\n  afterLeave,\n  beforeLeave,\n  handleClose,\n  onModalClick,\n} = useDialog(props, dialogRef)\n\nprovide(dialogInjectionKey, {\n  dialogRef,\n  headerRef,\n  ns,\n  rendered,\n  style,\n})\n\nconst overlayEvent = useSameTarget(onModalClick)\n\nconst draggable = computed(() => props.draggable && !props.fullscreen)\n\nuseDraggable(dialogRef, headerRef, draggable)\n\ndefineExpose({\n  /** @description whether the dialog is visible */\n  visible,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}