{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport { defineComponent, watch, renderSlot } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props.mjs';\nimport { componentSizes } from '../../../constants/size.mjs';\nimport { provideGlobalConfig } from '../../../hooks/use-global-config/index.mjs';\nvar messageConfig = {};\nvar configProviderProps = buildProps({\n  a11y: {\n    type: Boolean,\n    \"default\": true\n  },\n  locale: {\n    type: definePropType(Object)\n  },\n  size: {\n    type: String,\n    values: componentSizes,\n    \"default\": \"\"\n  },\n  button: {\n    type: definePropType(Object)\n  },\n  experimentalFeatures: {\n    type: definePropType(Object)\n  },\n  keyboardNavigation: {\n    type: Boolean,\n    \"default\": true\n  },\n  message: {\n    type: definePropType(Object)\n  },\n  zIndex: {\n    type: Number\n  },\n  namespace: {\n    type: String,\n    \"default\": \"el\"\n  }\n});\nvar ConfigProvider = defineComponent({\n  name: \"ElConfigProvider\",\n  props: configProviderProps,\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    watch(function () {\n      return props.message;\n    }, function (val) {\n      Object.assign(messageConfig, val != null ? val : {});\n    }, {\n      immediate: true,\n      deep: true\n    });\n    var config = provideGlobalConfig(props);\n    return function () {\n      return renderSlot(slots, \"default\", {\n        config: config == null ? void 0 : config.value\n      });\n    };\n  }\n});\nexport { configProviderProps, ConfigProvider as default, messageConfig };","map":{"version":3,"mappings":";;;;;;;;AAIY,IAACA,aAAa,GAAG,EAAjB;AACA,IAACC,mBAAmB,GAAGC,UAAU,CAAC;AAC5CC,MAAI,EAAE;AACJC,QAAI,EAAEC,OADF;AAEJ,eAAS;AAFL,GADsC;AAK5CC,QAAM,EAAE;AACNF,QAAI,EAAEG,cAAc,CAACC,MAAD;AADd,GALoC;AAQ5CC,MAAI,EAAE;AACJL,QAAI,EAAEM,MADF;AAEJC,UAAM,EAAEC,cAFJ;AAGJ,eAAS;AAHL,GARsC;AAa5CC,QAAM,EAAE;AACNT,QAAI,EAAEG,cAAc,CAACC,MAAD;AADd,GAboC;AAgB5CM,sBAAoB,EAAE;AACpBV,QAAI,EAAEG,cAAc,CAACC,MAAD;AADA,GAhBsB;AAmB5CO,oBAAkB,EAAE;AAClBX,QAAI,EAAEC,OADY;AAElB,eAAS;AAFS,GAnBwB;AAuB5CW,SAAO,EAAE;AACPZ,QAAI,EAAEG,cAAc,CAACC,MAAD;AADb,GAvBmC;AA0B5CS,QAAM,EAAE;AACNb,QAAI,EAAEc;AADA,GA1BoC;AA6B5CC,WAAS,EAAE;AACTf,QAAI,EAAEM,MADG;AAET,eAAS;AAFA;AA7BiC,CAAD,CAAjC;AAkCZ,qBAAeU,eAAe,CAAC;AAC7BC,MAAI,EAAE,kBADuB;AAE7BC,OAAK,EAAErB,mBAFsB;AAG7BsB,OAH6B,iBAGvBD,KAHuB,QAGL;AAAA,QAATE,KAAS,QAATA,KAAS;AACtBC,SAAK,CAAC;AAAA,aAAMH,KAAK,CAACN,OAAZ;AAAA,KAAD,EAAsB,UAACU,GAAD,EAAS;AAClClB,YAAM,CAACmB,MAAP,CAAc3B,aAAd,EAA6B0B,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,EAAjD;AACD,KAFI,EAEF;AAAEE,eAAS,EAAE,IAAb;AAAmBC,UAAI,EAAE;AAAzB,KAFE,CAAL;AAGA,QAAMC,MAAM,GAAGC,mBAAmB,CAACT,KAAD,CAAlC;AACA,WAAO;AAAA,aAAMU,UAAU,CAACR,KAAD,EAAQ,SAAR,EAAmB;AAAEM,cAAM,EAAEA,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACG;AAA3C,OAAnB,CAAhB;AAAA,KAAP;AACD;AAT4B,CAAD,CAA9B","names":["messageConfig","configProviderProps","buildProps","a11y","type","Boolean","locale","definePropType","Object","size","String","values","componentSizes","button","experimentalFeatures","keyboardNavigation","message","zIndex","Number","namespace","defineComponent","name","props","setup","slots","watch","val","assign","immediate","deep","config","provideGlobalConfig","renderSlot","value"],"sources":["../../../../../../packages/components/config-provider/src/config-provider.ts"],"sourcesContent":["import { defineComponent, renderSlot, watch } from 'vue'\nimport { buildProps, definePropType } from '@element-plus/utils'\nimport { provideGlobalConfig } from '@element-plus/hooks'\n\nimport { componentSizes } from '@element-plus/constants'\nimport type { ExtractPropTypes } from 'vue'\nimport type { ExperimentalFeatures } from '@element-plus/tokens'\nimport type { Language } from '@element-plus/locale'\nimport type { ButtonConfigContext } from '@element-plus/components/button'\nimport type { MessageConfigContext } from '@element-plus/components/message'\n\nexport const messageConfig: MessageConfigContext = {}\n\nexport const configProviderProps = buildProps({\n  // Controlling if the users want a11y features.\n  a11y: {\n    type: Boolean,\n    default: true,\n  },\n\n  locale: {\n    type: definePropType<Language>(Object),\n  },\n\n  size: {\n    type: String,\n    values: componentSizes,\n    default: '',\n  },\n\n  button: {\n    type: definePropType<ButtonConfigContext>(Object),\n  },\n\n  experimentalFeatures: {\n    type: definePropType<ExperimentalFeatures>(Object),\n  },\n\n  // Controls if we should handle keyboard navigation\n  keyboardNavigation: {\n    type: Boolean,\n    default: true,\n  },\n\n  message: {\n    type: definePropType<MessageConfigContext>(Object),\n  },\n\n  zIndex: {\n    type: Number,\n  },\n\n  namespace: {\n    type: String,\n    default: 'el',\n  },\n} as const)\n\nexport default defineComponent({\n  name: 'ElConfigProvider',\n  props: configProviderProps,\n\n  setup(props, { slots }) {\n    watch(\n      () => props.message,\n      (val) => {\n        Object.assign(messageConfig, val ?? {})\n      },\n      { immediate: true, deep: true }\n    )\n    const config = provideGlobalConfig(props)\n    return () => renderSlot(slots, 'default', { config: config?.value })\n  },\n})\n\nexport type ConfigProviderProps = ExtractPropTypes<typeof configProviderProps>\n"]},"metadata":{},"sourceType":"module"}