{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport { defineComponent, ref, watch, watchEffect, openBlock, createElementBlock, createElementVNode, Fragment, renderList, normalizeClass, normalizeStyle } from 'vue';\nimport { useOptions } from '../useOption.mjs';\nimport Color from '../color.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\n\nvar _sfc_main = defineComponent({\n  props: {\n    colors: {\n      type: Array,\n      required: true\n    },\n    color: {\n      type: Object,\n      required: true\n    }\n  },\n  setup: function setup(props) {\n    var _useOptions = useOptions(),\n        currentColor = _useOptions.currentColor;\n\n    var rgbaColors = ref(parseColors(props.colors, props.color));\n    watch(function () {\n      return currentColor.value;\n    }, function (val) {\n      var color = new Color();\n      color.fromString(val);\n      rgbaColors.value.forEach(function (item) {\n        item.selected = color.compare(item);\n      });\n    });\n    watchEffect(function () {\n      rgbaColors.value = parseColors(props.colors, props.color);\n    });\n\n    function handleSelect(index) {\n      props.color.fromString(props.colors[index]);\n    }\n\n    function parseColors(colors, color) {\n      return colors.map(function (value) {\n        var c = new Color();\n        c.enableAlpha = true;\n        c.format = \"rgba\";\n        c.fromString(value);\n        c.selected = c.value === color.value;\n        return c;\n      });\n    }\n\n    return {\n      rgbaColors: rgbaColors,\n      handleSelect: handleSelect\n    };\n  }\n});\n\nvar _hoisted_1 = {\n  \"class\": \"el-color-predefine\"\n};\nvar _hoisted_2 = {\n  \"class\": \"el-color-predefine__colors\"\n};\nvar _hoisted_3 = [\"onClick\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", _hoisted_1, [createElementVNode(\"div\", _hoisted_2, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rgbaColors, function (item, index) {\n    return openBlock(), createElementBlock(\"div\", {\n      key: _ctx.colors[index],\n      \"class\": normalizeClass([\"el-color-predefine__color-selector\", {\n        selected: item.selected,\n        \"is-alpha\": item._alpha < 100\n      }]),\n      onClick: function onClick($event) {\n        return _ctx.handleSelect(index);\n      }\n    }, [createElementVNode(\"div\", {\n      style: normalizeStyle({\n        backgroundColor: item.value\n      })\n    }, null, 4)], 10, _hoisted_3);\n  }), 128))])]);\n}\n\nvar Predefine = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/predefine.vue\"]]);\n\nexport { Predefine as default };","map":{"version":3,"mappings":";;;;;;;;;AAuBA,IAAKA,YAAaC,eAAa;AAC7BC,OAAO;AACLC,UAAQ;AAAEC,UAAM,OAAR;AAAeC,gBAAU;AAAzB,KADH;AAELC,SAAO;AACLF,UAAM,QADD;AAELC,cAAU;AAFL;AAFF,GADsB;AAQ7BE,OAR6B,iBAQvBL,KARuB,EAQhB;AACL,sBAAmBM,UAAW,EAA9B;AAAA,QAAEC,YAAF,eAAEA,YAAF;;AAEN,QAAMC,aAAaC,GAAI,aAAYT,MAAMC,MAAlB,EAA0BD,MAAMI,KAAhC,EAAvB;AAGAM,UACE;AAAA,aAAMH,aAAaI,KAAnB;AAAA,KADF,EAEE,UAACC,GAAD,EAAS;AACD,kBAAQ,IAAIC,KAAJ,EAAR;AACNT,YAAMU,UAAN,CAAiBF,GAAjB;AAEWJ,uBAAMO,OAAN,CAAc,UAACC,IAAD,EAAU;AAC5BA,wBAAWZ,KAAM,QAAN,CAAcY,IAAd,CAAX;AACN,OAFU;AAIf,KAVA;AAWAC,gBAAY,YAAM;AAChBT,iBAAWG,KAAX,GAAmBO,YAAYlB,KAAM,OAAlB,EAA0BA,MAAMI,KAAhC,CAAnB;AACD,KAFD;;AAIA,0BAAsBe,KAAtB,EAA6B;AAC3BnB,YAAMI,KAAN,CAAYU,UAAZ,CAAuBd,KAAM,OAAN,CAAamB,KAAb,CAAvB;AACF;;AACA,yBAAqBlB,MAArB,EAA6BG,KAA7B,EAAoC;AAC3B,oBAAOgB,GAAP,CAAW,UAACT,KAAD,EAAW;AACrB,gBAAI,IAAIE,KAAJ,EAAJ;AACNQ,UAAEC,WAAF,GAAgB,IAAhB;AACAD,UAAEE,MAAF,GAAW,MAAX;AACAF,UAAEP,UAAF,CAAaH,KAAb;AACEU,qBAAWA,CAAE,MAAF,KAAYjB,KAAM,MAA7B;AACK;AACR,OAPM;AAQT;;AACO;AACLI,4BADK;AAELgB;AAFK;AAIT;AA9C6B,EAA/B;;AAtBO;AAAA,WAAM;AAAN;AACE;AAAA,WAAM;AAAN;;;;AADP,yCAYM,KAZN,cAYM,CAXJC,mBAUM,KAVN,cAUM,mBATJC,kBAQM,4BAPoBC,IAAU,WAO9B,EAP8B,UAA1BX,IAA0B,EAApBG,KAAoB,EAAf;wBADrBO,kBAQM;AANHE,WAAKD,IAAO,OAAP,CAAOR,KAAP,CAMF;AALJ,eAAKU,gBAAC,oCAADA,EAAqC;AAAAC,kBACtBd,KAAKc,QADiB;AACT,oBAAcd,KAAKe,MAAL,GAAW;AADhB,OAArCF,EAKD;AAHHG,eAAK,iBAAEC,MAAF;AAAA,eAAEN,kBAAaR,KAAb,CAAF;AAAA;AAGF,OAHsB,CAE1BM,kBAAgD;AAA1CS,aAAKC,cAAqB;AAAAC,8BAAKzB;AAAL;AAAgB,OAAN,IAAM,EAAN,CAAM,CAFtB,CAGtB;GAAA,OACF,EAVN,CAWI,CAZN","names":["_sfc_main","defineComponent","props","colors","type","required","color","setup","useOptions","currentColor","rgbaColors","ref","watch","value","val","Color","fromString","forEach","item","watchEffect","parseColors","index","map","c","enableAlpha","format","handleSelect","_createElementVNode","_createElementBlock","_ctx","key","_normalizeClass","selected","_alpha","onClick","$event","style","_normalizeStyle","backgroundColor"],"sources":["../../../../../../../packages/components/color-picker/src/components/predefine.vue"],"sourcesContent":["<template>\n  <div class=\"el-color-predefine\">\n    <div class=\"el-color-predefine__colors\">\n      <div\n        v-for=\"(item, index) in rgbaColors\"\n        :key=\"colors[index]\"\n        class=\"el-color-predefine__color-selector\"\n        :class=\"{ selected: item.selected, 'is-alpha': item._alpha < 100 }\"\n        @click=\"handleSelect(index)\"\n      >\n        <div :style=\"{ backgroundColor: item.value }\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref, watch, watchEffect } from 'vue'\nimport { useOptions } from '../useOption'\nimport Color from '../color'\n\nimport type { PropType } from 'vue'\n\nexport default defineComponent({\n  props: {\n    colors: { type: Array, required: true },\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n  },\n  setup(props) {\n    const { currentColor } = useOptions()\n    //data\n    const rgbaColors = ref(parseColors(props.colors, props.color))\n\n    //watch\n    watch(\n      () => currentColor.value,\n      (val) => {\n        const color = new Color()\n        color.fromString(val)\n\n        rgbaColors.value.forEach((item) => {\n          item.selected = color.compare(item)\n        })\n      }\n    )\n    watchEffect(() => {\n      rgbaColors.value = parseColors(props.colors, props.color)\n    })\n\n    function handleSelect(index) {\n      props.color.fromString(props.colors[index])\n    }\n    function parseColors(colors, color) {\n      return colors.map((value) => {\n        const c = new Color()\n        c.enableAlpha = true\n        c.format = 'rgba'\n        c.fromString(value)\n        c.selected = c.value === color.value\n        return c\n      })\n    }\n    return {\n      rgbaColors,\n      handleSelect,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}