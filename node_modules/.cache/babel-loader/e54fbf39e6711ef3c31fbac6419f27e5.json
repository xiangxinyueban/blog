{"ast":null,"code":"import _toConsumableArray from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { defineComponent, ref, watch, provide, openBlock, createElementBlock, normalizeClass, unref, renderSlot } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { collapseProps, collapseEmits } from './collapse.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { castArray } from 'lodash-unified';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { collapseContextKey } from '../../../tokens/collapse.mjs';\nvar __default__ = {\n  name: \"ElCollapse\"\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: collapseProps,\n  emits: collapseEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n        emit = _ref.emit;\n    var props = __props;\n    var ns = useNamespace(\"collapse\");\n    var activeNames = ref(castArray(props.modelValue));\n\n    var setActiveNames = function setActiveNames(_activeNames) {\n      activeNames.value = _activeNames;\n      var value = props.accordion ? activeNames.value[0] : activeNames.value;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(CHANGE_EVENT, value);\n    };\n\n    var handleItemClick = function handleItemClick(name) {\n      if (props.accordion) {\n        setActiveNames([(activeNames.value[0] || activeNames.value[0] === 0) && activeNames.value[0] === name ? \"\" : name]);\n      } else {\n        var _activeNames = _toConsumableArray(activeNames.value);\n\n        var index = _activeNames.indexOf(name);\n\n        if (index > -1) {\n          _activeNames.splice(index, 1);\n        } else {\n          _activeNames.push(name);\n        }\n\n        setActiveNames(_activeNames);\n      }\n    };\n\n    watch(function () {\n      return props.modelValue;\n    }, function () {\n      return activeNames.value = castArray(props.modelValue);\n    }, {\n      deep: true\n    });\n    provide(collapseContextKey, {\n      activeNames: activeNames,\n      handleItemClick: handleItemClick\n    });\n    expose({\n      activeNames: activeNames,\n      setActiveNames: setActiveNames\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        \"class\": normalizeClass(unref(ns).b()),\n        role: \"tablist\",\n        \"aria-multiselectable\": \"true\"\n      }, [renderSlot(_ctx.$slots, \"default\")], 2);\n    };\n  }\n}));\n\nvar Collapse = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/collapse/src/collapse.vue\"]]);\n\nexport { Collapse as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;;AAEA;AACAA;AACA;AACAC;AACAA;AACA,KALA;;AAOA;AACA;AACAC,wBACA,wDACAF,6BADA,GAEA,EAFA,GAGAG,IAJA;AAMA,OAPA,MAOA;AACA;;AACA;;AAEA;AACAC;AACA,SAFA,MAEA;AACAA;AACA;;AACAF;AACA;AACA,KAnBA;;AAqBAG,UACA;AAAA;AAAA,KADA,EAEA;AAAA;AAAA,KAFA,EAGA;AAAAC;AAAA,KAHA;AAMAC;AACAP,8BADA;AAEAQ;AAFA;AAKAC;AAEAT,8BAFA;AAIAE;AAJA","names":["activeNames","emit","setActiveNames","name","_activeNames","watch","deep","provide","handleItemClick","expose"],"sources":["../../../../../../packages/components/collapse/src/collapse.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b()\" role=\"tablist\" aria-multiselectable=\"true\">\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { provide, ref, watch } from 'vue'\nimport { ensureArray } from '@element-plus/utils'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\nimport { collapseContextKey } from '@element-plus/tokens'\nimport { collapseEmits, collapseProps } from './collapse'\nimport type { CollapseActiveName } from './collapse'\n\ndefineOptions({\n  name: 'ElCollapse',\n})\nconst props = defineProps(collapseProps)\nconst emit = defineEmits(collapseEmits)\n\nconst ns = useNamespace('collapse')\nconst activeNames = ref(ensureArray(props.modelValue))\n\nconst setActiveNames = (_activeNames: CollapseActiveName[]) => {\n  activeNames.value = _activeNames\n  const value = props.accordion ? activeNames.value[0] : activeNames.value\n  emit(UPDATE_MODEL_EVENT, value)\n  emit(CHANGE_EVENT, value)\n}\n\nconst handleItemClick = (name: CollapseActiveName) => {\n  if (props.accordion) {\n    setActiveNames([\n      (activeNames.value[0] || activeNames.value[0] === 0) &&\n      activeNames.value[0] === name\n        ? ''\n        : name,\n    ])\n  } else {\n    const _activeNames = [...activeNames.value]\n    const index = _activeNames.indexOf(name)\n\n    if (index > -1) {\n      _activeNames.splice(index, 1)\n    } else {\n      _activeNames.push(name)\n    }\n    setActiveNames(_activeNames)\n  }\n}\n\nwatch(\n  () => props.modelValue,\n  () => (activeNames.value = ensureArray(props.modelValue)),\n  { deep: true }\n)\n\nprovide(collapseContextKey, {\n  activeNames,\n  handleItemClick,\n})\n\ndefineExpose({\n  /** @description active names */\n  activeNames,\n  /** @description set active names */\n  setActiveNames,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}