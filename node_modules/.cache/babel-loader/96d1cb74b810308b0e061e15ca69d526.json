{"ast":null,"code":"import _objectSpread from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport { watch, nextTick, computed, toRefs } from 'vue';\nimport { isEqual, pick } from 'lodash-unified';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport _Tree from '../../tree/index.mjs';\nimport component from './tree-select-option.mjs';\nimport { isFunction } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\n\nvar useTree = function useTree(props, _ref, _ref2) {\n  var attrs = _ref.attrs,\n      slots = _ref.slots,\n      emit = _ref.emit;\n  var select = _ref2.select,\n      tree = _ref2.tree,\n      key = _ref2.key;\n  watch(function () {\n    return props.modelValue;\n  }, function () {\n    if (props.showCheckbox) {\n      nextTick(function () {\n        var treeInstance = tree.value;\n\n        if (treeInstance && !isEqual(treeInstance.getCheckedKeys(), toValidArray(props.modelValue))) {\n          treeInstance.setCheckedKeys(toValidArray(props.modelValue));\n        }\n      });\n    }\n  }, {\n    immediate: true,\n    deep: true\n  });\n  var propsMap = computed(function () {\n    return _objectSpread({\n      value: key.value\n    }, props.props);\n  });\n\n  var getNodeValByProp = function getNodeValByProp(prop, data) {\n    var _a;\n\n    var propVal = propsMap.value[prop];\n\n    if (isFunction(propVal)) {\n      return propVal(data, (_a = tree.value) == null ? void 0 : _a.getNode(getNodeValByProp(\"value\", data)));\n    } else {\n      return data[propVal];\n    }\n  };\n\n  return _objectSpread(_objectSpread(_objectSpread({}, pick(toRefs(props), Object.keys(_Tree.props))), attrs), {}, {\n    nodeKey: key,\n    defaultExpandedKeys: computed(function () {\n      return props.defaultExpandedKeys ? props.defaultExpandedKeys.concat(props.modelValue) : toValidArray(props.modelValue);\n    }),\n    renderContent: function renderContent(h, _ref3) {\n      var node = _ref3.node,\n          data = _ref3.data,\n          store = _ref3.store;\n      return h(component, {\n        value: getNodeValByProp(\"value\", data),\n        label: getNodeValByProp(\"label\", data),\n        disabled: getNodeValByProp(\"disabled\", data)\n      }, props.renderContent ? function () {\n        return props.renderContent(h, {\n          node: node,\n          data: data,\n          store: store\n        });\n      } : slots[\"default\"] ? function () {\n        return slots[\"default\"]({\n          node: node,\n          data: data,\n          store: store\n        });\n      } : void 0);\n    },\n    filterNodeMethod: function filterNodeMethod(value, data, node) {\n      var _a;\n\n      if (props.filterNodeMethod) return props.filterNodeMethod(value, data, node);\n      if (!value) return true;\n      return (_a = getNodeValByProp(\"label\", data)) == null ? void 0 : _a.includes(value);\n    },\n    onNodeClick: function onNodeClick(data, node, e) {\n      var _a, _b, _c;\n\n      (_a = attrs.onNodeClick) == null ? void 0 : _a.call(attrs, data, node, e);\n\n      if (props.checkStrictly || node.isLeaf) {\n        if (!getNodeValByProp(\"disabled\", data)) {\n          var option = (_b = select.value) == null ? void 0 : _b.options.get(getNodeValByProp(\"value\", data));\n          (_c = select.value) == null ? void 0 : _c.handleOptionSelect(option, true);\n        }\n      } else {\n        e.ctx.handleExpandIconClick();\n      }\n    },\n    onCheck: function onCheck(data, params) {\n      var _a, _b;\n\n      (_a = attrs.onCheck) == null ? void 0 : _a.call(attrs, data, params);\n      var checkedKeys = !props.checkStrictly ? (_b = tree.value) == null ? void 0 : _b.getCheckedKeys(true) : params.checkedKeys;\n      var value = getNodeValByProp(\"value\", data);\n      emit(UPDATE_MODEL_EVENT, props.multiple ? checkedKeys : checkedKeys.includes(value) ? value : void 0);\n    }\n  });\n};\n\nfunction toValidArray(val) {\n  return Array.isArray(val) ? val : val || val === 0 ? [val] : [];\n}\n\nexport { useTree };","map":{"version":3,"mappings":"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","names":["useTree","props","attrs","slots","emit","select","tree","key","watch","modelValue","showCheckbox","nextTick","treeInstance","value","isEqual","getCheckedKeys","toValidArray","setCheckedKeys","immediate","deep","propsMap","computed","getNodeValByProp","prop","data","_a","propVal","isFunction","getNode","pick","toRefs","Object","keys","ElTree","nodeKey","defaultExpandedKeys","concat","renderContent","h","node","store","TreeSelectOption","label","disabled","filterNodeMethod","includes","onNodeClick","e","_b","_c","call","checkStrictly","isLeaf","option","options","get","handleOptionSelect","ctx","handleExpandIconClick","onCheck","params","checkedKeys","UPDATE_MODEL_EVENT","multiple","val","Array","isArray"],"sources":["../../../../../../packages/components/tree-select/src/tree.ts"],"sourcesContent":["import { computed, nextTick, toRefs, watch } from 'vue'\nimport { isEqual, pick } from 'lodash-unified'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { isFunction } from '@element-plus/utils'\nimport ElTree from '@element-plus/components/tree'\nimport TreeSelectOption from './tree-select-option'\nimport type { Ref } from 'vue'\nimport type ElSelect from '@element-plus/components/select'\nimport type Node from '@element-plus/components/tree/src/model/node'\nimport type { TreeNodeData } from '@element-plus/components/tree/src/tree.type'\n\nexport const useTree = (\n  props,\n  { attrs, slots, emit },\n  {\n    select,\n    tree,\n    key,\n  }: {\n    select: Ref<InstanceType<typeof ElSelect> | undefined>\n    tree: Ref<InstanceType<typeof ElTree> | undefined>\n    key: Ref<string>\n  }\n) => {\n  watch(\n    () => props.modelValue,\n    () => {\n      if (props.showCheckbox) {\n        nextTick(() => {\n          const treeInstance = tree.value\n          if (\n            treeInstance &&\n            !isEqual(\n              treeInstance.getCheckedKeys(),\n              toValidArray(props.modelValue)\n            )\n          ) {\n            treeInstance.setCheckedKeys(toValidArray(props.modelValue))\n          }\n        })\n      }\n    },\n    {\n      immediate: true,\n      deep: true,\n    }\n  )\n\n  const propsMap = computed(() => ({\n    value: key.value,\n    ...props.props,\n  }))\n\n  const getNodeValByProp = (\n    prop: 'value' | 'label' | 'children' | 'disabled' | 'isLeaf',\n    data: TreeNodeData\n  ) => {\n    const propVal = propsMap.value[prop]\n    if (isFunction(propVal)) {\n      return propVal(\n        data,\n        tree.value?.getNode(getNodeValByProp('value', data)) as Node\n      )\n    } else {\n      return data[propVal as string]\n    }\n  }\n\n  return {\n    ...pick(toRefs(props), Object.keys(ElTree.props)),\n    ...attrs,\n    nodeKey: key,\n    defaultExpandedKeys: computed(() =>\n      props.defaultExpandedKeys\n        ? props.defaultExpandedKeys.concat(props.modelValue)\n        : toValidArray(props.modelValue)\n    ),\n    renderContent: (h, { node, data, store }) => {\n      return h(\n        TreeSelectOption,\n        {\n          value: getNodeValByProp('value', data),\n          label: getNodeValByProp('label', data),\n          disabled: getNodeValByProp('disabled', data),\n        },\n        props.renderContent\n          ? () => props.renderContent(h, { node, data, store })\n          : slots.default\n          ? () => slots.default({ node, data, store })\n          : undefined\n      )\n    },\n    filterNodeMethod: (value, data, node) => {\n      if (props.filterNodeMethod)\n        return props.filterNodeMethod(value, data, node)\n      if (!value) return true\n      return getNodeValByProp('label', data)?.includes(value)\n    },\n    onNodeClick: (data, node, e) => {\n      attrs.onNodeClick?.(data, node, e)\n\n      if (props.checkStrictly || node.isLeaf) {\n        if (!getNodeValByProp('disabled', data)) {\n          const option = select.value?.options.get(\n            getNodeValByProp('value', data)\n          )\n          select.value?.handleOptionSelect(option, true)\n        }\n      } else {\n        e.ctx.handleExpandIconClick()\n      }\n    },\n    onCheck: (data, params) => {\n      attrs.onCheck?.(data, params)\n\n      // remove folder node when `checkStrictly` is false\n      const checkedKeys = !props.checkStrictly\n        ? tree.value?.getCheckedKeys(true)\n        : params.checkedKeys\n\n      const value = getNodeValByProp('value', data)\n      emit(\n        UPDATE_MODEL_EVENT,\n        props.multiple\n          ? checkedKeys\n          : checkedKeys.includes(value)\n          ? value\n          : undefined\n      )\n    },\n  }\n}\n\nfunction toValidArray(val: any) {\n  return Array.isArray(val) ? val : val || val === 0 ? [val] : []\n}\n"]},"metadata":{},"sourceType":"module"}