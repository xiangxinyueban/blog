{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport { watch, unref } from 'vue';\nimport '../../utils/index.mjs';\nimport { debugWarn } from '../../utils/error.mjs';\n\nvar useDeprecated = function useDeprecated(_ref, condition) {\n  var from = _ref.from,\n      replacement = _ref.replacement,\n      scope = _ref.scope,\n      version = _ref.version,\n      ref = _ref.ref,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? \"API\" : _ref$type;\n  watch(function () {\n    return unref(condition);\n  }, function (val) {\n    if (val) {\n      debugWarn(scope, \"\".concat(type, \" \").concat(from, \" is about to be deprecated in version \").concat(version, \", please use \").concat(replacement, \" instead.\\nFor more detail, please visit: \").concat(ref, \"\\n\"));\n    }\n  }, {\n    immediate: true\n  });\n};\n\nexport { useDeprecated };","map":{"version":3,"mappings":";;;;;AAEY,IAACA,aAAa,GAAG,SAAhBA,aAAgB,OAA2DC,SAA3D,EAAyE;AAAA,MAAtEC,IAAsE,QAAtEA,IAAsE;AAAA,MAAhEC,WAAgE,QAAhEA,WAAgE;AAAA,MAAnDC,KAAmD,QAAnDA,KAAmD;AAAA,MAA5CC,OAA4C,QAA5CA,OAA4C;AAAA,MAAnCC,GAAmC,QAAnCA,GAAmC;AAAA,uBAA9BC,IAA8B;AAAA,MAA9BA,IAA8B,0BAAvB,KAAuB;AACpGC,OAAK,CAAC;AAAA,WAAMC,KAAK,CAACR,SAAD,CAAX;AAAA,GAAD,EAAyB,UAACS,GAAD,EAAS;AACrC,QAAIA,GAAJ,EAAS;AACPC,eAAS,CAACP,KAAD,YAAWG,IAAX,cAAmBL,IAAnB,mDAAgEG,OAAhE,0BAAuFF,WAAvF,uDACkBG,GADlB,QAAT;AAGD;AACF,GANI,EAMF;AACDM,aAAS,EAAE;AADV,GANE,CAAL;AASF,CAVY","names":["useDeprecated","condition","from","replacement","scope","version","ref","type","watch","unref","val","debugWarn","immediate"],"sources":["../../../../../packages/hooks/use-deprecated/index.ts"],"sourcesContent":["import { unref, watch } from 'vue'\nimport { debugWarn } from '@element-plus/utils'\n\nimport type { MaybeRef } from '@vueuse/core'\n\ntype DeprecationParam = {\n  from: string\n  replacement: string\n  scope: string\n  version: string\n  ref: string\n  type?: 'API' | 'Slot' | 'Event'\n}\n\nexport const useDeprecated = (\n  { from, replacement, scope, version, ref, type = 'API' }: DeprecationParam,\n  condition: MaybeRef<boolean>\n) => {\n  watch(\n    () => unref(condition),\n    (val) => {\n      if (val) {\n        debugWarn(\n          scope,\n          `${type} ${from} is about to be deprecated in version ${version}, please use ${replacement} instead.\nFor more detail, please visit: ${ref}\n`\n        )\n      }\n    },\n    {\n      immediate: true,\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}