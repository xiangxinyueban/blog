{"ast":null,"code":"import { computed } from 'vue';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport '../../../hooks/index.mjs';\nimport { useDisabled } from '../../../hooks/use-common-props/index.mjs';\n\nfunction darken(color, amount = 20) {\n  return color.mix(\"#141414\", amount).toString();\n}\n\nfunction useButtonCustomStyle(props) {\n  const _disabled = useDisabled();\n\n  return computed(() => {\n    let styles = {};\n    const buttonColor = props.color;\n\n    if (buttonColor) {\n      const color = new TinyColor(buttonColor);\n      const activeBgColor = props.dark ? color.tint(20).toString() : darken(color, 20);\n\n      if (props.plain) {\n        styles = {\n          \"--el-button-bg-color\": props.dark ? darken(color, 90) : color.tint(90).toString(),\n          \"--el-button-text-color\": buttonColor,\n          \"--el-button-border-color\": props.dark ? darken(color, 50) : color.tint(50).toString(),\n          \"--el-button-hover-text-color\": \"var(--el-color-white)\",\n          \"--el-button-hover-bg-color\": buttonColor,\n          \"--el-button-hover-border-color\": buttonColor,\n          \"--el-button-active-bg-color\": activeBgColor,\n          \"--el-button-active-text-color\": \"var(--el-color-white)\",\n          \"--el-button-active-border-color\": activeBgColor\n        };\n\n        if (_disabled.value) {\n          styles[\"--el-button-disabled-bg-color\"] = props.dark ? darken(color, 90) : color.tint(90).toString();\n          styles[\"--el-button-disabled-text-color\"] = props.dark ? darken(color, 50) : color.tint(50).toString();\n          styles[\"--el-button-disabled-border-color\"] = props.dark ? darken(color, 80) : color.tint(80).toString();\n        }\n      } else {\n        const hoverBgColor = props.dark ? darken(color, 30) : color.tint(30).toString();\n        const textColor = color.isDark() ? \"var(--el-color-white)\" : \"var(--el-color-black)\";\n        styles = {\n          \"--el-button-bg-color\": buttonColor,\n          \"--el-button-text-color\": textColor,\n          \"--el-button-border-color\": buttonColor,\n          \"--el-button-hover-bg-color\": hoverBgColor,\n          \"--el-button-hover-text-color\": textColor,\n          \"--el-button-hover-border-color\": hoverBgColor,\n          \"--el-button-active-bg-color\": activeBgColor,\n          \"--el-button-active-border-color\": activeBgColor\n        };\n\n        if (_disabled.value) {\n          const disabledButtonColor = props.dark ? darken(color, 50) : color.tint(50).toString();\n          styles[\"--el-button-disabled-bg-color\"] = disabledButtonColor;\n          styles[\"--el-button-disabled-text-color\"] = props.dark ? \"rgba(255, 255, 255, 0.5)\" : \"var(--el-color-white)\";\n          styles[\"--el-button-disabled-border-color\"] = disabledButtonColor;\n        }\n      }\n    }\n\n    return styles;\n  });\n}\n\nexport { darken, useButtonCustomStyle };","map":{"version":3,"mappings":";;;;;AAGO,SAASA,MAAT,CAAgBC,KAAhB,EAAuBC,MAAM,GAAG,EAAhC,EAAoC;AACzC,SAAOD,KAAK,CAACE,GAAN,CAAU,SAAV,EAAqBD,MAArB,EAA6BE,QAA7B,EAAP;AACD;;AACM,SAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AAC1C,QAAMC,SAAS,GAAGC,WAAW,EAA7B;;AACA,SAAOC,QAAQ,CAAC,MAAM;AACpB,QAAIC,MAAM,GAAG,EAAb;AACA,UAAMC,WAAW,GAAGL,KAAK,CAACL,KAA1B;;AACA,QAAIU,WAAJ,EAAiB;AACf,YAAMV,KAAK,GAAG,IAAIW,SAAJ,CAAcD,WAAd,CAAd;AACA,YAAME,aAAa,GAAGP,KAAK,CAACQ,IAAN,GAAab,KAAK,CAACc,IAAN,CAAW,EAAX,EAAeX,QAAf,EAAb,GAAyCJ,MAAM,CAACC,KAAD,EAAQ,EAAR,CAArE;;AACA,UAAIK,KAAK,CAACU,KAAV,EAAiB;AACfN,cAAM,GAAG;AACP,kCAAwBJ,KAAK,CAACQ,IAAN,GAAad,MAAM,CAACC,KAAD,EAAQ,EAAR,CAAnB,GAAiCA,KAAK,CAACc,IAAN,CAAW,EAAX,EAAeX,QAAf,EADlD;AAEP,oCAA0BO,WAFnB;AAGP,sCAA4BL,KAAK,CAACQ,IAAN,GAAad,MAAM,CAACC,KAAD,EAAQ,EAAR,CAAnB,GAAiCA,KAAK,CAACc,IAAN,CAAW,EAAX,EAAeX,QAAf,EAHtD;AAIP,0CAAgC,uBAJzB;AAKP,wCAA8BO,WALvB;AAMP,4CAAkCA,WAN3B;AAOP,yCAA+BE,aAPxB;AAQP,2CAAiC,uBAR1B;AASP,6CAAmCA;AAT5B,SAAT;;AAWA,YAAIN,SAAS,CAACU,KAAd,EAAqB;AACnBP,gBAAM,CAAC,+BAAD,CAAN,GAA0CJ,KAAK,CAACQ,IAAN,GAAad,MAAM,CAACC,KAAD,EAAQ,EAAR,CAAnB,GAAiCA,KAAK,CAACc,IAAN,CAAW,EAAX,EAAeX,QAAf,EAA3E;AACAM,gBAAM,CAAC,iCAAD,CAAN,GAA4CJ,KAAK,CAACQ,IAAN,GAAad,MAAM,CAACC,KAAD,EAAQ,EAAR,CAAnB,GAAiCA,KAAK,CAACc,IAAN,CAAW,EAAX,EAAeX,QAAf,EAA7E;AACAM,gBAAM,CAAC,mCAAD,CAAN,GAA8CJ,KAAK,CAACQ,IAAN,GAAad,MAAM,CAACC,KAAD,EAAQ,EAAR,CAAnB,GAAiCA,KAAK,CAACc,IAAN,CAAW,EAAX,EAAeX,QAAf,EAA/E;AACD;AACF,OAjBD,MAiBO;AACL,cAAMc,YAAY,GAAGZ,KAAK,CAACQ,IAAN,GAAad,MAAM,CAACC,KAAD,EAAQ,EAAR,CAAnB,GAAiCA,KAAK,CAACc,IAAN,CAAW,EAAX,EAAeX,QAAf,EAAtD;AACA,cAAMe,SAAS,GAAGlB,KAAK,CAACmB,MAAN,KAAiB,uBAAjB,GAA2C,uBAA7D;AACAV,cAAM,GAAG;AACP,kCAAwBC,WADjB;AAEP,oCAA0BQ,SAFnB;AAGP,sCAA4BR,WAHrB;AAIP,wCAA8BO,YAJvB;AAKP,0CAAgCC,SALzB;AAMP,4CAAkCD,YAN3B;AAOP,yCAA+BL,aAPxB;AAQP,6CAAmCA;AAR5B,SAAT;;AAUA,YAAIN,SAAS,CAACU,KAAd,EAAqB;AACnB,gBAAMI,mBAAmB,GAAGf,KAAK,CAACQ,IAAN,GAAad,MAAM,CAACC,KAAD,EAAQ,EAAR,CAAnB,GAAiCA,KAAK,CAACc,IAAN,CAAW,EAAX,EAAeX,QAAf,EAA7D;AACAM,gBAAM,CAAC,+BAAD,CAAN,GAA0CW,mBAA1C;AACAX,gBAAM,CAAC,iCAAD,CAAN,GAA4CJ,KAAK,CAACQ,IAAN,GAAa,0BAAb,GAA0C,uBAAtF;AACAJ,gBAAM,CAAC,mCAAD,CAAN,GAA8CW,mBAA9C;AACD;AACF;AACF;;AACD,WAAOX,MAAP;AACD,GA7Cc,CAAf;AA8CF","names":["darken","color","amount","mix","toString","useButtonCustomStyle","props","_disabled","useDisabled","computed","styles","buttonColor","TinyColor","activeBgColor","dark","tint","plain","value","hoverBgColor","textColor","isDark","disabledButtonColor"],"sources":["../../../../../../packages/components/button/src/button-custom.ts"],"sourcesContent":["import { computed } from 'vue'\nimport { TinyColor } from '@ctrl/tinycolor'\nimport { useDisabled } from '@element-plus/hooks'\nimport type { ButtonProps } from './button'\n\nexport function darken(color: TinyColor, amount = 20) {\n  return color.mix('#141414', amount).toString()\n}\n\nexport function useButtonCustomStyle(props: ButtonProps) {\n  const _disabled = useDisabled()\n\n  // calculate hover & active color by custom color\n  // only work when custom color\n  return computed(() => {\n    let styles: Record<string, string> = {}\n\n    const buttonColor = props.color\n\n    if (buttonColor) {\n      const color = new TinyColor(buttonColor)\n      const activeBgColor = props.dark\n        ? color.tint(20).toString()\n        : darken(color, 20)\n\n      if (props.plain) {\n        styles = {\n          '--el-button-bg-color': props.dark\n            ? darken(color, 90)\n            : color.tint(90).toString(),\n          '--el-button-text-color': buttonColor,\n          '--el-button-border-color': props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString(),\n          '--el-button-hover-text-color': 'var(--el-color-white)',\n          '--el-button-hover-bg-color': buttonColor,\n          '--el-button-hover-border-color': buttonColor,\n          '--el-button-active-bg-color': activeBgColor,\n          '--el-button-active-text-color': 'var(--el-color-white)',\n          '--el-button-active-border-color': activeBgColor,\n        }\n\n        if (_disabled.value) {\n          styles['--el-button-disabled-bg-color'] = props.dark\n            ? darken(color, 90)\n            : color.tint(90).toString()\n          styles['--el-button-disabled-text-color'] = props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString()\n          styles['--el-button-disabled-border-color'] = props.dark\n            ? darken(color, 80)\n            : color.tint(80).toString()\n        }\n      } else {\n        const hoverBgColor = props.dark\n          ? darken(color, 30)\n          : color.tint(30).toString()\n        const textColor = color.isDark()\n          ? 'var(--el-color-white)'\n          : 'var(--el-color-black)'\n        styles = {\n          '--el-button-bg-color': buttonColor,\n          '--el-button-text-color': textColor,\n          '--el-button-border-color': buttonColor,\n          '--el-button-hover-bg-color': hoverBgColor,\n          '--el-button-hover-text-color': textColor,\n          '--el-button-hover-border-color': hoverBgColor,\n          '--el-button-active-bg-color': activeBgColor,\n          '--el-button-active-border-color': activeBgColor,\n        }\n\n        if (_disabled.value) {\n          const disabledButtonColor = props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString()\n          styles['--el-button-disabled-bg-color'] = disabledButtonColor\n          styles['--el-button-disabled-text-color'] = props.dark\n            ? 'rgba(255, 255, 255, 0.5)'\n            : 'var(--el-color-white)'\n          styles['--el-button-disabled-border-color'] = disabledButtonColor\n        }\n      }\n    }\n\n    return styles\n  })\n}\n"]},"metadata":{},"sourceType":"module"}