{"ast":null,"code":"import _objectSpread from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport { defineComponent, inject, onMounted, watch, openBlock, createBlock, unref, mergeProps, withCtx, renderSlot, createCommentVNode } from 'vue';\nimport { unrefElement } from '@vueuse/core';\nimport '../../slot/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../utils/index.mjs';\nimport { usePopperTriggerProps } from './trigger.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { POPPER_INJECTION_KEY } from '../../../tokens/popper.mjs';\nimport { useForwardRef } from '../../../hooks/use-forward-ref/index.mjs';\nimport { isElement } from '../../../utils/types.mjs';\nimport { OnlyChild } from '../../slot/src/only-child.mjs';\nvar __default__ = {\n  name: \"ElPopperTrigger\",\n  inheritAttrs: false\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: usePopperTriggerProps,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    var props = __props;\n\n    var _inject = inject(POPPER_INJECTION_KEY, void 0),\n        triggerRef = _inject.triggerRef;\n\n    useForwardRef(triggerRef);\n    onMounted(function () {\n      watch(function () {\n        return props.virtualRef;\n      }, function (virtualEl) {\n        if (virtualEl) {\n          triggerRef.value = unrefElement(virtualEl);\n        }\n      }, {\n        immediate: true\n      });\n      watch(function () {\n        return triggerRef.value;\n      }, function (el, prevEl) {\n        if (isElement(el)) {\n          ;\n          [\"onMouseenter\", \"onMouseleave\", \"onClick\", \"onKeydown\", \"onFocus\", \"onBlur\", \"onContextmenu\"].forEach(function (eventName) {\n            var _a;\n\n            var handler = props[eventName];\n\n            if (handler) {\n              ;\n              el.addEventListener(eventName.slice(2).toLowerCase(), handler);\n              (_a = prevEl == null ? void 0 : prevEl.removeEventListener) == null ? void 0 : _a.call(prevEl, eventName.slice(2).toLowerCase(), handler);\n            }\n          });\n        }\n      }, {\n        immediate: true\n      });\n    });\n    expose({\n      triggerRef: triggerRef\n    });\n    return function (_ctx, _cache) {\n      return !_ctx.virtualTriggering ? (openBlock(), createBlock(unref(OnlyChild), mergeProps({\n        key: 0\n      }, _ctx.$attrs, {\n        \"aria-describedby\": _ctx.open ? _ctx.id : void 0\n      }), {\n        \"default\": withCtx(function () {\n          return [renderSlot(_ctx.$slots, \"default\")];\n        }),\n        _: 3\n      }, 16, [\"aria-describedby\"])) : createCommentVNode(\"v-if\", true);\n    };\n  }\n}));\n\nvar ElPopperTrigger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/popper/src/trigger.vue\"]]);\n\nexport { ElPopperTrigger as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AAAA;;AAEAA;AAEAC;AACAC,YACA;AAAA;AAAA,OADA,EAEA;AACA;AACAC;AACA;AAEA,OAPA,EAOA;AACAC;AADA,OAPA;AAYAF,YACA;AAAA;AAAA,OADA,EAEA;AACA;AACA;AAAA,WACA,cADA,EAEA,cAFA,EAGA,SAHA,EAIA,WAJA,EAKA,SALA,EAMA,QANA,EAOA,eAPA,EAQAG,OARA,CAQA;AACA;;AACA;;AACA;AAAA;AAIAC,4CACAC,KADA,CACA,CADA,EACAC,WADA,IACAC,OADA;AAIA;AACA;AACA,WArBA;AAuBA;AAAA,OA3BA,EA4BA;AAEAL;AAFA,OA5BA;AAiCA,KA9CA;AAkDAM;AACAP;AADA","names":["useForwardRef","onMounted","watch","triggerRef","immediate","forEach","el","slice","toLowerCase","handler","expose"],"sources":["../../../../../../packages/components/popper/src/trigger.vue"],"sourcesContent":["<template>\n  <el-only-child\n    v-if=\"!virtualTriggering\"\n    v-bind=\"$attrs\"\n    :aria-describedby=\"open ? id : undefined\"\n  >\n    <slot />\n  </el-only-child>\n</template>\n\n<script lang=\"ts\" setup>\nimport { inject, onMounted, watch } from 'vue'\nimport { unrefElement } from '@vueuse/core'\nimport { ElOnlyChild } from '@element-plus/components/slot'\nimport { useForwardRef } from '@element-plus/hooks'\nimport { POPPER_INJECTION_KEY } from '@element-plus/tokens'\nimport { isElement } from '@element-plus/utils'\nimport { usePopperTriggerProps } from './trigger'\n\ndefineOptions({\n  name: 'ElPopperTrigger',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(usePopperTriggerProps)\n\nconst { triggerRef } = inject(POPPER_INJECTION_KEY, undefined)!\n\nuseForwardRef(triggerRef)\n\nonMounted(() => {\n  watch(\n    () => props.virtualRef,\n    (virtualEl) => {\n      if (virtualEl) {\n        triggerRef.value = unrefElement(virtualEl as HTMLElement)\n      }\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  watch(\n    () => triggerRef.value,\n    (el, prevEl) => {\n      if (isElement(el)) {\n        ;[\n          'onMouseenter',\n          'onMouseleave',\n          'onClick',\n          'onKeydown',\n          'onFocus',\n          'onBlur',\n          'onContextmenu',\n        ].forEach((eventName) => {\n          const handler = props[eventName]\n          if (handler) {\n            ;(el as HTMLElement).addEventListener(\n              eventName.slice(2).toLowerCase(),\n              handler\n            )\n            ;(prevEl as HTMLElement)?.removeEventListener?.(\n              eventName.slice(2).toLowerCase(),\n              handler\n            )\n          }\n        })\n      }\n    },\n    {\n      immediate: true,\n    }\n  )\n})\n\ndefineExpose({\n  /**\n   * @description trigger element\n   */\n  triggerRef,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}