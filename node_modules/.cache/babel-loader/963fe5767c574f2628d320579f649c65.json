{"ast":null,"code":"import _typeof from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport { isFunction } from '@vue/shared';\nimport '../../../../utils/index.mjs';\nimport createGrid from '../builders/build-grid.mjs';\nimport { SMART_ALIGNMENT, AUTO_ALIGNMENT, CENTERED_ALIGNMENT, END_ALIGNMENT, START_ALIGNMENT, DEFAULT_DYNAMIC_LIST_ITEM_SIZE } from '../defaults.mjs';\nimport { throwError } from '../../../../utils/error.mjs';\nvar max = Math.max,\n    min = Math.min,\n    floor = Math.floor;\nvar SCOPE = \"ElDynamicSizeGrid\";\nvar ACCESS_SIZER_KEY_MAP = {\n  column: \"columnWidth\",\n  row: \"rowHeight\"\n};\nvar ACCESS_LAST_VISITED_KEY_MAP = {\n  column: \"lastVisitedColumnIndex\",\n  row: \"lastVisitedRowIndex\"\n};\n\nvar getItemFromCache = function getItemFromCache(props, index, gridCache, type) {\n  var _ref = [gridCache[type], props[ACCESS_SIZER_KEY_MAP[type]], gridCache[ACCESS_LAST_VISITED_KEY_MAP[type]]],\n      cachedItems = _ref[0],\n      sizer = _ref[1],\n      lastVisited = _ref[2];\n\n  if (index > lastVisited) {\n    var offset = 0;\n\n    if (lastVisited >= 0) {\n      var item = cachedItems[lastVisited];\n      offset = item.offset + item.size;\n    }\n\n    for (var i = lastVisited + 1; i <= index; i++) {\n      var size = sizer(i);\n      cachedItems[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n\n    gridCache[ACCESS_LAST_VISITED_KEY_MAP[type]] = index;\n  }\n\n  return cachedItems[index];\n};\n\nvar bs = function bs(props, gridCache, low, high, offset, type) {\n  while (low <= high) {\n    var mid = low + floor((high - low) / 2);\n    var currentOffset = getItemFromCache(props, mid, gridCache, type).offset;\n\n    if (currentOffset === offset) {\n      return mid;\n    } else if (currentOffset < offset) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n\n  return max(0, low - 1);\n};\n\nvar es = function es(props, gridCache, idx, offset, type) {\n  var total = type === \"column\" ? props.totalColumn : props.totalRow;\n  var exponent = 1;\n\n  while (idx < total && getItemFromCache(props, idx, gridCache, type).offset < offset) {\n    idx += exponent;\n    exponent *= 2;\n  }\n\n  return bs(props, gridCache, floor(idx / 2), min(idx, total - 1), offset, type);\n};\n\nvar findItem = function findItem(props, gridCache, offset, type) {\n  var _ref2 = [gridCache[type], gridCache[ACCESS_LAST_VISITED_KEY_MAP[type]]],\n      cache = _ref2[0],\n      lastVisitedIndex = _ref2[1];\n  var lastVisitedItemOffset = lastVisitedIndex > 0 ? cache[lastVisitedIndex].offset : 0;\n\n  if (lastVisitedItemOffset >= offset) {\n    return bs(props, gridCache, 0, lastVisitedIndex, offset, type);\n  }\n\n  return es(props, gridCache, max(0, lastVisitedIndex), offset, type);\n};\n\nvar getEstimatedTotalHeight = function getEstimatedTotalHeight(_ref3, _ref4) {\n  var totalRow = _ref3.totalRow;\n  var estimatedRowHeight = _ref4.estimatedRowHeight,\n      lastVisitedRowIndex = _ref4.lastVisitedRowIndex,\n      row = _ref4.row;\n  var sizeOfVisitedRows = 0;\n\n  if (lastVisitedRowIndex >= totalRow) {\n    lastVisitedRowIndex = totalRow - 1;\n  }\n\n  if (lastVisitedRowIndex >= 0) {\n    var item = row[lastVisitedRowIndex];\n    sizeOfVisitedRows = item.offset + item.size;\n  }\n\n  var unvisitedItems = totalRow - lastVisitedRowIndex - 1;\n  var sizeOfUnvisitedItems = unvisitedItems * estimatedRowHeight;\n  return sizeOfVisitedRows + sizeOfUnvisitedItems;\n};\n\nvar getEstimatedTotalWidth = function getEstimatedTotalWidth(_ref5, _ref6) {\n  var totalColumn = _ref5.totalColumn;\n  var column = _ref6.column,\n      estimatedColumnWidth = _ref6.estimatedColumnWidth,\n      lastVisitedColumnIndex = _ref6.lastVisitedColumnIndex;\n  var sizeOfVisitedColumns = 0;\n\n  if (lastVisitedColumnIndex > totalColumn) {\n    lastVisitedColumnIndex = totalColumn - 1;\n  }\n\n  if (lastVisitedColumnIndex >= 0) {\n    var item = column[lastVisitedColumnIndex];\n    sizeOfVisitedColumns = item.offset + item.size;\n  }\n\n  var unvisitedItems = totalColumn - lastVisitedColumnIndex - 1;\n  var sizeOfUnvisitedItems = unvisitedItems * estimatedColumnWidth;\n  return sizeOfVisitedColumns + sizeOfUnvisitedItems;\n};\n\nvar ACCESS_ESTIMATED_SIZE_KEY_MAP = {\n  column: getEstimatedTotalWidth,\n  row: getEstimatedTotalHeight\n};\n\nvar getOffset = function getOffset(props, index, alignment, scrollOffset, cache, type, scrollBarWidth) {\n  var _ref7 = [type === \"row\" ? props.height : props.width, ACCESS_ESTIMATED_SIZE_KEY_MAP[type]],\n      size = _ref7[0],\n      estimatedSizeAssociates = _ref7[1];\n  var item = getItemFromCache(props, index, cache, type);\n  var estimatedSize = estimatedSizeAssociates(props, cache);\n  var maxOffset = max(0, min(estimatedSize - size, item.offset));\n  var minOffset = max(0, item.offset - size + scrollBarWidth + item.size);\n\n  if (alignment === SMART_ALIGNMENT) {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      alignment = AUTO_ALIGNMENT;\n    } else {\n      alignment = CENTERED_ALIGNMENT;\n    }\n  }\n\n  switch (alignment) {\n    case START_ALIGNMENT:\n      {\n        return maxOffset;\n      }\n\n    case END_ALIGNMENT:\n      {\n        return minOffset;\n      }\n\n    case CENTERED_ALIGNMENT:\n      {\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      }\n\n    case AUTO_ALIGNMENT:\n    default:\n      {\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (minOffset > maxOffset) {\n          return minOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n      }\n  }\n};\n\nvar FixedSizeGrid = createGrid({\n  name: \"ElDynamicSizeGrid\",\n  getColumnPosition: function getColumnPosition(props, idx, cache) {\n    var item = getItemFromCache(props, idx, cache, \"column\");\n    return [item.size, item.offset];\n  },\n  getRowPosition: function getRowPosition(props, idx, cache) {\n    var item = getItemFromCache(props, idx, cache, \"row\");\n    return [item.size, item.offset];\n  },\n  getColumnOffset: function getColumnOffset(props, columnIndex, alignment, scrollLeft, cache, scrollBarWidth) {\n    return getOffset(props, columnIndex, alignment, scrollLeft, cache, \"column\", scrollBarWidth);\n  },\n  getRowOffset: function getRowOffset(props, rowIndex, alignment, scrollTop, cache, scrollBarWidth) {\n    return getOffset(props, rowIndex, alignment, scrollTop, cache, \"row\", scrollBarWidth);\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, cache) {\n    return findItem(props, cache, scrollLeft, \"column\");\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, cache) {\n    var item = getItemFromCache(props, startIndex, cache, \"column\");\n    var maxOffset = scrollLeft + props.width;\n    var offset = item.offset + item.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < props.totalColumn - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemFromCache(props, startIndex, cache, \"column\").size;\n    }\n\n    return stopIndex;\n  },\n  getEstimatedTotalHeight: getEstimatedTotalHeight,\n  getEstimatedTotalWidth: getEstimatedTotalWidth,\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, cache) {\n    return findItem(props, cache, scrollTop, \"row\");\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, cache) {\n    var totalRow = props.totalRow,\n        height = props.height;\n    var item = getItemFromCache(props, startIndex, cache, \"row\");\n    var maxOffset = scrollTop + height;\n    var offset = item.size + item.offset;\n    var stopIndex = startIndex;\n\n    while (stopIndex < totalRow - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemFromCache(props, stopIndex, cache, \"row\").size;\n    }\n\n    return stopIndex;\n  },\n  initCache: function initCache(_ref8) {\n    var _ref8$estimatedColumn = _ref8.estimatedColumnWidth,\n        estimatedColumnWidth = _ref8$estimatedColumn === void 0 ? DEFAULT_DYNAMIC_LIST_ITEM_SIZE : _ref8$estimatedColumn,\n        _ref8$estimatedRowHei = _ref8.estimatedRowHeight,\n        estimatedRowHeight = _ref8$estimatedRowHei === void 0 ? DEFAULT_DYNAMIC_LIST_ITEM_SIZE : _ref8$estimatedRowHei;\n    var cache = {\n      column: {},\n      estimatedColumnWidth: estimatedColumnWidth,\n      estimatedRowHeight: estimatedRowHeight,\n      lastVisitedColumnIndex: -1,\n      lastVisitedRowIndex: -1,\n      row: {}\n    };\n    return cache;\n  },\n  clearCache: true,\n  validateProps: function validateProps(_ref9) {\n    var columnWidth = _ref9.columnWidth,\n        rowHeight = _ref9.rowHeight;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!isFunction(columnWidth)) {\n        throwError(SCOPE, \"\\n          \\\"columnWidth\\\" must be passed as function,\\n            instead \".concat(_typeof(columnWidth), \" was given.\\n        \"));\n      }\n\n      if (!isFunction(rowHeight)) {\n        throwError(SCOPE, \"\\n          \\\"columnWidth\\\" must be passed as function,\\n            instead \".concat(_typeof(rowHeight), \" was given.\\n        \"));\n      }\n    }\n  }\n});\nexport { FixedSizeGrid as default };","map":{"version":3,"mappings":"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","names":["max","Math","min","floor","SCOPE","ACCESS_SIZER_KEY_MAP","column","row","ACCESS_LAST_VISITED_KEY_MAP","getItemFromCache","props","index","gridCache","type","cachedItems","sizer","lastVisited","offset","item","size","i","bs","low","high","mid","currentOffset","es","idx","total","totalColumn","totalRow","exponent","findItem","cache","lastVisitedIndex","lastVisitedItemOffset","getEstimatedTotalHeight","estimatedRowHeight","lastVisitedRowIndex","sizeOfVisitedRows","unvisitedItems","sizeOfUnvisitedItems","getEstimatedTotalWidth","estimatedColumnWidth","lastVisitedColumnIndex","sizeOfVisitedColumns","ACCESS_ESTIMATED_SIZE_KEY_MAP","getOffset","alignment","scrollOffset","scrollBarWidth","height","width","estimatedSizeAssociates","estimatedSize","maxOffset","minOffset","SMART_ALIGNMENT","AUTO_ALIGNMENT","CENTERED_ALIGNMENT","START_ALIGNMENT","END_ALIGNMENT","round","FixedSizeGrid","createGrid","name","getColumnPosition","getRowPosition","getColumnOffset","columnIndex","scrollLeft","getRowOffset","rowIndex","scrollTop","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","startIndex","stopIndex","getRowStartIndexForOffset","getRowStopIndexForStartIndex","initCache","DEFAULT_DYNAMIC_LIST_ITEM_SIZE","clearCache","validateProps","columnWidth","rowHeight","process","env","NODE_ENV","isFunction","throwError"],"sources":["../../../../../../../packages/components/virtual-list/src/components/dynamic-size-grid.ts"],"sourcesContent":["import { isFunction } from '@vue/shared'\nimport { throwError } from '@element-plus/utils'\nimport createGrid from '../builders/build-grid'\n\nimport {\n  AUTO_ALIGNMENT,\n  CENTERED_ALIGNMENT,\n  DEFAULT_DYNAMIC_LIST_ITEM_SIZE,\n  END_ALIGNMENT,\n  SMART_ALIGNMENT,\n  START_ALIGNMENT,\n} from '../defaults'\nimport type { VirtualizedGridProps } from '../props'\n\nimport type { Alignment, GridCache, ItemSize, ListItem } from '../types'\n\nconst { max, min, floor } = Math\nconst SCOPE = 'ElDynamicSizeGrid'\n\ntype Props = VirtualizedGridProps\ntype CacheItemType = 'column' | 'row'\n\n// generates props access key via type\nconst ACCESS_SIZER_KEY_MAP = {\n  column: 'columnWidth',\n  row: 'rowHeight',\n}\n\n// generates cache access key via type\nconst ACCESS_LAST_VISITED_KEY_MAP = {\n  column: 'lastVisitedColumnIndex',\n  row: 'lastVisitedRowIndex',\n}\n\nconst getItemFromCache = (\n  props: Props,\n  index: number,\n  gridCache: GridCache,\n  type: CacheItemType\n) => {\n  const [cachedItems, sizer, lastVisited] = [\n    gridCache[type],\n    props[ACCESS_SIZER_KEY_MAP[type]],\n    gridCache[ACCESS_LAST_VISITED_KEY_MAP[type]],\n  ] as [Record<string, ListItem>, ItemSize, number]\n\n  if (index > lastVisited) {\n    let offset = 0\n    if (lastVisited >= 0) {\n      const item = cachedItems[lastVisited]\n      offset = item.offset + item.size\n    }\n\n    for (let i = lastVisited + 1; i <= index; i++) {\n      const size = sizer(i)\n\n      cachedItems[i] = {\n        offset,\n        size,\n      }\n\n      offset += size\n    }\n\n    gridCache[ACCESS_LAST_VISITED_KEY_MAP[type]] = index\n  }\n\n  return cachedItems[index]\n}\n\nconst bs = (\n  props: Props,\n  gridCache: GridCache,\n  low: number,\n  high: number,\n  offset: number,\n  type: CacheItemType\n) => {\n  while (low <= high) {\n    const mid = low + floor((high - low) / 2)\n    const currentOffset = getItemFromCache(props, mid, gridCache, type).offset\n\n    if (currentOffset === offset) {\n      return mid\n    } else if (currentOffset < offset) {\n      low = mid + 1\n    } else {\n      high = mid - 1\n    }\n  }\n\n  return max(0, low - 1)\n}\n\nconst es = (\n  props: Props,\n  gridCache: GridCache,\n  idx: number,\n  offset: number,\n  type: CacheItemType\n) => {\n  const total = type === 'column' ? props.totalColumn : props.totalRow\n  let exponent = 1\n\n  while (\n    idx < total &&\n    getItemFromCache(props, idx, gridCache, type).offset < offset\n  ) {\n    idx += exponent\n    exponent *= 2\n  }\n\n  return bs(props, gridCache, floor(idx / 2), min(idx, total - 1), offset, type)\n}\n\nconst findItem = (\n  props: Props,\n  gridCache: GridCache,\n  offset: number,\n  type: CacheItemType\n) => {\n  const [cache, lastVisitedIndex] = [\n    gridCache[type],\n    gridCache[ACCESS_LAST_VISITED_KEY_MAP[type]],\n  ] as [Record<string, ListItem>, number]\n\n  const lastVisitedItemOffset =\n    lastVisitedIndex > 0 ? cache[lastVisitedIndex].offset : 0\n\n  if (lastVisitedItemOffset >= offset) {\n    return bs(props, gridCache, 0, lastVisitedIndex, offset, type)\n  }\n\n  return es(props, gridCache, max(0, lastVisitedIndex), offset, type)\n}\n\nconst getEstimatedTotalHeight = (\n  { totalRow }: Props,\n  { estimatedRowHeight, lastVisitedRowIndex, row }: GridCache\n) => {\n  let sizeOfVisitedRows = 0\n\n  if (lastVisitedRowIndex >= totalRow) {\n    lastVisitedRowIndex = totalRow - 1\n  }\n\n  if (lastVisitedRowIndex >= 0) {\n    const item = row[lastVisitedRowIndex]\n    sizeOfVisitedRows = item.offset + item.size\n  }\n\n  const unvisitedItems = totalRow - lastVisitedRowIndex - 1\n  const sizeOfUnvisitedItems = unvisitedItems * estimatedRowHeight\n\n  return sizeOfVisitedRows + sizeOfUnvisitedItems\n}\nconst getEstimatedTotalWidth = (\n  { totalColumn }: Props,\n  { column, estimatedColumnWidth, lastVisitedColumnIndex }: GridCache\n) => {\n  let sizeOfVisitedColumns = 0\n\n  if (lastVisitedColumnIndex > totalColumn) {\n    lastVisitedColumnIndex = totalColumn - 1\n  }\n\n  if (lastVisitedColumnIndex >= 0) {\n    const item = column[lastVisitedColumnIndex]\n    sizeOfVisitedColumns = item.offset + item.size\n  }\n\n  const unvisitedItems = totalColumn - lastVisitedColumnIndex - 1\n  const sizeOfUnvisitedItems = unvisitedItems * estimatedColumnWidth\n\n  return sizeOfVisitedColumns + sizeOfUnvisitedItems\n}\n\nconst ACCESS_ESTIMATED_SIZE_KEY_MAP = {\n  column: getEstimatedTotalWidth,\n  row: getEstimatedTotalHeight,\n}\n\nconst getOffset = (\n  props: Props,\n  index: number,\n  alignment: Alignment,\n  scrollOffset: number,\n  cache: GridCache,\n  type: CacheItemType,\n  scrollBarWidth: number\n) => {\n  const [size, estimatedSizeAssociates] = [\n    type === 'row' ? props.height : props.width,\n    ACCESS_ESTIMATED_SIZE_KEY_MAP[type],\n  ] as [number, (props: Props, cache: GridCache) => number]\n  const item = getItemFromCache(props, index, cache, type)\n\n  const estimatedSize = estimatedSizeAssociates(props, cache)\n\n  const maxOffset = max(0, min(estimatedSize - size, item.offset))\n  const minOffset = max(0, item.offset - size + scrollBarWidth + item.size)\n\n  if (alignment === SMART_ALIGNMENT) {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      alignment = AUTO_ALIGNMENT\n    } else {\n      alignment = CENTERED_ALIGNMENT\n    }\n  }\n\n  switch (alignment) {\n    case START_ALIGNMENT: {\n      return maxOffset\n    }\n    case END_ALIGNMENT: {\n      return minOffset\n    }\n    case CENTERED_ALIGNMENT: {\n      return Math.round(minOffset + (maxOffset - minOffset) / 2)\n    }\n    case AUTO_ALIGNMENT:\n    default: {\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset\n      } else if (minOffset > maxOffset) {\n        return minOffset\n      } else if (scrollOffset < minOffset) {\n        return minOffset\n      } else {\n        return maxOffset\n      }\n    }\n  }\n}\n\nconst FixedSizeGrid = createGrid({\n  name: 'ElDynamicSizeGrid',\n  getColumnPosition: (props, idx, cache) => {\n    const item = getItemFromCache(props, idx, cache, 'column')\n    return [item.size, item.offset]\n  },\n\n  getRowPosition: (props, idx, cache) => {\n    const item = getItemFromCache(props, idx, cache, 'row')\n    return [item.size, item.offset]\n  },\n\n  getColumnOffset: (\n    props,\n    columnIndex,\n    alignment,\n    scrollLeft,\n    cache,\n    scrollBarWidth\n  ) =>\n    getOffset(\n      props,\n      columnIndex,\n      alignment,\n      scrollLeft,\n      cache,\n      'column',\n      scrollBarWidth\n    ),\n\n  getRowOffset: (\n    props,\n    rowIndex,\n    alignment,\n    scrollTop,\n    cache,\n    scrollBarWidth: number\n  ) =>\n    getOffset(\n      props,\n      rowIndex,\n      alignment,\n      scrollTop,\n      cache,\n      'row',\n      scrollBarWidth\n    ),\n\n  getColumnStartIndexForOffset: (props, scrollLeft, cache) =>\n    findItem(props, cache, scrollLeft, 'column'),\n\n  getColumnStopIndexForStartIndex: (props, startIndex, scrollLeft, cache) => {\n    const item = getItemFromCache(props, startIndex, cache, 'column')\n\n    const maxOffset = scrollLeft + (props.width as number)\n\n    let offset = item.offset + item.size\n    let stopIndex = startIndex\n    while (stopIndex < props.totalColumn - 1 && offset < maxOffset) {\n      stopIndex++\n      offset += getItemFromCache(props, startIndex, cache, 'column').size\n    }\n    return stopIndex\n  },\n\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n\n  getRowStartIndexForOffset: (props, scrollTop, cache) =>\n    findItem(props, cache, scrollTop, 'row'),\n\n  getRowStopIndexForStartIndex: (props, startIndex, scrollTop, cache) => {\n    const { totalRow, height } = props\n    const item = getItemFromCache(props, startIndex, cache, 'row')\n    const maxOffset = scrollTop + (height as number)\n\n    let offset = item.size + item.offset\n    let stopIndex = startIndex\n\n    while (stopIndex < totalRow - 1 && offset < maxOffset) {\n      stopIndex++\n      offset += getItemFromCache(props, stopIndex, cache, 'row').size\n    }\n\n    return stopIndex\n  },\n\n  initCache: ({\n    estimatedColumnWidth = DEFAULT_DYNAMIC_LIST_ITEM_SIZE,\n    estimatedRowHeight = DEFAULT_DYNAMIC_LIST_ITEM_SIZE,\n  }) => {\n    const cache = {\n      column: {},\n      estimatedColumnWidth,\n      estimatedRowHeight,\n      lastVisitedColumnIndex: -1,\n      lastVisitedRowIndex: -1,\n      row: {},\n    } as GridCache\n\n    // TODO: expose methods.\n    return cache\n  },\n\n  clearCache: true,\n\n  validateProps: ({ columnWidth, rowHeight }) => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!isFunction(columnWidth)) {\n        throwError(\n          SCOPE,\n          `\n          \"columnWidth\" must be passed as function,\n            instead ${typeof columnWidth} was given.\n        `\n        )\n      }\n\n      if (!isFunction(rowHeight)) {\n        throwError(\n          SCOPE,\n          `\n          \"columnWidth\" must be passed as function,\n            instead ${typeof rowHeight} was given.\n        `\n        )\n      }\n    }\n  },\n})\n\nexport default FixedSizeGrid\n"]},"metadata":{},"sourceType":"module"}