{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport { defineComponent, getCurrentInstance, ref, computed, unref, provide, toRef, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, createSlots, withCtx, renderSlot, createElementVNode, createBlock, mergeProps, createCommentVNode } from 'vue';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../focus-trap/index.mjs';\nimport '../../roving-focus-group/index.mjs';\nimport '../../../utils/index.mjs';\nimport { ArrowDown } from '@element-plus/icons-vue';\nimport '../../../hooks/index.mjs';\nimport { ElCollection, dropdownProps } from './dropdown.mjs';\nimport { DROPDOWN_INJECTION_KEY } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap.mjs';\nimport ElRovingFocusGroup from '../../roving-focus-group/src/roving-focus-group2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { addUnit } from '../../../utils/vue/style.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nvar ElButtonGroup = ElButton.ButtonGroup;\n\nvar _sfc_main = defineComponent({\n  name: \"ElDropdown\",\n  components: {\n    ElButton: ElButton,\n    ElFocusTrap: ElFocusTrap,\n    ElButtonGroup: ElButtonGroup,\n    ElScrollbar: ElScrollbar,\n    ElDropdownCollection: ElCollection,\n    ElTooltip: ElTooltip,\n    ElRovingFocusGroup: ElRovingFocusGroup,\n    ElIcon: ElIcon,\n    ArrowDown: ArrowDown\n  },\n  props: dropdownProps,\n  emits: [\"visible-change\", \"click\", \"command\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n\n    var _instance = getCurrentInstance();\n\n    var ns = useNamespace(\"dropdown\");\n    var triggeringElementRef = ref();\n    var referenceElementRef = ref();\n    var popperRef = ref(null);\n    var contentRef = ref(null);\n    var scrollbar = ref(null);\n    var currentTabId = ref(null);\n    var isUsingKeyboard = ref(false);\n    var wrapStyle = computed(function () {\n      return {\n        maxHeight: addUnit(props.maxHeight)\n      };\n    });\n    var dropdownTriggerKls = computed(function () {\n      return [ns.m(dropdownSize.value)];\n    });\n\n    function handleClick() {\n      handleClose();\n    }\n\n    function handleClose() {\n      var _a;\n\n      (_a = popperRef.value) == null ? void 0 : _a.onClose();\n    }\n\n    function handleOpen() {\n      var _a;\n\n      (_a = popperRef.value) == null ? void 0 : _a.onOpen();\n    }\n\n    var dropdownSize = useSize();\n\n    function commandHandler() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      emit.apply(void 0, [\"command\"].concat(args));\n    }\n\n    function onItemEnter() {}\n\n    function onItemLeave() {\n      var contentEl = unref(contentRef);\n      contentEl == null ? void 0 : contentEl.focus();\n      currentTabId.value = null;\n    }\n\n    function handleCurrentTabIdChange(id) {\n      currentTabId.value = id;\n    }\n\n    function handleEntryFocus(e) {\n      if (!isUsingKeyboard.value) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n      }\n    }\n\n    provide(DROPDOWN_INJECTION_KEY, {\n      contentRef: contentRef,\n      isUsingKeyboard: isUsingKeyboard,\n      onItemEnter: onItemEnter,\n      onItemLeave: onItemLeave\n    });\n    provide(\"elDropdown\", {\n      instance: _instance,\n      dropdownSize: dropdownSize,\n      handleClick: handleClick,\n      commandHandler: commandHandler,\n      trigger: toRef(props, \"trigger\"),\n      hideOnClick: toRef(props, \"hideOnClick\")\n    });\n\n    var onMountOnFocus = function onMountOnFocus(e) {\n      var _a, _b;\n\n      e.preventDefault();\n      (_b = (_a = contentRef.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a, {\n        preventScroll: true\n      });\n    };\n\n    var handlerMainButtonClick = function handlerMainButtonClick(event) {\n      emit(\"click\", event);\n    };\n\n    return {\n      ns: ns,\n      scrollbar: scrollbar,\n      wrapStyle: wrapStyle,\n      dropdownTriggerKls: dropdownTriggerKls,\n      dropdownSize: dropdownSize,\n      currentTabId: currentTabId,\n      handleCurrentTabIdChange: handleCurrentTabIdChange,\n      handlerMainButtonClick: handlerMainButtonClick,\n      handleEntryFocus: handleEntryFocus,\n      handleClose: handleClose,\n      handleOpen: handleOpen,\n      onMountOnFocus: onMountOnFocus,\n      popperRef: popperRef,\n      triggeringElementRef: triggeringElementRef,\n      referenceElementRef: referenceElementRef\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n\n  var _component_el_dropdown_collection = resolveComponent(\"el-dropdown-collection\");\n\n  var _component_el_roving_focus_group = resolveComponent(\"el-roving-focus-group\");\n\n  var _component_el_focus_trap = resolveComponent(\"el-focus-trap\");\n\n  var _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n\n  var _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  var _component_el_button = resolveComponent(\"el-button\");\n\n  var _component_arrow_down = resolveComponent(\"arrow-down\");\n\n  var _component_el_icon = resolveComponent(\"el-icon\");\n\n  var _component_el_button_group = resolveComponent(\"el-button-group\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    \"class\": normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"disabled\", _ctx.disabled)])\n  }, [createVNode(_component_el_tooltip, {\n    ref: \"popperRef\",\n    effect: _ctx.effect,\n    \"fallback-placements\": [\"bottom\", \"top\"],\n    \"popper-options\": _ctx.popperOptions,\n    \"gpu-acceleration\": false,\n    \"hide-after\": _ctx.trigger === \"hover\" ? _ctx.hideTimeout : 0,\n    \"manual-mode\": true,\n    placement: _ctx.placement,\n    \"popper-class\": [_ctx.ns.e(\"popper\"), _ctx.popperClass],\n    \"reference-element\": (_a = _ctx.referenceElementRef) == null ? void 0 : _a.$el,\n    trigger: _ctx.trigger,\n    \"show-after\": _ctx.trigger === \"hover\" ? _ctx.showTimeout : 0,\n    \"stop-popper-mouse-event\": false,\n    \"virtual-ref\": _ctx.triggeringElementRef,\n    \"virtual-triggering\": _ctx.splitButton,\n    disabled: _ctx.disabled,\n    \"append-to-body\": \"\",\n    pure: \"\",\n    transition: \"\".concat(_ctx.ns.namespace.value, \"-zoom-in-top\"),\n    persistent: \"\",\n    onShow: _cache[0] || (_cache[0] = function ($event) {\n      return _ctx.$emit(\"visible-change\", true);\n    }),\n    onHide: _cache[1] || (_cache[1] = function ($event) {\n      return _ctx.$emit(\"visible-change\", false);\n    })\n  }, createSlots({\n    content: withCtx(function () {\n      return [createVNode(_component_el_scrollbar, {\n        ref: \"scrollbar\",\n        \"wrap-style\": _ctx.wrapStyle,\n        tag: \"div\",\n        \"view-class\": _ctx.ns.e(\"list\")\n      }, {\n        \"default\": withCtx(function () {\n          return [createVNode(_component_el_focus_trap, {\n            trapped: \"\",\n            onMountOnFocus: _ctx.onMountOnFocus\n          }, {\n            \"default\": withCtx(function () {\n              return [createVNode(_component_el_roving_focus_group, {\n                loop: _ctx.loop,\n                \"current-tab-id\": _ctx.currentTabId,\n                orientation: \"horizontal\",\n                onCurrentTabIdChange: _ctx.handleCurrentTabIdChange,\n                onEntryFocus: _ctx.handleEntryFocus\n              }, {\n                \"default\": withCtx(function () {\n                  return [createVNode(_component_el_dropdown_collection, null, {\n                    \"default\": withCtx(function () {\n                      return [renderSlot(_ctx.$slots, \"dropdown\")];\n                    }),\n                    _: 3\n                  })];\n                }),\n                _: 3\n              }, 8, [\"loop\", \"current-tab-id\", \"onCurrentTabIdChange\", \"onEntryFocus\"])];\n            }),\n            _: 3\n          }, 8, [\"onMountOnFocus\"])];\n        }),\n        _: 3\n      }, 8, [\"wrap-style\", \"view-class\"])];\n    }),\n    _: 2\n  }, [!_ctx.splitButton ? {\n    name: \"default\",\n    fn: withCtx(function () {\n      return [createElementVNode(\"div\", {\n        \"class\": normalizeClass(_ctx.dropdownTriggerKls)\n      }, [renderSlot(_ctx.$slots, \"default\")], 2)];\n    })\n  } : void 0]), 1032, [\"effect\", \"popper-options\", \"hide-after\", \"placement\", \"popper-class\", \"reference-element\", \"trigger\", \"show-after\", \"virtual-ref\", \"virtual-triggering\", \"disabled\", \"transition\"]), _ctx.splitButton ? (openBlock(), createBlock(_component_el_button_group, {\n    key: 0\n  }, {\n    \"default\": withCtx(function () {\n      return [createVNode(_component_el_button, mergeProps({\n        ref: \"referenceElementRef\"\n      }, _ctx.buttonProps, {\n        size: _ctx.dropdownSize,\n        type: _ctx.type,\n        disabled: _ctx.disabled,\n        onClick: _ctx.handlerMainButtonClick\n      }), {\n        \"default\": withCtx(function () {\n          return [renderSlot(_ctx.$slots, \"default\")];\n        }),\n        _: 3\n      }, 16, [\"size\", \"type\", \"disabled\", \"onClick\"]), createVNode(_component_el_button, mergeProps({\n        ref: \"triggeringElementRef\"\n      }, _ctx.buttonProps, {\n        size: _ctx.dropdownSize,\n        type: _ctx.type,\n        \"class\": _ctx.ns.e(\"caret-button\"),\n        disabled: _ctx.disabled\n      }), {\n        \"default\": withCtx(function () {\n          return [createVNode(_component_el_icon, {\n            \"class\": normalizeClass(_ctx.ns.e(\"icon\"))\n          }, {\n            \"default\": withCtx(function () {\n              return [createVNode(_component_arrow_down)];\n            }),\n            _: 1\n          }, 8, [\"class\"])];\n        }),\n        _: 1\n      }, 16, [\"size\", \"type\", \"class\", \"disabled\"])];\n    }),\n    _: 3\n  })) : createCommentVNode(\"v-if\", true)], 2);\n}\n\nvar Dropdown = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown.vue\"]]);\n\nexport { Dropdown as default };","map":{"version":3,"mappings":"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","names":["ElButtonGroup","ElButton","ButtonGroup","_sfc_main","defineComponent","name","components","ElFocusTrap","ElScrollbar","ElDropdownCollection","ElTooltip","ElRovingFocusGroup","ElIcon","ArrowDown","props","emits","setup","emit","_instance","getCurrentInstance","useNamespace","triggeringElementRef","ref","referenceElementRef","computed","maxHeight","addUnit","ns","m","dropdownSize","value","handleClose","_a","useSize","args","contentEl","currentTabId","handleEntryFocus","e","isUsingKeyboard","provide","contentRef","onItemEnter","onItemLeave","instance","handleClick","commandHandler","trigger","hideOnClick","onMountOnFocus","_b","preventScroll","scrollbar","wrapStyle","dropdownTriggerKls","handleCurrentTabIdChange","handlerMainButtonClick","handleOpen","popperRef","_component_el_button_group","_openBlock","_normalizeClass","_createVNode","effect","_ctx","placement","disabled","pure","transition","persistent","onShow","onHide","_createSlots","content","tag","trapped","_withCtx","loop","onCurrentTabIdChange","onEntryFocus","_","key","size","onClick","_renderSlot"],"sources":["../../../../../../packages/components/dropdown/src/dropdown.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b(), ns.is('disabled', disabled)]\">\n    <el-tooltip\n      ref=\"popperRef\"\n      :effect=\"effect\"\n      :fallback-placements=\"['bottom', 'top']\"\n      :popper-options=\"popperOptions\"\n      :gpu-acceleration=\"false\"\n      :hide-after=\"trigger === 'hover' ? hideTimeout : 0\"\n      :manual-mode=\"true\"\n      :placement=\"placement\"\n      :popper-class=\"[ns.e('popper'), popperClass]\"\n      :reference-element=\"referenceElementRef?.$el\"\n      :trigger=\"trigger\"\n      :show-after=\"trigger === 'hover' ? showTimeout : 0\"\n      :stop-popper-mouse-event=\"false\"\n      :virtual-ref=\"triggeringElementRef\"\n      :virtual-triggering=\"splitButton\"\n      :disabled=\"disabled\"\n      append-to-body\n      pure\n      :transition=\"`${ns.namespace.value}-zoom-in-top`\"\n      persistent\n      @show=\"$emit('visible-change', true)\"\n      @hide=\"$emit('visible-change', false)\"\n    >\n      <template #content>\n        <el-scrollbar\n          ref=\"scrollbar\"\n          :wrap-style=\"wrapStyle\"\n          tag=\"div\"\n          :view-class=\"ns.e('list')\"\n        >\n          <el-focus-trap trapped @mount-on-focus=\"onMountOnFocus\">\n            <el-roving-focus-group\n              :loop=\"loop\"\n              :current-tab-id=\"currentTabId\"\n              orientation=\"horizontal\"\n              @current-tab-id-change=\"handleCurrentTabIdChange\"\n              @entry-focus=\"handleEntryFocus\"\n            >\n              <el-dropdown-collection>\n                <slot name=\"dropdown\" />\n              </el-dropdown-collection>\n            </el-roving-focus-group>\n          </el-focus-trap>\n        </el-scrollbar>\n      </template>\n      <template v-if=\"!splitButton\" #default>\n        <div :class=\"dropdownTriggerKls\">\n          <slot name=\"default\" />\n        </div>\n      </template>\n    </el-tooltip>\n    <template v-if=\"splitButton\">\n      <el-button-group>\n        <el-button\n          ref=\"referenceElementRef\"\n          v-bind=\"buttonProps\"\n          :size=\"dropdownSize\"\n          :type=\"type\"\n          :disabled=\"disabled\"\n          @click=\"handlerMainButtonClick\"\n        >\n          <slot name=\"default\" />\n        </el-button>\n        <el-button\n          ref=\"triggeringElementRef\"\n          v-bind=\"buttonProps\"\n          :size=\"dropdownSize\"\n          :type=\"type\"\n          :class=\"ns.e('caret-button')\"\n          :disabled=\"disabled\"\n        >\n          <el-icon :class=\"ns.e('icon')\"><arrow-down /></el-icon>\n        </el-button>\n      </el-button-group>\n    </template>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  provide,\n  ref,\n  toRef,\n  unref,\n} from 'vue'\nimport ElButton from '@element-plus/components/button'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElIcon from '@element-plus/components/icon'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport ElRovingFocusGroup from '@element-plus/components/roving-focus-group'\nimport { addUnit } from '@element-plus/utils'\nimport { ArrowDown } from '@element-plus/icons-vue'\nimport { useNamespace, useSize } from '@element-plus/hooks'\nimport { ElCollection as ElDropdownCollection, dropdownProps } from './dropdown'\nimport { DROPDOWN_INJECTION_KEY } from './tokens'\n\nimport type { CSSProperties } from 'vue'\n\nconst { ButtonGroup: ElButtonGroup } = ElButton\n\nexport default defineComponent({\n  name: 'ElDropdown',\n  components: {\n    ElButton,\n    ElFocusTrap,\n    ElButtonGroup,\n    ElScrollbar,\n    ElDropdownCollection,\n    ElTooltip,\n    ElRovingFocusGroup,\n    ElIcon,\n    ArrowDown,\n  },\n  props: dropdownProps,\n  emits: ['visible-change', 'click', 'command'],\n  setup(props, { emit }) {\n    const _instance = getCurrentInstance()\n    const ns = useNamespace('dropdown')\n\n    const triggeringElementRef = ref()\n    const referenceElementRef = ref()\n    const popperRef = ref<InstanceType<typeof ElTooltip> | null>(null)\n    const contentRef = ref<HTMLElement | null>(null)\n    const scrollbar = ref(null)\n    const currentTabId = ref<string | null>(null)\n    const isUsingKeyboard = ref(false)\n\n    const wrapStyle = computed<CSSProperties>(() => ({\n      maxHeight: addUnit(props.maxHeight),\n    }))\n    const dropdownTriggerKls = computed(() => [ns.m(dropdownSize.value)])\n\n    function handleClick() {\n      handleClose()\n    }\n\n    function handleClose() {\n      popperRef.value?.onClose()\n    }\n\n    function handleOpen() {\n      popperRef.value?.onOpen()\n    }\n\n    const dropdownSize = useSize()\n\n    function commandHandler(...args: any[]) {\n      emit('command', ...args)\n    }\n\n    function onItemEnter() {\n      // NOOP for now\n    }\n\n    function onItemLeave() {\n      const contentEl = unref(contentRef)\n\n      contentEl?.focus()\n      currentTabId.value = null\n    }\n\n    function handleCurrentTabIdChange(id: string) {\n      currentTabId.value = id\n    }\n\n    function handleEntryFocus(e: Event) {\n      if (!isUsingKeyboard.value) {\n        e.preventDefault()\n        e.stopImmediatePropagation()\n      }\n    }\n\n    provide(DROPDOWN_INJECTION_KEY, {\n      contentRef,\n      isUsingKeyboard,\n      onItemEnter,\n      onItemLeave,\n    })\n\n    provide('elDropdown', {\n      instance: _instance,\n      dropdownSize,\n      handleClick,\n      commandHandler,\n      trigger: toRef(props, 'trigger'),\n      hideOnClick: toRef(props, 'hideOnClick'),\n    })\n\n    const onMountOnFocus = (e: Event) => {\n      e.preventDefault()\n      contentRef.value?.focus?.({\n        preventScroll: true,\n      })\n    }\n\n    const handlerMainButtonClick = (event: MouseEvent) => {\n      emit('click', event)\n    }\n\n    return {\n      ns,\n      scrollbar,\n      wrapStyle,\n      dropdownTriggerKls,\n      dropdownSize,\n      currentTabId,\n      handleCurrentTabIdChange,\n      handlerMainButtonClick,\n      handleEntryFocus,\n      handleClose,\n      handleOpen,\n      onMountOnFocus,\n      popperRef,\n      triggeringElementRef,\n      referenceElementRef,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}