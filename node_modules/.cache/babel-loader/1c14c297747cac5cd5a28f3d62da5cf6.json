{"ast":null,"code":"import _toConsumableArray from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _tabsEmits;\n\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport { Fragment, defineComponent, getCurrentInstance, computed, ref, onUpdated, onMounted, watch, nextTick, provide, createVNode, renderSlot } from 'vue';\nimport { isString, isFunction, isPromise, NOOP } from '@vue/shared';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Plus } from '@element-plus/icons-vue';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport TabNav from './tab-nav.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props.mjs';\nimport { isNumber } from '@vueuse/core';\nimport { UPDATE_MODEL_EVENT, INPUT_EVENT } from '../../../constants/event.mjs';\nimport { useDeprecated } from '../../../hooks/use-deprecated/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { tabsRootContextKey } from '../../../tokens/tabs.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nvar tabsProps = buildProps({\n  type: {\n    type: String,\n    values: [\"card\", \"border-card\", \"\"],\n    \"default\": \"\"\n  },\n  activeName: {\n    type: [String, Number],\n    \"default\": \"\"\n  },\n  closable: Boolean,\n  addable: Boolean,\n  modelValue: {\n    type: [String, Number],\n    \"default\": \"\"\n  },\n  editable: Boolean,\n  tabPosition: {\n    type: String,\n    values: [\"top\", \"right\", \"bottom\", \"left\"],\n    \"default\": \"top\"\n  },\n  beforeLeave: {\n    type: definePropType(Function),\n    \"default\": function _default() {\n      return true;\n    }\n  },\n  stretch: Boolean\n});\n\nvar isPanelName = function isPanelName(value) {\n  return isString(value) || isNumber(value);\n};\n\nvar tabsEmits = (_tabsEmits = {}, _defineProperty(_tabsEmits, UPDATE_MODEL_EVENT, function (name) {\n  return isPanelName(name);\n}), _defineProperty(_tabsEmits, INPUT_EVENT, function (name) {\n  return isPanelName(name);\n}), _defineProperty(_tabsEmits, \"tab-click\", function tabClick(pane, ev) {\n  return ev instanceof Event;\n}), _defineProperty(_tabsEmits, \"tab-change\", function tabChange(name) {\n  return isPanelName(name);\n}), _defineProperty(_tabsEmits, \"edit\", function edit(paneName, action) {\n  return [\"remove\", \"add\"].includes(action);\n}), _defineProperty(_tabsEmits, \"tab-remove\", function tabRemove(name) {\n  return isPanelName(name);\n}), _defineProperty(_tabsEmits, \"tab-add\", function tabAdd() {\n  return true;\n}), _tabsEmits);\n\nvar getPaneInstanceFromSlot = function getPaneInstanceFromSlot(vnode) {\n  var paneInstanceList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var children = vnode.children || [];\n  Array.from(children).forEach(function (node) {\n    var type = node.type;\n    type = type.name || type;\n\n    if (type === \"ElTabPane\" && node.component) {\n      paneInstanceList.push(node.component);\n    } else if (type === Fragment || type === \"template\") {\n      getPaneInstanceFromSlot(node, paneInstanceList);\n    }\n  });\n  return paneInstanceList;\n};\n\nvar Tabs = defineComponent({\n  name: \"ElTabs\",\n  props: tabsProps,\n  emits: tabsEmits,\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots,\n        expose = _ref.expose;\n    var instance = getCurrentInstance();\n    useDeprecated({\n      scope: \"el-tabs\",\n      type: \"Event\",\n      from: \"input\",\n      replacement: \"tab-change\",\n      version: \"2.5.0\",\n      ref: \"https://element-plus.org/en-US/component/tabs.html#tabs-events\"\n    }, computed(function () {\n      var _a;\n\n      return isFunction((_a = instance.vnode.props) == null ? void 0 : _a.onInput);\n    }));\n    var ns = useNamespace(\"tabs\");\n    var nav$ = ref();\n    var panes = ref([]);\n    var currentName = ref(props.modelValue || props.activeName || \"0\");\n    var paneStatesMap = {};\n\n    var updatePaneInstances = function updatePaneInstances() {\n      var isForceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (slots[\"default\"]) {\n        var children = instance.subTree.children;\n        var content = Array.from(children).find(function (_ref2) {\n          var props2 = _ref2.props;\n          return (props2 == null ? void 0 : props2[\"class\"]) === ns.e(\"content\");\n        });\n        if (!content) return;\n        var paneInstanceList = getPaneInstanceFromSlot(content).map(function (paneComponent) {\n          return paneStatesMap[paneComponent.uid];\n        });\n        var panesChanged = !(paneInstanceList.length === panes.value.length && paneInstanceList.every(function (pane, index) {\n          return pane.uid === panes.value[index].uid;\n        }));\n\n        if (isForceUpdate || panesChanged) {\n          panes.value = paneInstanceList;\n        }\n      } else if (panes.value.length !== 0) {\n        panes.value = [];\n      }\n    };\n\n    var changeCurrentName = function changeCurrentName(value) {\n      currentName.value = value;\n      emit(INPUT_EVENT, value);\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"tab-change\", value);\n    };\n\n    var setCurrentName = function setCurrentName(value) {\n      var _a;\n\n      if (currentName.value === value) return;\n      var canLeave = (_a = props.beforeLeave) == null ? void 0 : _a.call(props, value, currentName.value);\n\n      if (isPromise(canLeave)) {\n        canLeave.then(function () {\n          var _a2, _b;\n\n          changeCurrentName(value);\n          (_b = (_a2 = nav$.value) == null ? void 0 : _a2.removeFocus) == null ? void 0 : _b.call(_a2);\n        }, NOOP);\n      } else if (canLeave !== false) {\n        changeCurrentName(value);\n      }\n    };\n\n    var handleTabClick = function handleTabClick(tab, tabName, event) {\n      if (tab.props.disabled) return;\n      setCurrentName(tabName);\n      emit(\"tab-click\", tab, event);\n    };\n\n    var handleTabRemove = function handleTabRemove(pane, ev) {\n      if (pane.props.disabled) return;\n      ev.stopPropagation();\n      emit(\"edit\", pane.props.name, \"remove\");\n      emit(\"tab-remove\", pane.props.name);\n    };\n\n    var handleTabAdd = function handleTabAdd() {\n      emit(\"edit\", void 0, \"add\");\n      emit(\"tab-add\");\n    };\n\n    onUpdated(function () {\n      return updatePaneInstances();\n    });\n    onMounted(function () {\n      return updatePaneInstances();\n    });\n    watch(function () {\n      return props.activeName;\n    }, function (modelValue) {\n      return setCurrentName(modelValue);\n    });\n    watch(function () {\n      return props.modelValue;\n    }, function (modelValue) {\n      return setCurrentName(modelValue);\n    });\n    watch(currentName, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var _a, _b;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              updatePaneInstances(true);\n              _context.next = 3;\n              return nextTick();\n\n            case 3:\n              _context.next = 5;\n              return (_a = nav$.value) == null ? void 0 : _a.$nextTick();\n\n            case 5:\n              (_b = nav$.value) == null ? void 0 : _b.scrollToActiveTab();\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n    provide(tabsRootContextKey, {\n      props: props,\n      currentName: currentName,\n      updatePaneState: function updatePaneState(pane) {\n        return paneStatesMap[pane.uid] = pane;\n      }\n    });\n    expose({\n      currentName: currentName\n    });\n    return function () {\n      var _ref4;\n\n      var newButton = props.editable || props.addable ? createVNode(\"span\", {\n        \"class\": ns.e(\"new-tab\"),\n        \"tabindex\": \"0\",\n        \"onClick\": handleTabAdd,\n        \"onKeydown\": function onKeydown(ev) {\n          if (ev.code === EVENT_CODE.enter) handleTabAdd();\n        }\n      }, [createVNode(ElIcon, {\n        \"class\": ns.is(\"icon-plus\")\n      }, {\n        \"default\": function _default() {\n          return [createVNode(Plus, null, null)];\n        }\n      })]) : null;\n      var header = createVNode(\"div\", {\n        \"class\": [ns.e(\"header\"), ns.is(props.tabPosition)]\n      }, [newButton, createVNode(TabNav, {\n        \"ref\": nav$,\n        \"currentName\": currentName.value,\n        \"editable\": props.editable,\n        \"type\": props.type,\n        \"panes\": panes.value,\n        \"stretch\": props.stretch,\n        \"onTabClick\": handleTabClick,\n        \"onTabRemove\": handleTabRemove\n      }, null)]);\n      var panels = createVNode(\"div\", {\n        \"class\": ns.e(\"content\")\n      }, [renderSlot(slots, \"default\")]);\n      return createVNode(\"div\", {\n        \"class\": [ns.b(), ns.m(props.tabPosition), (_ref4 = {}, _defineProperty(_ref4, ns.m(\"card\"), props.type === \"card\"), _defineProperty(_ref4, ns.m(\"border-card\"), props.type === \"border-card\"), _ref4)]\n      }, _toConsumableArray(props.tabPosition !== \"bottom\" ? [header, panels] : [panels, header]));\n    };\n  }\n});\nexport { Tabs as default, tabsEmits, tabsProps };","map":{"version":3,"mappings":"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","names":["tabsProps","buildProps","type","String","values","default","activeName","Number","closable","Boolean","addable","modelValue","editable","tabPosition","beforeLeave","definePropType","Function","stretch","INPUT_EVENT","isPanelName","name","Event","edit","getPaneInstanceFromSlot","paneInstanceList","vnode","children","Array","forEach","node","component","props","emits","setup","emit","expose","instance","from","replacement","ref","getCurrentInstance","useDeprecated","scope","isFunction","ns","useNamespace","version","currentName","computed","nav$","content","find","paneStatesMap","slots","map","panes","panesChanged","isForceUpdate","value","changeCurrentName","isPromise","canLeave","setCurrentName","tabName","event","tab","disabled","pane","NOOP","ev","handleTabClick","onMounted","watch","handleTabRemove","nextTick","updatePaneInstances","e","handleTabAdd","provide","tabsRootContextKey","updatePaneState","header","newButton","_createVNode"],"sources":["../../../../../../packages/components/tabs/src/tabs.tsx"],"sourcesContent":["import {\n  Fragment,\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  nextTick,\n  onMounted,\n  onUpdated,\n  provide,\n  ref,\n  renderSlot,\n  watch,\n} from 'vue'\nimport { NOOP } from '@vue/shared'\nimport {\n  buildProps,\n  definePropType,\n  isFunction,\n  isNumber,\n  isPromise,\n  isString,\n} from '@element-plus/utils'\nimport {\n  EVENT_CODE,\n  INPUT_EVENT,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport ElIcon from '@element-plus/components/icon'\nimport { Plus } from '@element-plus/icons-vue'\nimport { tabsRootContextKey } from '@element-plus/tokens'\nimport { useDeprecated, useNamespace } from '@element-plus/hooks'\nimport TabNav from './tab-nav'\nimport type { TabNavInstance } from './tab-nav'\nimport type { TabsPaneContext } from '@element-plus/tokens'\n\nimport type {\n  Component,\n  ComponentInternalInstance,\n  ExtractPropTypes,\n  Ref,\n  VNode,\n} from 'vue'\nimport type { Awaitable } from '@element-plus/utils'\n\nexport type TabPanelName = string | number\n\nexport const tabsProps = buildProps({\n  type: {\n    type: String,\n    values: ['card', 'border-card', ''],\n    default: '',\n  },\n  activeName: {\n    type: [String, Number],\n    default: '',\n  },\n  closable: Boolean,\n  addable: Boolean,\n  modelValue: {\n    type: [String, Number],\n    default: '',\n  },\n  editable: Boolean,\n  tabPosition: {\n    type: String,\n    values: ['top', 'right', 'bottom', 'left'],\n    default: 'top',\n  },\n  beforeLeave: {\n    type: definePropType<\n      (\n        newName: TabPanelName,\n        oldName: TabPanelName\n      ) => Awaitable<void | boolean>\n    >(Function),\n    default: () => true,\n  },\n  stretch: Boolean,\n} as const)\nexport type TabsProps = ExtractPropTypes<typeof tabsProps>\n\nconst isPanelName = (value: unknown): value is string | number =>\n  isString(value) || isNumber(value)\n\nexport const tabsEmits = {\n  [UPDATE_MODEL_EVENT]: (name: TabPanelName) => isPanelName(name),\n  /** @deprecated use `tab-change` instead */\n  [INPUT_EVENT]: (name: TabPanelName) => isPanelName(name),\n  'tab-click': (pane: TabsPaneContext, ev: Event) => ev instanceof Event,\n  'tab-change': (name: TabPanelName) => isPanelName(name),\n  edit: (paneName: TabPanelName | undefined, action: 'remove' | 'add') =>\n    ['remove', 'add'].includes(action),\n  'tab-remove': (name: TabPanelName) => isPanelName(name),\n  'tab-add': () => true,\n}\nexport type TabsEmits = typeof tabsEmits\n\nconst getPaneInstanceFromSlot = (\n  vnode: VNode,\n  paneInstanceList: ComponentInternalInstance[] = []\n) => {\n  const children = (vnode.children || []) as ArrayLike<VNode>\n  Array.from(children).forEach((node) => {\n    let type = node.type\n    type = (type as Component).name || type\n    if (type === 'ElTabPane' && node.component) {\n      paneInstanceList.push(node.component)\n    } else if (type === Fragment || type === 'template') {\n      getPaneInstanceFromSlot(node, paneInstanceList)\n    }\n  })\n  return paneInstanceList\n}\n\nexport default defineComponent({\n  name: 'ElTabs',\n\n  props: tabsProps,\n  emits: tabsEmits,\n\n  setup(props, { emit, slots, expose }) {\n    const instance = getCurrentInstance()!\n\n    useDeprecated(\n      {\n        scope: 'el-tabs',\n        type: 'Event',\n        from: 'input',\n        replacement: 'tab-change',\n        version: '2.5.0',\n        ref: 'https://element-plus.org/en-US/component/tabs.html#tabs-events',\n      },\n      computed(() => isFunction(instance.vnode.props?.onInput))\n    )\n\n    const ns = useNamespace('tabs')\n\n    const nav$ = ref<TabNavInstance>()\n    const panes: Ref<TabsPaneContext[]> = ref([])\n    const currentName = ref(props.modelValue || props.activeName || '0')\n\n    const paneStatesMap: Record<number, TabsPaneContext> = {}\n\n    const updatePaneInstances = (isForceUpdate = false) => {\n      if (slots.default) {\n        const children = instance.subTree.children as ArrayLike<VNode>\n        const content = Array.from(children).find(\n          ({ props }) => props?.class === ns.e('content')\n        )\n        if (!content) return\n\n        const paneInstanceList: TabsPaneContext[] = getPaneInstanceFromSlot(\n          content\n        ).map((paneComponent) => paneStatesMap[paneComponent.uid])\n\n        const panesChanged = !(\n          paneInstanceList.length === panes.value.length &&\n          paneInstanceList.every(\n            (pane, index) => pane.uid === panes.value[index].uid\n          )\n        )\n\n        if (isForceUpdate || panesChanged) {\n          panes.value = paneInstanceList\n        }\n      } else if (panes.value.length !== 0) {\n        panes.value = []\n      }\n    }\n\n    const changeCurrentName = (value: TabPanelName) => {\n      currentName.value = value\n      /** @deprecated use `tab-change` instead */\n      emit(INPUT_EVENT, value)\n      emit(UPDATE_MODEL_EVENT, value)\n      emit('tab-change', value)\n    }\n\n    const setCurrentName = (value: TabPanelName) => {\n      // should do nothing.\n      if (currentName.value === value) return\n\n      const canLeave = props.beforeLeave?.(value, currentName.value)\n      if (isPromise(canLeave)) {\n        canLeave.then(\n          () => {\n            changeCurrentName(value)\n\n            // call exposed function, Vue doesn't support expose in typescript yet.\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-expect-error\n            nav$.value?.removeFocus?.()\n          },\n          // ignore promise rejection in `before-leave` hook\n          NOOP\n        )\n      } else if (canLeave !== false) {\n        changeCurrentName(value)\n      }\n    }\n\n    const handleTabClick = (\n      tab: TabsPaneContext,\n      tabName: TabPanelName,\n      event: Event\n    ) => {\n      if (tab.props.disabled) return\n      setCurrentName(tabName)\n      emit('tab-click', tab, event)\n    }\n\n    const handleTabRemove = (pane: TabsPaneContext, ev: Event) => {\n      if (pane.props.disabled) return\n      ev.stopPropagation()\n      emit('edit', pane.props.name, 'remove')\n      emit('tab-remove', pane.props.name)\n    }\n\n    const handleTabAdd = () => {\n      emit('edit', undefined, 'add')\n      emit('tab-add')\n    }\n\n    onUpdated(() => updatePaneInstances())\n    onMounted(() => updatePaneInstances())\n\n    watch(\n      () => props.activeName,\n      (modelValue) => setCurrentName(modelValue)\n    )\n\n    watch(\n      () => props.modelValue,\n      (modelValue) => setCurrentName(modelValue)\n    )\n\n    watch(currentName, async () => {\n      updatePaneInstances(true)\n      await nextTick()\n      await nav$.value?.$nextTick()\n\n      // call exposed function, Vue doesn't support expose in typescript yet.\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      nav$.value?.scrollToActiveTab()\n    })\n\n    provide(tabsRootContextKey, {\n      props,\n      currentName,\n      updatePaneState: (pane) => (paneStatesMap[pane.uid] = pane),\n    })\n\n    expose({\n      currentName,\n    })\n\n    return () => {\n      const newButton =\n        props.editable || props.addable ? (\n          <span\n            class={ns.e('new-tab')}\n            tabindex=\"0\"\n            onClick={handleTabAdd}\n            onKeydown={(ev: KeyboardEvent) => {\n              if (ev.code === EVENT_CODE.enter) handleTabAdd()\n            }}\n          >\n            <ElIcon class={ns.is('icon-plus')}>\n              <Plus />\n            </ElIcon>\n          </span>\n        ) : null\n\n      const header = (\n        <div class={[ns.e('header'), ns.is(props.tabPosition)]}>\n          {newButton}\n          <TabNav\n            ref={nav$}\n            currentName={currentName.value}\n            editable={props.editable}\n            type={props.type}\n            panes={panes.value}\n            stretch={props.stretch}\n            onTabClick={handleTabClick}\n            onTabRemove={handleTabRemove}\n          />\n        </div>\n      )\n\n      const panels = (\n        <div class={ns.e('content')}>{renderSlot(slots, 'default')}</div>\n      )\n\n      return (\n        <div\n          class={[\n            ns.b(),\n            ns.m(props.tabPosition),\n            {\n              [ns.m('card')]: props.type === 'card',\n              [ns.m('border-card')]: props.type === 'border-card',\n            },\n          ]}\n        >\n          {...props.tabPosition !== 'bottom'\n            ? [header, panels]\n            : [panels, header]}\n        </div>\n      )\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}