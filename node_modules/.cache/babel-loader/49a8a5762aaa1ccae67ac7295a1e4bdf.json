{"ast":null,"code":"import _objectSpread from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defineComponent, ref, computed, reactive, onMounted, h } from 'vue';\nimport { pick } from 'lodash-unified';\nimport { ElSelect } from '../../select/index.mjs';\nimport _Tree from '../../tree/index.mjs';\nimport { useSelect } from './select.mjs';\nimport { useTree } from './tree.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElTreeSelect\",\n  props: _objectSpread(_objectSpread({}, ElSelect.props), _Tree.props),\n  setup: function setup(props, context) {\n    var slots = context.slots,\n        expose = context.expose;\n    var select = ref();\n    var tree = ref();\n    var key = computed(function () {\n      return props.valueKey || props.nodeKey || \"value\";\n    });\n    var selectProps = useSelect(props, context, {\n      select: select,\n      tree: tree,\n      key: key\n    });\n    var treeProps = useTree(props, context, {\n      select: select,\n      tree: tree,\n      key: key\n    });\n    var methods = reactive({});\n    expose(methods);\n    onMounted(function () {\n      Object.assign(methods, _objectSpread(_objectSpread({}, pick(tree.value, [\"filter\", \"updateKeyChildren\", \"getCheckedNodes\", \"setCheckedNodes\", \"getCheckedKeys\", \"setCheckedKeys\", \"setChecked\", \"getHalfCheckedNodes\", \"getHalfCheckedKeys\", \"getCurrentKey\", \"getCurrentNode\", \"setCurrentKey\", \"setCurrentNode\", \"getNode\", \"remove\", \"append\", \"insertBefore\", \"insertAfter\"])), pick(select.value, [\"focus\", \"blur\"])));\n    });\n    return function () {\n      return h(ElSelect, reactive(_objectSpread(_objectSpread({}, selectProps), {}, {\n        ref: function ref(ref2) {\n          return select.value = ref2;\n        }\n      })), _objectSpread(_objectSpread({}, slots), {}, {\n        \"default\": function _default() {\n          return h(_Tree, reactive(_objectSpread(_objectSpread({}, treeProps), {}, {\n            ref: function ref(ref2) {\n              return tree.value = ref2;\n            }\n          })));\n        }\n      }));\n    };\n  }\n});\n\nvar TreeSelect = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tree-select/src/tree-select.vue\"]]);\n\nexport { TreeSelect as default };","map":{"version":3,"mappings":";;;;;;;;;AAQA,IAAKA,YAAaC,eAAa;AAC7BC,MAAM,gBADuB;AAE7BC,OAAO,kCACFC,QAAS,MADP,GAEFC,KAAO,MAFL,CAFsB;AAM7BC,OAN6B,iBAMvBH,KANuB,EAMhBI,OANgB,EAMP;AACd,QAAEC,KAAF,GAAoBD,OAApB,CAAEC,KAAF;AAAA,QAASC,MAAT,GAAoBF,OAApB,CAASE,MAAT;AAEN,QAAMC,SAASC,GAAmC,EAAlD;AACA,QAAMC,OAAOD,GAAiC,EAA9C;AAEA,QAAME,MAAMC,QAAS;AAAA,aAAMX,MAAMY,QAAN,IAAkBZ,MAAMa,OAAxB,IAAmC,OAAzC;AAAA,MAArB;AAEM,sBAAcC,UAAUd,KAAV,EAAiBI,OAAjB,EAA0B;AAAEG,YAAQ,EAARA,MAAF;AAAUE,gBAAV;AAAgBC;AAAhB,KAA1B,CAAd;AACA,oBAAYK,QAAQf,KAAR,EAAeI,OAAf,EAAwB;AAAEG,YAAQ,EAARA,MAAF;AAAUE,gBAAV;AAAgBC;AAAhB,KAAxB,CAAZ;AAGA,kBAAUM,QAAS,IAAnB;AACNV,WAAOW,OAAP;AACAC,cAAU,YAAM;AACdC,aAAOC,MAAP,CAAcH,OAAd,kCACKI,KAAKZ,KAAKa,KAAV,EAAiB,CAClB,QADkB,EAElB,mBAFkB,EAGlB,iBAHkB,EAIlB,iBAJkB,EAKlB,gBALkB,EAMlB,gBANkB,EAOlB,YAPkB,EAQlB,qBARkB,EASlB,oBATkB,EAUlB,eAVkB,EAWlB,gBAXkB,EAYlB,eAZkB,EAalB,gBAbkB,EAclB,SAdkB,EAelB,QAfkB,EAgBlB,QAhBkB,EAiBlB,cAjBkB,EAkBlB,aAlBkB,CAAjB,CADL,GAqBKD,KAAKd,MAAO,MAAZ,EAAmB,CAAC,OAAD,EAAU,MAAV,CAAnB,CArBL;AAuBD,KAxBD;AA0BO;AAAA,aACLgB,CACE,WAQAP,QAAS,iCACJQ,WADI;AAEPhB,WAAK,eAACiB,IAAD;AAAA,iBAAUlB,OAAOe,KAAP,GAAeG,IAAzB;AAAA;AAFE,SART,kCAaKpB,KAbL;AAcE,mBAAS;AAAA,iBACPkB,CACE,QACAP,QAAS,iCACJU,SADI;AAEPlB,eAAK,eAACiB,IAAD;AAAA,qBAAUhB,KAAKa,KAAL,GAAaG,IAAvB;AAAA;AAFE,aADT,CAFK;AAAA;AAdX,SAFG;AAAA;AA0BT;AAxE6B,EAA/B","names":["_sfc_main","defineComponent","name","props","ElSelect","ElTree","setup","context","slots","expose","select","ref","tree","key","computed","valueKey","nodeKey","useSelect","useTree","reactive","methods","onMounted","Object","assign","pick","value","h","selectProps","ref2","treeProps"],"sources":["../../../../../../packages/components/tree-select/src/tree-select.vue"],"sourcesContent":["<script lang=\"ts\">\nimport { computed, defineComponent, h, onMounted, reactive, ref } from 'vue'\nimport { pick } from 'lodash-unified'\nimport ElSelect from '@element-plus/components/select'\nimport ElTree from '@element-plus/components/tree'\nimport { useSelect } from './select'\nimport { useTree } from './tree'\n\nexport default defineComponent({\n  name: 'ElTreeSelect',\n  props: {\n    ...ElSelect.props,\n    ...ElTree.props,\n  },\n  setup(props, context) {\n    const { slots, expose } = context\n\n    const select = ref<InstanceType<typeof ElSelect>>()\n    const tree = ref<InstanceType<typeof ElTree>>()\n\n    const key = computed(() => props.valueKey || props.nodeKey || 'value')\n\n    const selectProps = useSelect(props, context, { select, tree, key })\n    const treeProps = useTree(props, context, { select, tree, key })\n\n    // expose ElTree/ElSelect methods\n    const methods = reactive({})\n    expose(methods)\n    onMounted(() => {\n      Object.assign(methods, {\n        ...pick(tree.value, [\n          'filter',\n          'updateKeyChildren',\n          'getCheckedNodes',\n          'setCheckedNodes',\n          'getCheckedKeys',\n          'setCheckedKeys',\n          'setChecked',\n          'getHalfCheckedNodes',\n          'getHalfCheckedKeys',\n          'getCurrentKey',\n          'getCurrentNode',\n          'setCurrentKey',\n          'setCurrentNode',\n          'getNode',\n          'remove',\n          'append',\n          'insertBefore',\n          'insertAfter',\n        ]),\n        ...pick(select.value, ['focus', 'blur']),\n      })\n    })\n\n    return () =>\n      h(\n        ElSelect,\n        /**\n         * 1. The `props` is processed into `Refs`, but `v-bind` and\n         * render function props cannot read `Refs`, so use `reactive`\n         * unwrap the `Refs` and keep reactive.\n         * 2. The keyword `ref` requires `Ref`, but `reactive` broke it,\n         * so use function.\n         */\n        reactive({\n          ...selectProps,\n          ref: (ref) => (select.value = ref),\n        }),\n        {\n          ...slots,\n          default: () =>\n            h(\n              ElTree,\n              reactive({\n                ...treeProps,\n                ref: (ref) => (tree.value = ref),\n              })\n            ),\n        }\n      )\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}