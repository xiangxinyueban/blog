{"ast":null,"code":"import _defineProperty from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defineComponent, inject, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, withModifiers, createElementVNode, renderSlot, toDisplayString, createCommentVNode, createVNode, withCtx, createBlock, resolveDynamicComponent } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { dialogContentProps, dialogContentEmits } from './dialog-content.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { CloseComponents } from '../../../utils/vue/icon.mjs';\nimport { dialogInjectionKey } from '../../../tokens/dialog.mjs';\nvar _hoisted_1 = [\"aria-label\"];\nvar __default__ = {\n  name: \"ElDialogContent\"\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: dialogContentProps,\n  emits: dialogContentEmits,\n  setup: function setup(__props) {\n    var Close = CloseComponents.Close;\n\n    var _inject = inject(dialogInjectionKey),\n        dialogRef = _inject.dialogRef,\n        headerRef = _inject.headerRef,\n        ns = _inject.ns,\n        style = _inject.style;\n\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"dialogRef\",\n        ref: dialogRef,\n        \"class\": normalizeClass([unref(ns).b(), unref(ns).is(\"fullscreen\", _ctx.fullscreen), unref(ns).is(\"draggable\", _ctx.draggable), _defineProperty({}, unref(ns).m(\"center\"), _ctx.center), _ctx.customClass]),\n        \"aria-modal\": \"true\",\n        role: \"dialog\",\n        \"aria-label\": _ctx.title || \"dialog\",\n        style: normalizeStyle(unref(style)),\n        onClick: _cache[1] || (_cache[1] = withModifiers(function () {}, [\"stop\"]))\n      }, [createElementVNode(\"div\", {\n        ref_key: \"headerRef\",\n        ref: headerRef,\n        \"class\": normalizeClass(unref(ns).e(\"header\"))\n      }, [renderSlot(_ctx.$slots, \"title\", {}, function () {\n        return [createElementVNode(\"span\", {\n          \"class\": normalizeClass(unref(ns).e(\"title\"))\n        }, toDisplayString(_ctx.title), 3)];\n      })], 2), createElementVNode(\"div\", {\n        \"class\": normalizeClass(unref(ns).e(\"body\"))\n      }, [renderSlot(_ctx.$slots, \"default\")], 2), _ctx.$slots.footer ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        \"class\": normalizeClass(unref(ns).e(\"footer\"))\n      }, [renderSlot(_ctx.$slots, \"footer\")], 2)) : createCommentVNode(\"v-if\", true), _ctx.showClose ? (openBlock(), createElementBlock(\"button\", {\n        key: 1,\n        \"aria-label\": \"close\",\n        \"class\": normalizeClass(unref(ns).e(\"headerbtn\")),\n        type: \"button\",\n        onClick: _cache[0] || (_cache[0] = function ($event) {\n          return _ctx.$emit(\"close\");\n        })\n      }, [createVNode(unref(ElIcon), {\n        \"class\": normalizeClass(unref(ns).e(\"close\"))\n      }, {\n        \"default\": withCtx(function () {\n          return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.closeIcon || unref(Close))))];\n        }),\n        _: 1\n      }, 8, [\"class\"])], 2)) : createCommentVNode(\"v-if\", true)], 14, _hoisted_1);\n    };\n  }\n}));\n\nvar ElDialogContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog-content.vue\"]]);\n\nexport { ElDialogContent as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAkDA;;AAMA;AAAA;AAAA;AAAA;AAAA","names":[],"sources":["../../../../../../packages/components/dialog/src/dialog-content.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"dialogRef\"\n    :class=\"[\n      ns.b(),\n      ns.is('fullscreen', fullscreen),\n      ns.is('draggable', draggable),\n      { [ns.m('center')]: center },\n      customClass,\n    ]\"\n    aria-modal=\"true\"\n    role=\"dialog\"\n    :aria-label=\"title || 'dialog'\"\n    :style=\"style\"\n    @click.stop\n  >\n    <div ref=\"headerRef\" :class=\"ns.e('header')\">\n      <slot name=\"title\">\n        <span :class=\"ns.e('title')\">\n          {{ title }}\n        </span>\n      </slot>\n    </div>\n    <div :class=\"ns.e('body')\">\n      <slot />\n    </div>\n    <div v-if=\"$slots.footer\" :class=\"ns.e('footer')\">\n      <slot name=\"footer\" />\n    </div>\n    <button\n      v-if=\"showClose\"\n      aria-label=\"close\"\n      :class=\"ns.e('headerbtn')\"\n      type=\"button\"\n      @click=\"$emit('close')\"\n    >\n      <el-icon :class=\"ns.e('close')\">\n        <component :is=\"closeIcon || Close\" />\n      </el-icon>\n    </button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { inject } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CloseComponents } from '@element-plus/utils'\nimport { dialogInjectionKey } from '@element-plus/tokens'\nimport { dialogContentEmits, dialogContentProps } from './dialog-content'\n\nconst { Close } = CloseComponents\n\ndefineOptions({ name: 'ElDialogContent' })\ndefineProps(dialogContentProps)\ndefineEmits(dialogContentEmits)\n\nconst { dialogRef, headerRef, ns, style } = inject(dialogInjectionKey)!\n// const { focusTrapRef, onKeydown } = inject(FOCUS_TRAP_INJECTION_KEY)!\n\n// const composedDialogRef = composeRefs(focusTrapRef, dialogRef)\n</script>\n"]},"metadata":{},"sourceType":"module"}