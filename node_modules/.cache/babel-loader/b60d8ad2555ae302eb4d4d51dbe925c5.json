{"ast":null,"code":"import _slicedToArray from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport { defineComponent, inject, watch, onBeforeUnmount, openBlock, createBlock, unref, withCtx, renderSlot, createElementBlock, mergeProps } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport ForwardRef from './forward-ref.mjs';\nimport { tooltipV2TriggerProps } from './trigger.mjs';\nimport { tooltipV2CommonProps } from './common.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { tooltipV2RootKey } from '../../../tokens/tooltip-v2.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nvar __default__ = {\n  name: \"ElTooltipV2Trigger\"\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: _objectSpread(_objectSpread({}, tooltipV2CommonProps), tooltipV2TriggerProps),\n  setup: function setup(__props) {\n    var props = __props;\n\n    var _inject = inject(tooltipV2RootKey),\n        onClose = _inject.onClose,\n        onOpen = _inject.onOpen,\n        onDelayOpen = _inject.onDelayOpen,\n        triggerRef = _inject.triggerRef,\n        contentId = _inject.contentId;\n\n    var isMousedown = false;\n\n    var setTriggerRef = function setTriggerRef(el) {\n      triggerRef.value = el;\n    };\n\n    var onMouseup = function onMouseup() {\n      isMousedown = false;\n    };\n\n    var onMouseenter = composeEventHandlers(props.onMouseEnter, onDelayOpen);\n    var onMouseleave = composeEventHandlers(props.onMouseLeave, onClose);\n    var onMousedown = composeEventHandlers(props.onMouseDown, function () {\n      onClose();\n      isMousedown = true;\n      document.addEventListener(\"mouseup\", onMouseup, {\n        once: true\n      });\n    });\n    var onFocus = composeEventHandlers(props.onFocus, function () {\n      if (!isMousedown) onOpen();\n    });\n    var onBlur = composeEventHandlers(props.onBlur, onClose);\n    var onClick = composeEventHandlers(props.onClick, function (e) {\n      if (e.detail === 0) onClose();\n    });\n    var events = {\n      blur: onBlur,\n      click: onClick,\n      focus: onFocus,\n      mousedown: onMousedown,\n      mouseenter: onMouseenter,\n      mouseleave: onMouseleave\n    };\n\n    var setEvents = function setEvents(el, events2, type) {\n      if (el) {\n        Object.entries(events2).forEach(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              name = _ref2[0],\n              handler = _ref2[1];\n\n          el[type](name, handler);\n        });\n      }\n    };\n\n    watch(triggerRef, function (triggerEl, previousTriggerEl) {\n      setEvents(triggerEl, events, \"addEventListener\");\n      setEvents(previousTriggerEl, events, \"removeEventListener\");\n\n      if (triggerEl) {\n        triggerEl.setAttribute(\"aria-describedby\", contentId.value);\n      }\n    });\n    onBeforeUnmount(function () {\n      setEvents(triggerRef.value, events, \"removeEventListener\");\n      document.removeEventListener(\"mouseup\", onMouseup);\n    });\n    return function (_ctx, _cache) {\n      return _ctx.nowrap ? (openBlock(), createBlock(unref(ForwardRef), {\n        key: 0,\n        \"set-ref\": setTriggerRef,\n        \"only-child\": \"\"\n      }, {\n        \"default\": withCtx(function () {\n          return [renderSlot(_ctx.$slots, \"default\")];\n        }),\n        _: 3\n      })) : (openBlock(), createElementBlock(\"button\", mergeProps({\n        key: 1,\n        ref_key: \"triggerRef\",\n        ref: triggerRef\n      }, _ctx.$attrs), [renderSlot(_ctx.$slots, \"default\")], 16));\n    };\n  }\n}));\n\nvar TooltipV2Trigger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tooltip-v2/src/trigger.vue\"]]);\n\nexport { TooltipV2Trigger as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AA+BA,kBACAA,wBADA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;;AAEA;AACAC;AACA,KAFA;;AAIA;AACAC;AACA,KAFA;;AAIA;AAEA;AAEA;AACAC;AACAD;AACAE;AAAAC;AAAA;AACA,KAJA;AAMA;AACA;AACA,KAFA;AAIA;AAEA;AACA;AACA,KAFA;AAIA;AACAC,kBADA;AAEAC,oBAFA;AAGAC,oBAHA;AAIAC,4BAJA;AAKAC,8BALA;AAMAC;AANA;;AASA,uCACAC,EADA,EAEAC,OAFA,EAGAC,IAHA,EAIA;AACA;AACAC;AAAA;AAAA;AAAA;;AACAH;AACA,SAFA;AAGA;AACA,KAVA;;AAYAI;AACAC;AACAA;;AAEA;AACAC;AACA;AACA,KAPA;AASAC;AACAF;AACAb;AACA,KAHA","names":["inject","triggerRef","isMousedown","onClose","document","once","blur","click","focus","mousedown","mouseenter","mouseleave","el","events2","type","Object","watch","setEvents","triggerEl","onBeforeUnmount"],"sources":["../../../../../../packages/components/tooltip-v2/src/trigger.vue"],"sourcesContent":["<template>\n  <forward-ref v-if=\"nowrap\" :set-ref=\"setTriggerRef\" only-child>\n    <slot />\n  </forward-ref>\n  <button v-else ref=\"triggerRef\" v-bind=\"$attrs\">\n    <slot />\n  </button>\n</template>\n\n<script setup lang=\"ts\">\nimport { inject, onBeforeUnmount, watch } from 'vue'\nimport { composeEventHandlers } from '@element-plus/utils'\nimport { tooltipV2RootKey } from '@element-plus/tokens'\nimport ForwardRef from './forward-ref'\nimport { tooltipV2TriggerProps } from './trigger'\nimport { tooltipV2CommonProps } from './common'\n\ndefineOptions({\n  name: 'ElTooltipV2Trigger',\n})\n\nconst props = defineProps({\n  ...tooltipV2CommonProps,\n  ...tooltipV2TriggerProps,\n})\n\n/**\n * onOpen opens the tooltip instantly, onTrigger acts a lil bit differently,\n * it will check if delayDuration is set to greater than 0 and based on that result,\n * if true, it opens the tooltip after delayDuration, otherwise it opens it instantly.\n */\nconst { onClose, onOpen, onDelayOpen, triggerRef, contentId } =\n  inject(tooltipV2RootKey)!\n\nlet isMousedown = false\n\nconst setTriggerRef = (el: HTMLElement | null) => {\n  triggerRef.value = el\n}\n\nconst onMouseup = () => {\n  isMousedown = false\n}\n\nconst onMouseenter = composeEventHandlers(props.onMouseEnter, onDelayOpen)\n\nconst onMouseleave = composeEventHandlers(props.onMouseLeave, onClose)\n\nconst onMousedown = composeEventHandlers(props.onMouseDown, () => {\n  onClose()\n  isMousedown = true\n  document.addEventListener('mouseup', onMouseup, { once: true })\n})\n\nconst onFocus = composeEventHandlers(props.onFocus, () => {\n  if (!isMousedown) onOpen()\n})\n\nconst onBlur = composeEventHandlers(props.onBlur, onClose)\n\nconst onClick = composeEventHandlers(props.onClick, (e) => {\n  if ((e as MouseEvent).detail === 0) onClose()\n})\n\nconst events = {\n  blur: onBlur,\n  click: onClick,\n  focus: onFocus,\n  mousedown: onMousedown,\n  mouseenter: onMouseenter,\n  mouseleave: onMouseleave,\n}\n\nconst setEvents = <T extends (e: Event) => void>(\n  el: HTMLElement | null | undefined,\n  events: Record<string, T>,\n  type: 'addEventListener' | 'removeEventListener'\n) => {\n  if (el) {\n    Object.entries(events).forEach(([name, handler]) => {\n      el[type](name, handler)\n    })\n  }\n}\n\nwatch(triggerRef, (triggerEl, previousTriggerEl) => {\n  setEvents(triggerEl, events, 'addEventListener')\n  setEvents(previousTriggerEl, events, 'removeEventListener')\n\n  if (triggerEl) {\n    triggerEl.setAttribute('aria-describedby', contentId.value)\n  }\n})\n\nonBeforeUnmount(() => {\n  setEvents(triggerRef.value, events, 'removeEventListener')\n  document.removeEventListener('mouseup', onMouseup)\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}