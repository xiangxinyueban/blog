{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { inject, computed, unref } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport '../../utils/index.mjs';\nimport { debugWarn } from '../../utils/error.mjs';\nvar defaultIdInjection = {\n  prefix: Math.floor(Math.random() * 1e4),\n  current: 0\n};\nvar ID_INJECTION_KEY = Symbol(\"elIdInjection\");\n\nvar useId = function useId(deterministicId) {\n  var idInjection = inject(ID_INJECTION_KEY, defaultIdInjection);\n\n  if (!isClient && idInjection === defaultIdInjection) {\n    debugWarn(\"IdInjection\", \"Looks like you are using server rendering, you must provide a id provider to ensure the hydration process to be succeed\\nusage: app.provide(ID_INJECTION_KEY, {\\n  prefix: number,\\n  current: number,\\n})\");\n  }\n\n  var idRef = computed(function () {\n    return unref(deterministicId) || \"el-id-\".concat(idInjection.prefix, \"-\").concat(idInjection.current++);\n  });\n  return idRef;\n};\n\nexport { ID_INJECTION_KEY, useId };","map":{"version":3,"mappings":";;;;;;;;AAGA,IAAMA,kBAAkB,GAAG;AACzBC,QAAM,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CADiB;AAEzBC,SAAO,EAAE;AAFgB,CAA3B;AAIY,IAACC,gBAAgB,GAAGC,MAAM,CAAC,eAAD,CAA1B;;AACA,IAACC,KAAK,GAAG,SAARA,KAAQ,CAACC,eAAD,EAAqB;AACxC,MAAMC,WAAW,GAAGC,MAAM,CAACL,gBAAD,EAAmBN,kBAAnB,CAA1B;;AACA,MAAI,CAACY,QAAD,IAAaF,WAAW,KAAKV,kBAAjC,EAAqD;AACnDa,aAAS,CAAC,aAAD,+MAAT;AAKD;;AACD,MAAMC,KAAK,GAAGC,QAAQ,CAAC;AAAA,WAAMC,KAAK,CAACP,eAAD,CAAL,oBAAmCC,WAAW,CAACT,MAA/C,cAAyDS,WAAW,CAACL,OAAZ,EAAzD,CAAN;AAAA,GAAD,CAAtB;AACA,SAAOS,KAAP;AACF,CAXY","names":["defaultIdInjection","prefix","Math","floor","random","current","ID_INJECTION_KEY","Symbol","useId","deterministicId","idInjection","inject","isClient","debugWarn","idRef","computed","unref"],"sources":["../../../../../packages/hooks/use-id/index.ts"],"sourcesContent":["import { computed, inject, unref } from 'vue'\nimport { isClient } from '@vueuse/core'\nimport { debugWarn } from '@element-plus/utils'\n\nimport type { InjectionKey, Ref } from 'vue'\nimport type { MaybeRef } from '@vueuse/core'\n\nexport type ElIdInjectionContext = {\n  prefix: number\n  current: number\n}\n\nconst defaultIdInjection = {\n  prefix: Math.floor(Math.random() * 10000),\n  current: 0,\n}\n\nexport const ID_INJECTION_KEY: InjectionKey<ElIdInjectionContext> =\n  Symbol('elIdInjection')\n\nexport const useId = (deterministicId?: MaybeRef<string>): Ref<string> => {\n  const idInjection = inject(ID_INJECTION_KEY, defaultIdInjection)\n\n  if (!isClient && idInjection === defaultIdInjection) {\n    debugWarn(\n      'IdInjection',\n      `Looks like you are using server rendering, you must provide a id provider to ensure the hydration process to be succeed\nusage: app.provide(ID_INJECTION_KEY, {\n  prefix: number,\n  current: number,\n})`\n    )\n  }\n\n  const idRef = computed(\n    () =>\n      unref(deterministicId) ||\n      `el-id-${idInjection.prefix}-${idInjection.current++}`\n  )\n\n  return idRef\n}\n"]},"metadata":{},"sourceType":"module"}