{"ast":null,"code":"import _defineProperty from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport { h } from 'vue';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ArrowRight, Loading } from '@element-plus/icons-vue';\nimport '../../../utils/index.mjs';\nimport { getProp } from '../../../utils/objects.mjs';\nvar defaultClassNames = {\n  selection: \"table-column--selection\",\n  expand: \"table__expand-column\"\n};\nvar cellStarts = {\n  \"default\": {\n    order: \"\"\n  },\n  selection: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\"\n  },\n  expand: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\"\n  },\n  index: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\"\n  }\n};\n\nvar getDefaultClassName = function getDefaultClassName(type) {\n  return defaultClassNames[type] || \"\";\n};\n\nvar cellForced = {\n  selection: {\n    renderHeader: function renderHeader(_ref) {\n      var store = _ref.store;\n\n      function isDisabled() {\n        return store.states.data.value && store.states.data.value.length === 0;\n      }\n\n      return h(ElCheckbox, {\n        disabled: isDisabled(),\n        size: store.states.tableSize.value,\n        indeterminate: store.states.selection.value.length > 0 && !store.states.isAllSelected.value,\n        \"onUpdate:modelValue\": store.toggleAllSelection,\n        modelValue: store.states.isAllSelected.value\n      });\n    },\n    renderCell: function renderCell(_ref2) {\n      var row = _ref2.row,\n          column = _ref2.column,\n          store = _ref2.store,\n          $index = _ref2.$index;\n      return h(ElCheckbox, {\n        disabled: column.selectable ? !column.selectable.call(null, row, $index) : false,\n        size: store.states.tableSize.value,\n        onChange: function onChange() {\n          store.commit(\"rowSelectedChanged\", row);\n        },\n        onClick: function onClick(event) {\n          return event.stopPropagation();\n        },\n        modelValue: store.isSelected(row)\n      });\n    },\n    sortable: false,\n    resizable: false\n  },\n  index: {\n    renderHeader: function renderHeader(_ref3) {\n      var column = _ref3.column;\n      return column.label || \"#\";\n    },\n    renderCell: function renderCell(_ref4) {\n      var column = _ref4.column,\n          $index = _ref4.$index;\n      var i = $index + 1;\n      var index = column.index;\n\n      if (typeof index === \"number\") {\n        i = $index + index;\n      } else if (typeof index === \"function\") {\n        i = index($index);\n      }\n\n      return h(\"div\", {}, [i]);\n    },\n    sortable: false\n  },\n  expand: {\n    renderHeader: function renderHeader(_ref5) {\n      var column = _ref5.column;\n      return column.label || \"\";\n    },\n    renderCell: function renderCell(_ref6) {\n      var row = _ref6.row,\n          store = _ref6.store,\n          expanded = _ref6.expanded;\n      var ns = store.ns;\n      var classes = [ns.e(\"expand-icon\")];\n\n      if (expanded) {\n        classes.push(ns.em(\"expand-icon\", \"expanded\"));\n      }\n\n      var callback = function callback(e) {\n        e.stopPropagation();\n        store.toggleRowExpansion(row);\n      };\n\n      return h(\"div\", {\n        \"class\": classes,\n        onClick: callback\n      }, {\n        \"default\": function _default() {\n          return [h(ElIcon, null, {\n            \"default\": function _default() {\n              return [h(ArrowRight)];\n            }\n          })];\n        }\n      });\n    },\n    sortable: false,\n    resizable: false\n  }\n};\n\nfunction defaultRenderCell(_ref7) {\n  var row = _ref7.row,\n      column = _ref7.column,\n      $index = _ref7.$index;\n\n  var _a;\n\n  var property = column.property;\n  var value = property && getProp(row, property).value;\n\n  if (column && column.formatter) {\n    return column.formatter(row, column, value, $index);\n  }\n\n  return ((_a = value == null ? void 0 : value.toString) == null ? void 0 : _a.call(value)) || \"\";\n}\n\nfunction treeCellPrefix(_ref8) {\n  var row = _ref8.row,\n      treeNode = _ref8.treeNode,\n      store = _ref8.store;\n  var createPlacehoder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var ns = store.ns;\n\n  if (!treeNode) {\n    if (createPlacehoder) {\n      return [h(\"span\", {\n        \"class\": ns.e(\"placeholder\")\n      })];\n    }\n\n    return null;\n  }\n\n  var ele = [];\n\n  var callback = function callback(e) {\n    e.stopPropagation();\n    store.loadOrToggle(row);\n  };\n\n  if (treeNode.indent) {\n    ele.push(h(\"span\", {\n      \"class\": ns.e(\"indent\"),\n      style: {\n        \"padding-left\": \"\".concat(treeNode.indent, \"px\")\n      }\n    }));\n  }\n\n  if (typeof treeNode.expanded === \"boolean\" && !treeNode.noLazyChildren) {\n    var expandClasses = [ns.e(\"expand-icon\"), treeNode.expanded ? ns.em(\"expand-icon\", \"expanded\") : \"\"];\n    var icon = ArrowRight;\n\n    if (treeNode.loading) {\n      icon = Loading;\n    }\n\n    ele.push(h(\"div\", {\n      \"class\": expandClasses,\n      onClick: callback\n    }, {\n      \"default\": function _default() {\n        return [h(ElIcon, {\n          \"class\": _defineProperty({}, ns.is(\"loading\"), treeNode.loading)\n        }, {\n          \"default\": function _default() {\n            return [h(icon)];\n          }\n        })];\n      }\n    }));\n  } else {\n    ele.push(h(\"span\", {\n      \"class\": ns.e(\"placeholder\")\n    }));\n  }\n\n  return ele;\n}\n\nexport { cellForced, cellStarts, defaultRenderCell, getDefaultClassName, treeCellPrefix };","map":{"version":3,"mappings":"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","names":["defaultClassNames","selection","expand","cellStarts","order","width","minWidth","realWidth","index","getDefaultClassName","type","cellForced","renderHeader","store","isDisabled","states","data","value","length","h","ElCheckbox","disabled","size","tableSize","indeterminate","isAllSelected","toggleAllSelection","modelValue","renderCell","row","column","$index","selectable","call","onChange","commit","onClick","event","stopPropagation","isSelected","sortable","resizable","label","i","expanded","ns","classes","e","push","em","callback","toggleRowExpansion","ElIcon","ArrowRight","defaultRenderCell","_a","property","getProp","formatter","toString","treeCellPrefix","treeNode","createPlacehoder","ele","loadOrToggle","indent","style","noLazyChildren","expandClasses","icon","loading","Loading","is"],"sources":["../../../../../../packages/components/table/src/config.ts"],"sourcesContent":["import { h } from 'vue'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { ArrowRight, Loading } from '@element-plus/icons-vue'\nimport { getProp } from '@element-plus/utils'\n\nimport type { VNode } from 'vue'\nimport type { TableColumnCtx } from './table-column/defaults'\nimport type { Store } from './store'\nimport type { TreeNode } from './table/defaults'\n\nconst defaultClassNames = {\n  selection: 'table-column--selection',\n  expand: 'table__expand-column',\n}\n\nexport const cellStarts = {\n  default: {\n    order: '',\n  },\n  selection: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: '',\n  },\n  expand: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: '',\n  },\n  index: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: '',\n  },\n}\n\nexport const getDefaultClassName = (type) => {\n  return defaultClassNames[type] || ''\n}\n\n// 这些选项不应该被覆盖\nexport const cellForced = {\n  selection: {\n    renderHeader<T>({ store }: { store: Store<T> }) {\n      function isDisabled() {\n        return store.states.data.value && store.states.data.value.length === 0\n      }\n      return h(ElCheckbox, {\n        disabled: isDisabled(),\n        size: store.states.tableSize.value,\n        indeterminate:\n          store.states.selection.value.length > 0 &&\n          !store.states.isAllSelected.value,\n        'onUpdate:modelValue': store.toggleAllSelection,\n        modelValue: store.states.isAllSelected.value,\n      })\n    },\n    renderCell<T>({\n      row,\n      column,\n      store,\n      $index,\n    }: {\n      row: T\n      column: TableColumnCtx<T>\n      store: Store<T>\n      $index: string\n    }) {\n      return h(ElCheckbox, {\n        disabled: column.selectable\n          ? !column.selectable.call(null, row, $index)\n          : false,\n        size: store.states.tableSize.value,\n        onChange: () => {\n          store.commit('rowSelectedChanged', row)\n        },\n        onClick: (event: Event) => event.stopPropagation(),\n        modelValue: store.isSelected(row),\n      })\n    },\n    sortable: false,\n    resizable: false,\n  },\n  index: {\n    renderHeader<T>({ column }: { column: TableColumnCtx<T> }) {\n      return column.label || '#'\n    },\n    renderCell<T>({\n      column,\n      $index,\n    }: {\n      column: TableColumnCtx<T>\n      $index: number\n    }) {\n      let i = $index + 1\n      const index = column.index\n\n      if (typeof index === 'number') {\n        i = $index + index\n      } else if (typeof index === 'function') {\n        i = index($index)\n      }\n      return h('div', {}, [i])\n    },\n    sortable: false,\n  },\n  expand: {\n    renderHeader<T>({ column }: { column: TableColumnCtx<T> }) {\n      return column.label || ''\n    },\n    renderCell<T>({\n      row,\n      store,\n      expanded,\n    }: {\n      row: T\n      store: Store<T>\n      expanded: boolean\n    }) {\n      const { ns } = store\n      const classes = [ns.e('expand-icon')]\n      if (expanded) {\n        classes.push(ns.em('expand-icon', 'expanded'))\n      }\n      const callback = function (e: Event) {\n        e.stopPropagation()\n        store.toggleRowExpansion(row)\n      }\n      return h(\n        'div',\n        {\n          class: classes,\n          onClick: callback,\n        },\n        {\n          default: () => {\n            return [\n              h(ElIcon, null, {\n                default: () => {\n                  return [h(ArrowRight)]\n                },\n              }),\n            ]\n          },\n        }\n      )\n    },\n    sortable: false,\n    resizable: false,\n  },\n}\n\nexport function defaultRenderCell<T>({\n  row,\n  column,\n  $index,\n}: {\n  row: T\n  column: TableColumnCtx<T>\n  $index: number\n}) {\n  const property = column.property\n  const value = property && getProp(row, property).value\n  if (column && column.formatter) {\n    return column.formatter(row, column, value, $index)\n  }\n  return value?.toString?.() || ''\n}\n\nexport function treeCellPrefix<T>(\n  {\n    row,\n    treeNode,\n    store,\n  }: {\n    row: T\n    treeNode: TreeNode\n    store: Store<T>\n  },\n  createPlacehoder = false\n) {\n  const { ns } = store\n  if (!treeNode) {\n    if (createPlacehoder) {\n      return [\n        h('span', {\n          class: ns.e('placeholder'),\n        }),\n      ]\n    }\n    return null\n  }\n  const ele: VNode[] = []\n  const callback = function (e) {\n    e.stopPropagation()\n    store.loadOrToggle(row)\n  }\n  if (treeNode.indent) {\n    ele.push(\n      h('span', {\n        class: ns.e('indent'),\n        style: { 'padding-left': `${treeNode.indent}px` },\n      })\n    )\n  }\n  if (typeof treeNode.expanded === 'boolean' && !treeNode.noLazyChildren) {\n    const expandClasses = [\n      ns.e('expand-icon'),\n      treeNode.expanded ? ns.em('expand-icon', 'expanded') : '',\n    ]\n    let icon = ArrowRight\n    if (treeNode.loading) {\n      icon = Loading\n    }\n\n    ele.push(\n      h(\n        'div',\n        {\n          class: expandClasses,\n          onClick: callback,\n        },\n        {\n          default: () => {\n            return [\n              h(\n                ElIcon,\n                { class: { [ns.is('loading')]: treeNode.loading } },\n                {\n                  default: () => [h(icon)],\n                }\n              ),\n            ]\n          },\n        }\n      )\n    )\n  } else {\n    ele.push(\n      h('span', {\n        class: ns.e('placeholder'),\n      })\n    )\n  }\n  return ele\n}\n"]},"metadata":{},"sourceType":"module"}