{"ast":null,"code":"import _defineProperty from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { defineComponent, ref, computed, watch, nextTick, provide, reactive, onMounted, onUpdated, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, createBlock, resolveDynamicComponent, withCtx, renderSlot, createCommentVNode } from 'vue';\nimport { isNumber, useResizeObserver, useEventListener } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport Bar from './bar2.mjs';\nimport { scrollbarProps, scrollbarEmits } from './scrollbar.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { addUnit } from '../../../utils/vue/style.mjs';\nimport { isObject } from '@vue/shared';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { scrollbarContextKey } from '../../../tokens/scrollbar.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElScrollbar\",\n  components: {\n    Bar: Bar\n  },\n  props: scrollbarProps,\n  emits: scrollbarEmits,\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var ns = useNamespace(\"scrollbar\");\n    var stopResizeObserver = void 0;\n    var stopResizeListener = void 0;\n    var scrollbar$ = ref();\n    var wrap$ = ref();\n    var resize$ = ref();\n    var sizeWidth = ref(\"0\");\n    var sizeHeight = ref(\"0\");\n    var barRef = ref();\n    var moveX = ref(0);\n    var moveY = ref(0);\n    var ratioY = ref(1);\n    var ratioX = ref(1);\n    var SCOPE = \"ElScrollbar\";\n    var GAP = 4;\n    var style = computed(function () {\n      var style2 = {};\n      if (props.height) style2.height = addUnit(props.height);\n      if (props.maxHeight) style2.maxHeight = addUnit(props.maxHeight);\n      return [props.wrapStyle, style2];\n    });\n\n    var handleScroll = function handleScroll() {\n      var _a;\n\n      if (wrap$.value) {\n        (_a = barRef.value) == null ? void 0 : _a.handleScroll(wrap$.value);\n        emit(\"scroll\", {\n          scrollTop: wrap$.value.scrollTop,\n          scrollLeft: wrap$.value.scrollLeft\n        });\n      }\n    };\n\n    function scrollTo(arg1, arg2) {\n      if (isObject(arg1)) {\n        wrap$.value.scrollTo(arg1);\n      } else if (isNumber(arg1) && isNumber(arg2)) {\n        wrap$.value.scrollTo(arg1, arg2);\n      }\n    }\n\n    var setScrollTop = function setScrollTop(value) {\n      if (!isNumber(value)) {\n        debugWarn(SCOPE, \"value must be a number\");\n        return;\n      }\n\n      wrap$.value.scrollTop = value;\n    };\n\n    var setScrollLeft = function setScrollLeft(value) {\n      if (!isNumber(value)) {\n        debugWarn(SCOPE, \"value must be a number\");\n        return;\n      }\n\n      wrap$.value.scrollLeft = value;\n    };\n\n    var update = function update() {\n      if (!wrap$.value) return;\n      var offsetHeight = wrap$.value.offsetHeight - GAP;\n      var offsetWidth = wrap$.value.offsetWidth - GAP;\n      var originalHeight = Math.pow(offsetHeight, 2) / wrap$.value.scrollHeight;\n      var originalWidth = Math.pow(offsetWidth, 2) / wrap$.value.scrollWidth;\n      var height = Math.max(originalHeight, props.minSize);\n      var width = Math.max(originalWidth, props.minSize);\n      ratioY.value = originalHeight / (offsetHeight - originalHeight) / (height / (offsetHeight - height));\n      ratioX.value = originalWidth / (offsetWidth - originalWidth) / (width / (offsetWidth - width));\n      sizeHeight.value = height + GAP < offsetHeight ? \"\".concat(height, \"px\") : \"\";\n      sizeWidth.value = width + GAP < offsetWidth ? \"\".concat(width, \"px\") : \"\";\n    };\n\n    watch(function () {\n      return props.noresize;\n    }, function (noresize) {\n      if (noresize) {\n        stopResizeObserver == null ? void 0 : stopResizeObserver();\n        stopResizeListener == null ? void 0 : stopResizeListener();\n      } else {\n        ;\n\n        var _useResizeObserver = useResizeObserver(resize$, update);\n\n        stopResizeObserver = _useResizeObserver.stop;\n        stopResizeListener = useEventListener(\"resize\", update);\n      }\n    }, {\n      immediate: true\n    });\n    watch(function () {\n      return [props.maxHeight, props.height];\n    }, function () {\n      if (!props[\"native\"]) nextTick(function () {\n        var _a;\n\n        update();\n\n        if (wrap$.value) {\n          (_a = barRef.value) == null ? void 0 : _a.handleScroll(wrap$.value);\n        }\n      });\n    });\n    provide(scrollbarContextKey, reactive({\n      scrollbarElement: scrollbar$,\n      wrapElement: wrap$\n    }));\n    onMounted(function () {\n      if (!props[\"native\"]) nextTick(function () {\n        return update();\n      });\n    });\n    onUpdated(function () {\n      return update();\n    });\n    return {\n      ns: ns,\n      scrollbar$: scrollbar$,\n      wrap$: wrap$,\n      resize$: resize$,\n      barRef: barRef,\n      moveX: moveX,\n      moveY: moveY,\n      ratioX: ratioX,\n      ratioY: ratioY,\n      sizeWidth: sizeWidth,\n      sizeHeight: sizeHeight,\n      style: style,\n      update: update,\n      handleScroll: handleScroll,\n      scrollTo: scrollTo,\n      setScrollTop: setScrollTop,\n      setScrollLeft: setScrollLeft\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_bar = resolveComponent(\"bar\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"scrollbar$\",\n    \"class\": normalizeClass(_ctx.ns.b())\n  }, [createElementVNode(\"div\", {\n    ref: \"wrap$\",\n    \"class\": normalizeClass([_ctx.wrapClass, _ctx.ns.e(\"wrap\"), _defineProperty({}, _ctx.ns.em(\"wrap\", \"hidden-default\"), !_ctx[\"native\"])]),\n    style: normalizeStyle(_ctx.style),\n    onScroll: _cache[0] || (_cache[0] = function () {\n      return _ctx.handleScroll && _ctx.handleScroll.apply(_ctx, arguments);\n    })\n  }, [(openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {\n    ref: \"resize$\",\n    \"class\": normalizeClass([_ctx.ns.e(\"view\"), _ctx.viewClass]),\n    style: normalizeStyle(_ctx.viewStyle)\n  }, {\n    \"default\": withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"default\")];\n    }),\n    _: 3\n  }, 8, [\"class\", \"style\"]))], 38), !_ctx[\"native\"] ? (openBlock(), createBlock(_component_bar, {\n    key: 0,\n    ref: \"barRef\",\n    height: _ctx.sizeHeight,\n    width: _ctx.sizeWidth,\n    always: _ctx.always,\n    \"ratio-x\": _ctx.ratioX,\n    \"ratio-y\": _ctx.ratioY\n  }, null, 8, [\"height\", \"width\", \"always\", \"ratio-x\", \"ratio-y\"])) : createCommentVNode(\"v-if\", true)], 2);\n}\n\nvar Scrollbar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/scrollbar/src/scrollbar.vue\"]]);\n\nexport { Scrollbar as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","Bar","props","emits","setup","emit","useNamespace","stopResizeObserver","stopResizeListener","scrollbar$","ref","wrap$","resize$","barRef","SCOPE","GAP","computed","style2","addUnit","height","maxHeight","handleScroll","_a","scrollTop","scrollLeft","arg2","scrollTo","arg1","isNumber","setScrollTop","value","debugWarn","setScrollLeft","update","offsetHeight","offsetWidth","originalHeight","scrollHeight","originalWidth","scrollWidth","max","ratioY","ratioX","width","sizeHeight","sizeWidth","watch","useResizeObserver","stop","immediate","nextTick","provide","scrollbarElement","wrapElement","onMounted","onUpdated","ns","moveX","moveY","style","_cache","_component_bar","_normalizeClass","_createElementVNode","_ctx","onScroll","_openBlock","key","always"],"sources":["../../../../../../packages/components/scrollbar/src/scrollbar.vue"],"sourcesContent":["<template>\n  <div ref=\"scrollbar$\" :class=\"ns.b()\">\n    <div\n      ref=\"wrap$\"\n      :class=\"[\n        wrapClass,\n        ns.e('wrap'),\n        { [ns.em('wrap', 'hidden-default')]: !native },\n      ]\"\n      :style=\"style\"\n      @scroll=\"handleScroll\"\n    >\n      <component\n        :is=\"tag\"\n        ref=\"resize$\"\n        :class=\"[ns.e('view'), viewClass]\"\n        :style=\"viewStyle\"\n      >\n        <slot />\n      </component>\n    </div>\n    <template v-if=\"!native\">\n      <bar\n        ref=\"barRef\"\n        :height=\"sizeHeight\"\n        :width=\"sizeWidth\"\n        :always=\"always\"\n        :ratio-x=\"ratioX\"\n        :ratio-y=\"ratioY\"\n      />\n    </template>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  nextTick,\n  onMounted,\n  onUpdated,\n  provide,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { useEventListener, useResizeObserver } from '@vueuse/core'\nimport { addUnit, debugWarn, isNumber, isObject } from '@element-plus/utils'\nimport { scrollbarContextKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\nimport Bar from './bar.vue'\n\nimport { scrollbarEmits, scrollbarProps } from './scrollbar'\nimport type { CSSProperties, StyleValue } from 'vue'\n\nexport default defineComponent({\n  name: 'ElScrollbar',\n  components: {\n    Bar,\n  },\n  props: scrollbarProps,\n  emits: scrollbarEmits,\n\n  setup(props, { emit }) {\n    const ns = useNamespace('scrollbar')\n\n    let stopResizeObserver: (() => void) | undefined = undefined\n    let stopResizeListener: (() => void) | undefined = undefined\n\n    const scrollbar$ = ref<HTMLDivElement>()\n    const wrap$ = ref<HTMLDivElement>()\n    const resize$ = ref<HTMLElement>()\n\n    const sizeWidth = ref('0')\n    const sizeHeight = ref('0')\n    const barRef = ref()\n    const moveX = ref(0)\n    const moveY = ref(0)\n    const ratioY = ref(1)\n    const ratioX = ref(1)\n    const SCOPE = 'ElScrollbar'\n    const GAP = 4 // top 2 + bottom 2 of bar instance\n\n    const style = computed<StyleValue>(() => {\n      const style: CSSProperties = {}\n      if (props.height) style.height = addUnit(props.height)\n      if (props.maxHeight) style.maxHeight = addUnit(props.maxHeight)\n      return [props.wrapStyle, style]\n    })\n\n    const handleScroll = () => {\n      if (wrap$.value) {\n        barRef.value?.handleScroll(wrap$.value)\n\n        emit('scroll', {\n          scrollTop: wrap$.value.scrollTop,\n          scrollLeft: wrap$.value.scrollLeft,\n        })\n      }\n    }\n\n    function scrollTo(xCord: number, yCord?: number): void\n    function scrollTo(options: ScrollToOptions): void\n    function scrollTo(arg1: unknown, arg2?: number) {\n      if (isObject(arg1)) {\n        wrap$.value!.scrollTo(arg1)\n      } else if (isNumber(arg1) && isNumber(arg2)) {\n        wrap$.value!.scrollTo(arg1, arg2)\n      }\n    }\n\n    const setScrollTop = (value: number) => {\n      if (!isNumber(value)) {\n        debugWarn(SCOPE, 'value must be a number')\n        return\n      }\n      wrap$.value!.scrollTop = value\n    }\n\n    const setScrollLeft = (value: number) => {\n      if (!isNumber(value)) {\n        debugWarn(SCOPE, 'value must be a number')\n        return\n      }\n      wrap$.value!.scrollLeft = value\n    }\n\n    const update = () => {\n      if (!wrap$.value) return\n      const offsetHeight = wrap$.value.offsetHeight - GAP\n      const offsetWidth = wrap$.value.offsetWidth - GAP\n\n      const originalHeight = offsetHeight ** 2 / wrap$.value.scrollHeight\n      const originalWidth = offsetWidth ** 2 / wrap$.value.scrollWidth\n      const height = Math.max(originalHeight, props.minSize)\n      const width = Math.max(originalWidth, props.minSize)\n\n      ratioY.value =\n        originalHeight /\n        (offsetHeight - originalHeight) /\n        (height / (offsetHeight - height))\n      ratioX.value =\n        originalWidth /\n        (offsetWidth - originalWidth) /\n        (width / (offsetWidth - width))\n\n      sizeHeight.value = height + GAP < offsetHeight ? `${height}px` : ''\n      sizeWidth.value = width + GAP < offsetWidth ? `${width}px` : ''\n    }\n\n    watch(\n      () => props.noresize,\n      (noresize) => {\n        if (noresize) {\n          stopResizeObserver?.()\n          stopResizeListener?.()\n        } else {\n          ;({ stop: stopResizeObserver } = useResizeObserver(resize$, update))\n          stopResizeListener = useEventListener('resize', update)\n        }\n      },\n      { immediate: true }\n    )\n\n    watch(\n      () => [props.maxHeight, props.height],\n      () => {\n        if (!props.native)\n          nextTick(() => {\n            update()\n            if (wrap$.value) {\n              barRef.value?.handleScroll(wrap$.value)\n            }\n          })\n      }\n    )\n\n    provide(\n      scrollbarContextKey,\n      reactive({\n        scrollbarElement: scrollbar$,\n        wrapElement: wrap$,\n      })\n    )\n\n    onMounted(() => {\n      if (!props.native) nextTick(() => update())\n    })\n    onUpdated(() => update())\n\n    return {\n      ns,\n      scrollbar$,\n      wrap$,\n      resize$,\n      barRef,\n      moveX,\n      moveY,\n      ratioX,\n      ratioY,\n      sizeWidth,\n      sizeHeight,\n      style,\n      update,\n      handleScroll,\n      scrollTo,\n      setScrollTop,\n      setScrollLeft,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}