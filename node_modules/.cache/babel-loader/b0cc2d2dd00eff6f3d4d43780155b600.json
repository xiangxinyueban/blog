{"ast":null,"code":"import \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport { isClient } from '@vueuse/core';\nimport { getStyle } from './style.mjs';\n\nvar isScroll = function isScroll(el, isVertical) {\n  if (!isClient) return false;\n  var key = {\n    undefined: \"overflow\",\n    \"true\": \"overflow-y\",\n    \"false\": \"overflow-x\"\n  }[String(isVertical)];\n  var overflow = getStyle(el, key);\n  return [\"scroll\", \"auto\", \"overlay\"].some(function (s) {\n    return overflow.includes(s);\n  });\n};\n\nvar getScrollContainer = function getScrollContainer(el, isVertical) {\n  if (!isClient) return;\n  var parent = el;\n\n  while (parent) {\n    if ([window, document, document.documentElement].includes(parent)) return window;\n    if (isScroll(parent, isVertical)) return parent;\n    parent = parent.parentNode;\n  }\n\n  return parent;\n};\n\nvar scrollBarWidth;\n\nvar getScrollBarWidth = function getScrollBarWidth() {\n  var _a;\n\n  if (!isClient) return 0;\n  if (scrollBarWidth !== void 0) return scrollBarWidth;\n  var outer = document.createElement(\"div\");\n  outer.className = \"el-scrollbar__wrap\";\n  outer.style.visibility = \"hidden\";\n  outer.style.width = \"100px\";\n  outer.style.position = \"absolute\";\n  outer.style.top = \"-9999px\";\n  document.body.appendChild(outer);\n  var widthNoScroll = outer.offsetWidth;\n  outer.style.overflow = \"scroll\";\n  var inner = document.createElement(\"div\");\n  inner.style.width = \"100%\";\n  outer.appendChild(inner);\n  var widthWithScroll = inner.offsetWidth;\n  (_a = outer.parentNode) == null ? void 0 : _a.removeChild(outer);\n  scrollBarWidth = widthNoScroll - widthWithScroll;\n  return scrollBarWidth;\n};\n\nfunction scrollIntoView(container, selected) {\n  if (!isClient) return;\n\n  if (!selected) {\n    container.scrollTop = 0;\n    return;\n  }\n\n  var offsetParents = [];\n  var pointer = selected.offsetParent;\n\n  while (pointer !== null && container !== pointer && container.contains(pointer)) {\n    offsetParents.push(pointer);\n    pointer = pointer.offsetParent;\n  }\n\n  var top = selected.offsetTop + offsetParents.reduce(function (prev, curr) {\n    return prev + curr.offsetTop;\n  }, 0);\n  var bottom = top + selected.offsetHeight;\n  var viewRectTop = container.scrollTop;\n  var viewRectBottom = viewRectTop + container.clientHeight;\n\n  if (top < viewRectTop) {\n    container.scrollTop = top;\n  } else if (bottom > viewRectBottom) {\n    container.scrollTop = bottom - container.clientHeight;\n  }\n}\n\nexport { getScrollBarWidth, getScrollContainer, isScroll, scrollIntoView };","map":{"version":3,"mappings":"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","names":["isScroll","el","isVertical","isClient","key","undefined","String","overflow","getStyle","some","s","includes","getScrollContainer","parent","window","document","documentElement","parentNode","scrollBarWidth","getScrollBarWidth","_a","outer","createElement","className","style","visibility","width","position","top","body","appendChild","widthNoScroll","offsetWidth","inner","widthWithScroll","removeChild","scrollIntoView","container","selected","scrollTop","offsetParents","pointer","offsetParent","contains","push","offsetTop","reduce","prev","curr","bottom","offsetHeight","viewRectTop","viewRectBottom","clientHeight"],"sources":["../../../../../packages/utils/dom/scroll.ts"],"sourcesContent":["import { isClient } from '@vueuse/core'\nimport { getStyle } from './style'\n\nexport const isScroll = (el: HTMLElement, isVertical?: boolean): boolean => {\n  if (!isClient) return false\n\n  const key = (\n    {\n      undefined: 'overflow',\n      true: 'overflow-y',\n      false: 'overflow-x',\n    } as const\n  )[String(isVertical)]!\n  const overflow = getStyle(el, key)\n  return ['scroll', 'auto', 'overlay'].some((s) => overflow.includes(s))\n}\n\nexport const getScrollContainer = (\n  el: HTMLElement,\n  isVertical?: boolean\n): Window | HTMLElement | undefined => {\n  if (!isClient) return\n\n  let parent: HTMLElement = el\n  while (parent) {\n    if ([window, document, document.documentElement].includes(parent))\n      return window\n\n    if (isScroll(parent, isVertical)) return parent\n\n    parent = parent.parentNode as HTMLElement\n  }\n\n  return parent\n}\n\nlet scrollBarWidth: number\nexport const getScrollBarWidth = (): number => {\n  if (!isClient) return 0\n  if (scrollBarWidth !== undefined) return scrollBarWidth\n\n  const outer = document.createElement('div')\n  outer.className = 'el-scrollbar__wrap'\n  outer.style.visibility = 'hidden'\n  outer.style.width = '100px'\n  outer.style.position = 'absolute'\n  outer.style.top = '-9999px'\n  document.body.appendChild(outer)\n\n  const widthNoScroll = outer.offsetWidth\n  outer.style.overflow = 'scroll'\n\n  const inner = document.createElement('div')\n  inner.style.width = '100%'\n  outer.appendChild(inner)\n\n  const widthWithScroll = inner.offsetWidth\n  outer.parentNode?.removeChild(outer)\n  scrollBarWidth = widthNoScroll - widthWithScroll\n\n  return scrollBarWidth\n}\n\n/**\n * Scroll with in the container element, positioning the **selected** element at the top\n * of the container\n */\nexport function scrollIntoView(\n  container: HTMLElement,\n  selected: HTMLElement\n): void {\n  if (!isClient) return\n\n  if (!selected) {\n    container.scrollTop = 0\n    return\n  }\n\n  const offsetParents: HTMLElement[] = []\n  let pointer = selected.offsetParent\n  while (\n    pointer !== null &&\n    container !== pointer &&\n    container.contains(pointer)\n  ) {\n    offsetParents.push(pointer as HTMLElement)\n    pointer = (pointer as HTMLElement).offsetParent\n  }\n  const top =\n    selected.offsetTop +\n    offsetParents.reduce((prev, curr) => prev + curr.offsetTop, 0)\n  const bottom = top + selected.offsetHeight\n  const viewRectTop = container.scrollTop\n  const viewRectBottom = viewRectTop + container.clientHeight\n\n  if (top < viewRectTop) {\n    container.scrollTop = top\n  } else if (bottom > viewRectBottom) {\n    container.scrollTop = bottom - container.clientHeight\n  }\n}\n"]},"metadata":{},"sourceType":"module"}