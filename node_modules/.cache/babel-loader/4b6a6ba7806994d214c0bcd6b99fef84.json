{"ast":null,"code":"import _defineProperty from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _autocompleteEmits;\n\nimport \"core-js/modules/es.number.constructor.js\";\nimport { NOOP, isString, isObject } from '@vue/shared';\nimport '../../../utils/index.mjs';\nimport '../../tooltip/index.mjs';\nimport '../../../constants/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props.mjs';\nimport { useTooltipContentProps } from '../../tooltip/src/tooltip.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nvar autocompleteProps = buildProps({\n  valueKey: {\n    type: String,\n    \"default\": \"value\"\n  },\n  modelValue: {\n    type: [String, Number],\n    \"default\": \"\"\n  },\n  debounce: {\n    type: Number,\n    \"default\": 300\n  },\n  placement: {\n    type: definePropType(String),\n    values: [\"top\", \"top-start\", \"top-end\", \"bottom\", \"bottom-start\", \"bottom-end\"],\n    \"default\": \"bottom-start\"\n  },\n  fetchSuggestions: {\n    type: definePropType([Function, Array]),\n    \"default\": NOOP\n  },\n  popperClass: {\n    type: String,\n    \"default\": \"\"\n  },\n  triggerOnFocus: {\n    type: Boolean,\n    \"default\": true\n  },\n  selectWhenUnmatched: {\n    type: Boolean,\n    \"default\": false\n  },\n  hideLoading: {\n    type: Boolean,\n    \"default\": false\n  },\n  popperAppendToBody: {\n    type: Boolean,\n    \"default\": void 0\n  },\n  teleported: useTooltipContentProps.teleported,\n  highlightFirstItem: {\n    type: Boolean,\n    \"default\": false\n  }\n});\nvar autocompleteEmits = (_autocompleteEmits = {}, _defineProperty(_autocompleteEmits, UPDATE_MODEL_EVENT, function (value) {\n  return isString(value);\n}), _defineProperty(_autocompleteEmits, \"input\", function input(value) {\n  return isString(value);\n}), _defineProperty(_autocompleteEmits, \"change\", function change(value) {\n  return isString(value);\n}), _defineProperty(_autocompleteEmits, \"focus\", function focus(evt) {\n  return evt instanceof FocusEvent;\n}), _defineProperty(_autocompleteEmits, \"blur\", function blur(evt) {\n  return evt instanceof FocusEvent;\n}), _defineProperty(_autocompleteEmits, \"clear\", function clear() {\n  return true;\n}), _defineProperty(_autocompleteEmits, \"select\", function select(item) {\n  return isObject(item);\n}), _autocompleteEmits);\nexport { autocompleteEmits, autocompleteProps };","map":{"version":3,"mappings":";;;;;;;;;;;;AASY,IAACA,iBAAiB,GAAGC,UAAU,CAAC;AAC1CC,UAAQ,EAAE;AACRC,QAAI,EAAEC,MADE;AAER,eAAS;AAFD,GADgC;AAK1CC,YAAU,EAAE;AACVF,QAAI,EAAE,CAACC,MAAD,EAASE,MAAT,CADI;AAEV,eAAS;AAFC,GAL8B;AAS1CC,UAAQ,EAAE;AACRJ,QAAI,EAAEG,MADE;AAER,eAAS;AAFD,GATgC;AAa1CE,WAAS,EAAE;AACTL,QAAI,EAAEM,cAAc,CAACL,MAAD,CADX;AAETM,UAAM,EAAE,CACN,KADM,EAEN,WAFM,EAGN,SAHM,EAIN,QAJM,EAKN,cALM,EAMN,YANM,CAFC;AAUT,eAAS;AAVA,GAb+B;AAyB1CC,kBAAgB,EAAE;AAChBR,QAAI,EAAEM,cAAc,CAAC,CAACG,QAAD,EAAWC,KAAX,CAAD,CADJ;AAEhB,eAASC;AAFO,GAzBwB;AA6B1CC,aAAW,EAAE;AACXZ,QAAI,EAAEC,MADK;AAEX,eAAS;AAFE,GA7B6B;AAiC1CY,gBAAc,EAAE;AACdb,QAAI,EAAEc,OADQ;AAEd,eAAS;AAFK,GAjC0B;AAqC1CC,qBAAmB,EAAE;AACnBf,QAAI,EAAEc,OADa;AAEnB,eAAS;AAFU,GArCqB;AAyC1CE,aAAW,EAAE;AACXhB,QAAI,EAAEc,OADK;AAEX,eAAS;AAFE,GAzC6B;AA6C1CG,oBAAkB,EAAE;AAClBjB,QAAI,EAAEc,OADY;AAElB,eAAS,KAAK;AAFI,GA7CsB;AAiD1CI,YAAU,EAAEC,sBAAsB,CAACD,UAjDO;AAkD1CE,oBAAkB,EAAE;AAClBpB,QAAI,EAAEc,OADY;AAElB,eAAS;AAFS;AAlDsB,CAAD,CAA/B;AAuDA,IAACO,iBAAiB,iEAC3BC,kBAD2B,EACN,UAACC,KAAD;AAAA,SAAWC,QAAQ,CAACD,KAAD,CAAnB;AAAA,CADM,gDAErB,eAACA,KAAD;AAAA,SAAWC,QAAQ,CAACD,KAAD,CAAnB;AAAA,CAFqB,iDAGpB,gBAACA,KAAD;AAAA,SAAWC,QAAQ,CAACD,KAAD,CAAnB;AAAA,CAHoB,gDAIrB,eAACE,GAAD;AAAA,SAASA,GAAG,YAAYC,UAAxB;AAAA,CAJqB,+CAKtB,cAACD,GAAD;AAAA,SAASA,GAAG,YAAYC,UAAxB;AAAA,CALsB,gDAMrB;AAAA,SAAM,IAAN;AAAA,CANqB,iDAOpB,gBAACC,IAAD;AAAA,SAAUC,QAAQ,CAACD,IAAD,CAAlB;AAAA,CAPoB,sBAAlB","names":["autocompleteProps","buildProps","valueKey","type","String","modelValue","Number","debounce","placement","definePropType","values","fetchSuggestions","Function","Array","NOOP","popperClass","triggerOnFocus","Boolean","selectWhenUnmatched","hideLoading","popperAppendToBody","teleported","useTooltipContentProps","highlightFirstItem","autocompleteEmits","UPDATE_MODEL_EVENT","value","isString","evt","FocusEvent","item","isObject"],"sources":["../../../../../../packages/components/autocomplete/src/autocomplete.ts"],"sourcesContent":["import { NOOP } from '@vue/shared'\nimport {\n  buildProps,\n  definePropType,\n  isObject,\n  isString,\n} from '@element-plus/utils'\nimport { useTooltipContentProps } from '@element-plus/components/tooltip'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport type { ExtractPropTypes } from 'vue'\nimport type Autocomplete from './autocomplete.vue'\nimport type { Placement } from '@element-plus/components/popper'\n\nexport const autocompleteProps = buildProps({\n  valueKey: {\n    type: String,\n    default: 'value',\n  },\n  modelValue: {\n    type: [String, Number],\n    default: '',\n  },\n  debounce: {\n    type: Number,\n    default: 300,\n  },\n  placement: {\n    type: definePropType<Placement>(String),\n    values: [\n      'top',\n      'top-start',\n      'top-end',\n      'bottom',\n      'bottom-start',\n      'bottom-end',\n    ],\n    default: 'bottom-start',\n  },\n  fetchSuggestions: {\n    type: definePropType<\n      | ((\n          queryString: string,\n          cb: (data: { value: string }[]) => void\n        ) => { value: string }[] | Promise<{ value: string }[]> | void)\n      | { value: string }[]\n    >([Function, Array]),\n    default: NOOP,\n  },\n  popperClass: {\n    type: String,\n    default: '',\n  },\n  triggerOnFocus: {\n    type: Boolean,\n    default: true,\n  },\n  selectWhenUnmatched: {\n    type: Boolean,\n    default: false,\n  },\n  hideLoading: {\n    type: Boolean,\n    default: false,\n  },\n  popperAppendToBody: {\n    type: Boolean,\n    default: undefined,\n  },\n  teleported: useTooltipContentProps.teleported,\n  highlightFirstItem: {\n    type: Boolean,\n    default: false,\n  },\n} as const)\nexport type AutocompleteProps = ExtractPropTypes<typeof autocompleteProps>\n\nexport const autocompleteEmits = {\n  [UPDATE_MODEL_EVENT]: (value: string) => isString(value),\n  input: (value: string) => isString(value),\n  change: (value: string) => isString(value),\n  focus: (evt: FocusEvent) => evt instanceof FocusEvent,\n  blur: (evt: FocusEvent) => evt instanceof FocusEvent,\n  clear: () => true,\n  select: (item: { value: any }) => isObject(item),\n}\nexport type AutocompleteEmits = typeof autocompleteEmits\n\nexport type AutocompleteInstance = InstanceType<typeof Autocomplete>\n"]},"metadata":{},"sourceType":"module"}