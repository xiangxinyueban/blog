{"ast":null,"code":"import _toConsumableArray from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport { ref, unref, provide, inject, onMounted, onBeforeUnmount } from 'vue';\nimport Collection from './collection2.mjs';\nimport CollectionItem from './collection-item.mjs';\nvar COLLECTION_ITEM_SIGN = \"data-el-collection-item\";\n\nvar createCollectionWithScope = function createCollectionWithScope(name) {\n  var COLLECTION_NAME = \"El\".concat(name, \"Collection\");\n  var COLLECTION_ITEM_NAME = \"\".concat(COLLECTION_NAME, \"Item\");\n  var COLLECTION_INJECTION_KEY = Symbol(COLLECTION_NAME);\n  var COLLECTION_ITEM_INJECTION_KEY = Symbol(COLLECTION_ITEM_NAME);\n\n  var ElCollection = _objectSpread(_objectSpread({}, Collection), {}, {\n    name: COLLECTION_NAME,\n    setup: function setup() {\n      var collectionRef = ref(null);\n      var itemMap = /* @__PURE__ */new Map();\n\n      var getItems = function getItems() {\n        var collectionEl = unref(collectionRef);\n        if (!collectionEl) return [];\n        var orderedNodes = Array.from(collectionEl.querySelectorAll(\"[\".concat(COLLECTION_ITEM_SIGN, \"]\")));\n\n        var items = _toConsumableArray(itemMap.values());\n\n        var orderedItems = items.sort(function (a, b) {\n          return orderedNodes.indexOf(a.ref) - orderedNodes.indexOf(b.ref);\n        });\n        return orderedItems;\n      };\n\n      provide(COLLECTION_INJECTION_KEY, {\n        itemMap: itemMap,\n        getItems: getItems,\n        collectionRef: collectionRef\n      });\n    }\n  });\n\n  var ElCollectionItem = _objectSpread(_objectSpread({}, CollectionItem), {}, {\n    name: COLLECTION_ITEM_NAME,\n    setup: function setup(_, _ref) {\n      var attrs = _ref.attrs;\n      var collectionItemRef = ref(null);\n      var collectionInjection = inject(COLLECTION_INJECTION_KEY, void 0);\n      provide(COLLECTION_ITEM_INJECTION_KEY, {\n        collectionItemRef: collectionItemRef\n      });\n      onMounted(function () {\n        var collectionItemEl = unref(collectionItemRef);\n\n        if (collectionItemEl) {\n          collectionInjection.itemMap.set(collectionItemEl, _objectSpread({\n            ref: collectionItemEl\n          }, attrs));\n        }\n      });\n      onBeforeUnmount(function () {\n        var collectionItemEl = unref(collectionItemRef);\n        collectionInjection.itemMap[\"delete\"](collectionItemEl);\n      });\n    }\n  });\n\n  return {\n    COLLECTION_INJECTION_KEY: COLLECTION_INJECTION_KEY,\n    COLLECTION_ITEM_INJECTION_KEY: COLLECTION_ITEM_INJECTION_KEY,\n    ElCollection: ElCollection,\n    ElCollectionItem: ElCollectionItem\n  };\n};\n\nexport { COLLECTION_ITEM_SIGN, createCollectionWithScope };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAGY,IAACA,oBAAoB,4BAArB;;AACA,IAACC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,IAAD,EAAU;AACjD,MAAMC,eAAe,eAAQD,IAAR,eAArB;AACA,MAAME,oBAAoB,aAAMD,eAAN,SAA1B;AACA,MAAME,wBAAwB,GAAGC,MAAM,CAACH,eAAD,CAAvC;AACA,MAAMI,6BAA6B,GAAGD,MAAM,CAACF,oBAAD,CAA5C;;AACA,MAAMI,YAAY,mCACbC,UADa;AAEhBP,QAAI,EAAEC,eAFU;AAGhBO,SAHgB,mBAGR;AACN,UAAMC,aAAa,GAAGC,GAAG,CAAC,IAAD,CAAzB;AACA,UAAMC,OAAO,kBAAmB,IAAIC,GAAJ,EAAhC;;AACA,UAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,YAAMC,YAAY,GAAGC,KAAK,CAACN,aAAD,CAA1B;AACA,YAAI,CAACK,YAAL,EACE,OAAO,EAAP;AACF,YAAME,YAAY,GAAGC,KAAK,CAACC,IAAN,CAAWJ,YAAY,CAACK,gBAAb,YAAkCrB,oBAAlC,OAAX,CAArB;;AACA,YAAMsB,KAAK,sBAAOT,OAAO,CAACU,MAAR,EAAP,CAAX;;AACA,YAAMC,YAAY,GAAGF,KAAK,CAACG,IAAN,CAAW,UAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAUT,YAAY,CAACU,OAAb,CAAqBF,CAAC,CAACd,GAAvB,IAA8BM,YAAY,CAACU,OAAb,CAAqBD,CAAC,CAACf,GAAvB,CAAxC;AAAA,SAAX,CAArB;AACA,eAAOY,YAAP;AACD,OARD;;AASAK,aAAO,CAACxB,wBAAD,EAA2B;AAChCQ,eAAO,EAAPA,OADgC;AAEhCE,gBAAQ,EAARA,QAFgC;AAGhCJ,qBAAa,EAAbA;AAHgC,OAA3B,CAAP;AAKD;AApBe,IAAlB;;AAsBA,MAAMmB,gBAAgB,mCACjBC,cADiB;AAEpB7B,QAAI,EAAEE,oBAFc;AAGpBM,SAHoB,iBAGdsB,CAHc,QAGA;AAAA,UAATC,KAAS,QAATA,KAAS;AAClB,UAAMC,iBAAiB,GAAGtB,GAAG,CAAC,IAAD,CAA7B;AACA,UAAMuB,mBAAmB,GAAGC,MAAM,CAAC/B,wBAAD,EAA2B,KAAK,CAAhC,CAAlC;AACAwB,aAAO,CAACtB,6BAAD,EAAgC;AACrC2B,yBAAiB,EAAjBA;AADqC,OAAhC,CAAP;AAGAG,eAAS,CAAC,YAAM;AACd,YAAMC,gBAAgB,GAAGrB,KAAK,CAACiB,iBAAD,CAA9B;;AACA,YAAII,gBAAJ,EAAsB;AACpBH,6BAAmB,CAACtB,OAApB,CAA4B0B,GAA5B,CAAgCD,gBAAhC;AACE1B,eAAG,EAAE0B;AADP,aAEKL,KAFL;AAID;AACF,OARQ,CAAT;AASAO,qBAAe,CAAC,YAAM;AACpB,YAAMF,gBAAgB,GAAGrB,KAAK,CAACiB,iBAAD,CAA9B;AACAC,2BAAmB,CAACtB,OAApB,WAAmCyB,gBAAnC;AACD,OAHc,CAAf;AAID;AAtBmB,IAAtB;;AAwBA,SAAO;AACLjC,4BAAwB,EAAxBA,wBADK;AAELE,iCAA6B,EAA7BA,6BAFK;AAGLC,gBAAY,EAAZA,YAHK;AAILsB,oBAAgB,EAAhBA;AAJK,GAAP;AAMF,CAzDY","names":["COLLECTION_ITEM_SIGN","createCollectionWithScope","name","COLLECTION_NAME","COLLECTION_ITEM_NAME","COLLECTION_INJECTION_KEY","Symbol","COLLECTION_ITEM_INJECTION_KEY","ElCollection","Collection","setup","collectionRef","ref","itemMap","Map","getItems","collectionEl","unref","orderedNodes","Array","from","querySelectorAll","items","values","orderedItems","sort","a","b","indexOf","provide","ElCollectionItem","CollectionItem","_","attrs","collectionItemRef","collectionInjection","inject","onMounted","collectionItemEl","set","onBeforeUnmount"],"sources":["../../../../../../packages/components/collection/src/collection.ts"],"sourcesContent":["import { inject, onBeforeUnmount, onMounted, provide, ref, unref } from 'vue'\nimport Collection from './collection.vue'\nimport CollectionItem from './collection-item.vue'\n\nimport type { InjectionKey } from 'vue'\nimport type {\n  ElCollectionInjectionContext,\n  ElCollectionItemInjectionContext,\n} from './tokens'\n\nexport const COLLECTION_ITEM_SIGN = `data-el-collection-item`\n\n// Make sure the first letter of name is capitalized\nexport const createCollectionWithScope = (name: string) => {\n  const COLLECTION_NAME = `El${name}Collection`\n  const COLLECTION_ITEM_NAME = `${COLLECTION_NAME}Item`\n  const COLLECTION_INJECTION_KEY: InjectionKey<ElCollectionInjectionContext> =\n    Symbol(COLLECTION_NAME)\n  const COLLECTION_ITEM_INJECTION_KEY: InjectionKey<ElCollectionItemInjectionContext> =\n    Symbol(COLLECTION_ITEM_NAME)\n\n  const ElCollection = {\n    ...Collection,\n    name: COLLECTION_NAME,\n    setup() {\n      const collectionRef = ref<HTMLElement | null>(null)\n      const itemMap: ElCollectionInjectionContext['itemMap'] = new Map()\n      const getItems = () => {\n        const collectionEl = unref(collectionRef)\n\n        if (!collectionEl) return []\n        const orderedNodes = Array.from(\n          collectionEl.querySelectorAll(`[${COLLECTION_ITEM_SIGN}]`)\n        )\n\n        const items = [...itemMap.values()]\n\n        const orderedItems = items.sort(\n          (a, b) => orderedNodes.indexOf(a.ref!) - orderedNodes.indexOf(b.ref!)\n        )\n        return orderedItems\n      }\n\n      provide(COLLECTION_INJECTION_KEY, {\n        itemMap,\n        getItems,\n        collectionRef,\n      })\n    },\n  }\n\n  const ElCollectionItem = {\n    ...CollectionItem,\n    name: COLLECTION_ITEM_NAME,\n    setup(_, { attrs }) {\n      const collectionItemRef = ref<HTMLElement | null>(null)\n      const collectionInjection = inject(COLLECTION_INJECTION_KEY, undefined)!\n\n      provide(COLLECTION_ITEM_INJECTION_KEY, {\n        collectionItemRef,\n      })\n\n      onMounted(() => {\n        const collectionItemEl = unref(collectionItemRef)\n        if (collectionItemEl) {\n          collectionInjection.itemMap.set(collectionItemEl, {\n            ref: collectionItemEl,\n            ...attrs,\n          })\n        }\n      })\n\n      onBeforeUnmount(() => {\n        const collectionItemEl = unref(collectionItemRef)!\n        collectionInjection.itemMap.delete(collectionItemEl)\n      })\n    },\n  }\n\n  return {\n    COLLECTION_INJECTION_KEY,\n    COLLECTION_ITEM_INJECTION_KEY,\n    ElCollection,\n    ElCollectionItem,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}