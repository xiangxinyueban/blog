{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, watch, onMounted, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle } from 'vue';\nimport '../../../../utils/index.mjs';\nimport draggable from '../draggable.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElColorHueSlider\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    },\n    vertical: Boolean\n  },\n  setup: function setup(props) {\n    var instance = getCurrentInstance();\n    var thumb = ref(null);\n    var bar = ref(null);\n    var thumbLeft = ref(0);\n    var thumbTop = ref(0);\n    var hueValue = computed(function () {\n      return props.color.get(\"hue\");\n    });\n    watch(function () {\n      return hueValue.value;\n    }, function () {\n      update();\n    });\n\n    function handleClick(event) {\n      var target = event.target;\n\n      if (target !== thumb.value) {\n        handleDrag(event);\n      }\n    }\n\n    function handleDrag(event) {\n      var el = instance.vnode.el;\n      var rect = el.getBoundingClientRect();\n\n      var _getClientXY = getClientXY(event),\n          clientX = _getClientXY.clientX,\n          clientY = _getClientXY.clientY;\n\n      var hue;\n\n      if (!props.vertical) {\n        var left = clientX - rect.left;\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2);\n        left = Math.max(thumb.value.offsetWidth / 2, left);\n        hue = Math.round((left - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 360);\n      } else {\n        var top = clientY - rect.top;\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);\n        top = Math.max(thumb.value.offsetHeight / 2, top);\n        hue = Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 360);\n      }\n\n      props.color.set(\"hue\", hue);\n    }\n\n    function getThumbLeft() {\n      var el = instance.vnode.el;\n      if (props.vertical) return 0;\n      var hue = props.color.get(\"hue\");\n      if (!el) return 0;\n      return Math.round(hue * (el.offsetWidth - thumb.value.offsetWidth / 2) / 360);\n    }\n\n    function getThumbTop() {\n      var el = instance.vnode.el;\n      if (!props.vertical) return 0;\n      var hue = props.color.get(\"hue\");\n      if (!el) return 0;\n      return Math.round(hue * (el.offsetHeight - thumb.value.offsetHeight / 2) / 360);\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft();\n      thumbTop.value = getThumbTop();\n    }\n\n    onMounted(function () {\n      var dragConfig = {\n        drag: function drag(event) {\n          handleDrag(event);\n        },\n        end: function end(event) {\n          handleDrag(event);\n        }\n      };\n      draggable(bar.value, dragConfig);\n      draggable(thumb.value, dragConfig);\n      update();\n    });\n    return {\n      bar: bar,\n      thumb: thumb,\n      thumbLeft: thumbLeft,\n      thumbTop: thumbTop,\n      hueValue: hueValue,\n      handleClick: handleClick,\n      update: update\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    \"class\": normalizeClass([\"el-color-hue-slider\", {\n      \"is-vertical\": _ctx.vertical\n    }])\n  }, [createElementVNode(\"div\", {\n    ref: \"bar\",\n    \"class\": \"el-color-hue-slider__bar\",\n    onClick: _cache[0] || (_cache[0] = function () {\n      return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);\n    })\n  }, null, 512), createElementVNode(\"div\", {\n    ref: \"thumb\",\n    \"class\": \"el-color-hue-slider__thumb\",\n    style: normalizeStyle({\n      left: _ctx.thumbLeft + \"px\",\n      top: _ctx.thumbTop + \"px\"\n    })\n  }, null, 4)], 2);\n}\n\nvar HueSlider = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/hue-slider.vue\"]]);\n\nexport { HueSlider as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","props","color","type","required","vertical","setup","instance","getCurrentInstance","ref","computed","get","watch","hueValue","update","event","target","thumb","value","handleDrag","vnode","el","getBoundingClientRect","getClientXY","clientX","clientY","rect","left","min","width","offsetWidth","Math","max","hue","top","height","offsetHeight","set","round","thumbLeft","getThumbLeft","thumbTop","getThumbTop","onMounted","dragConfig","drag","end","draggable","bar","handleClick","_createElementBlock","_normalizeClass","_ctx","_createElementVNode","onClick","_cache","style"],"sources":["../../../../../../../packages/components/color-picker/src/components/hue-slider.vue"],"sourcesContent":["<template>\n  <div class=\"el-color-hue-slider\" :class=\"{ 'is-vertical': vertical }\">\n    <div ref=\"bar\" class=\"el-color-hue-slider__bar\" @click=\"handleClick\" />\n    <div\n      ref=\"thumb\"\n      class=\"el-color-hue-slider__thumb\"\n      :style=\"{\n        left: thumbLeft + 'px',\n        top: thumbTop + 'px',\n      }\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  onMounted,\n  ref,\n  watch,\n} from 'vue'\nimport { getClientXY } from '@element-plus/utils'\nimport draggable from '../draggable'\n\nimport type { PropType } from 'vue'\nimport type Color from '../color'\n\nexport default defineComponent({\n  name: 'ElColorHueSlider',\n\n  props: {\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n\n    vertical: Boolean,\n  },\n  setup(props) {\n    const instance = getCurrentInstance()\n    // ref\n    const thumb = ref<HTMLElement | null>(null)\n    const bar = ref<HTMLElement | null>(null)\n    // data\n    const thumbLeft = ref(0)\n    const thumbTop = ref(0)\n    // computed\n    const hueValue = computed(() => {\n      return props.color.get('hue')\n    })\n    // watch\n    watch(\n      () => hueValue.value,\n      () => {\n        update()\n      }\n    )\n\n    // methods\n    function handleClick(event: Event) {\n      const target = event.target\n\n      if (target !== thumb.value) {\n        handleDrag(event)\n      }\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el as HTMLElement\n      const rect = el.getBoundingClientRect()\n      const { clientX, clientY } = getClientXY(event)\n      let hue\n\n      if (!props.vertical) {\n        let left = clientX - rect.left\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2)\n        left = Math.max(thumb.value.offsetWidth / 2, left)\n\n        hue = Math.round(\n          ((left - thumb.value.offsetWidth / 2) /\n            (rect.width - thumb.value.offsetWidth)) *\n            360\n        )\n      } else {\n        let top = clientY - rect.top\n\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2)\n        top = Math.max(thumb.value.offsetHeight / 2, top)\n        hue = Math.round(\n          ((top - thumb.value.offsetHeight / 2) /\n            (rect.height - thumb.value.offsetHeight)) *\n            360\n        )\n      }\n      props.color.set('hue', hue)\n    }\n\n    function getThumbLeft() {\n      const el = instance.vnode.el\n\n      if (props.vertical) return 0\n      const hue = props.color.get('hue')\n\n      if (!el) return 0\n      return Math.round(\n        (hue * (el.offsetWidth - thumb.value.offsetWidth / 2)) / 360\n      )\n    }\n\n    function getThumbTop() {\n      const el = instance.vnode.el as HTMLElement\n      if (!props.vertical) return 0\n      const hue = props.color.get('hue')\n\n      if (!el) return 0\n      return Math.round(\n        (hue * (el.offsetHeight - thumb.value.offsetHeight / 2)) / 360\n      )\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft()\n      thumbTop.value = getThumbTop()\n    }\n\n    // mounded\n    onMounted(() => {\n      const dragConfig = {\n        drag: (event) => {\n          handleDrag(event)\n        },\n        end: (event) => {\n          handleDrag(event)\n        },\n      }\n\n      draggable(bar.value, dragConfig)\n      draggable(thumb.value, dragConfig)\n      update()\n    })\n\n    return {\n      bar,\n      thumb,\n      thumbLeft,\n      thumbTop,\n      hueValue,\n      handleClick,\n      update,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}