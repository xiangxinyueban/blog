{"ast":null,"code":"import _objectSpread from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { inject, computed, h } from 'vue';\nimport { getRowIdentity } from '../util.mjs';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nimport useEvents from './events-helper.mjs';\nimport useStyles from './styles-helper.mjs';\n\nfunction useRender(props) {\n  var parent = inject(TABLE_INJECTION_KEY);\n\n  var _useEvents = useEvents(props),\n      handleDoubleClick = _useEvents.handleDoubleClick,\n      handleClick = _useEvents.handleClick,\n      handleContextMenu = _useEvents.handleContextMenu,\n      handleMouseEnter = _useEvents.handleMouseEnter,\n      handleMouseLeave = _useEvents.handleMouseLeave,\n      handleCellMouseEnter = _useEvents.handleCellMouseEnter,\n      handleCellMouseLeave = _useEvents.handleCellMouseLeave,\n      tooltipContent = _useEvents.tooltipContent,\n      tooltipTrigger = _useEvents.tooltipTrigger;\n\n  var _useStyles = useStyles(props),\n      getRowStyle = _useStyles.getRowStyle,\n      getRowClass = _useStyles.getRowClass,\n      getCellStyle = _useStyles.getCellStyle,\n      getCellClass = _useStyles.getCellClass,\n      getSpan = _useStyles.getSpan,\n      getColspanRealWidth = _useStyles.getColspanRealWidth;\n\n  var firstDefaultColumnIndex = computed(function () {\n    return props.store.states.columns.value.findIndex(function (_ref) {\n      var type = _ref.type;\n      return type === \"default\";\n    });\n  });\n\n  var getKeyOfRow = function getKeyOfRow(row, index) {\n    var rowKey = parent.props.rowKey;\n\n    if (rowKey) {\n      return getRowIdentity(row, rowKey);\n    }\n\n    return index;\n  };\n\n  var rowRender = function rowRender(row, $index, treeRowData) {\n    var expanded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var tooltipEffect = props.tooltipEffect,\n        store = props.store;\n    var _store$states = store.states,\n        indent = _store$states.indent,\n        columns = _store$states.columns;\n    var rowClasses = getRowClass(row, $index);\n    var display = true;\n\n    if (treeRowData) {\n      rowClasses.push(\"el-table__row--level-\".concat(treeRowData.level));\n      display = treeRowData.display;\n    }\n\n    var displayStyle = display ? null : {\n      display: \"none\"\n    };\n    return h(\"tr\", {\n      style: [displayStyle, getRowStyle(row, $index)],\n      \"class\": rowClasses,\n      key: getKeyOfRow(row, $index),\n      onDblclick: function onDblclick($event) {\n        return handleDoubleClick($event, row);\n      },\n      onClick: function onClick($event) {\n        return handleClick($event, row);\n      },\n      onContextmenu: function onContextmenu($event) {\n        return handleContextMenu($event, row);\n      },\n      onMouseenter: function onMouseenter() {\n        return handleMouseEnter($index);\n      },\n      onMouseleave: handleMouseLeave\n    }, columns.value.map(function (column, cellIndex) {\n      var _getSpan = getSpan(row, column, $index, cellIndex),\n          rowspan = _getSpan.rowspan,\n          colspan = _getSpan.colspan;\n\n      if (!rowspan || !colspan) {\n        return null;\n      }\n\n      var columnData = _objectSpread({}, column);\n\n      columnData.realWidth = getColspanRealWidth(columns.value, colspan, cellIndex);\n      var data = {\n        store: props.store,\n        _self: props.context || parent,\n        column: columnData,\n        row: row,\n        $index: $index,\n        cellIndex: cellIndex,\n        expanded: expanded\n      };\n\n      if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {\n        data.treeNode = {\n          indent: treeRowData.level * indent.value,\n          level: treeRowData.level\n        };\n\n        if (typeof treeRowData.expanded === \"boolean\") {\n          data.treeNode.expanded = treeRowData.expanded;\n\n          if (\"loading\" in treeRowData) {\n            data.treeNode.loading = treeRowData.loading;\n          }\n\n          if (\"noLazyChildren\" in treeRowData) {\n            data.treeNode.noLazyChildren = treeRowData.noLazyChildren;\n          }\n        }\n      }\n\n      var baseKey = \"\".concat($index, \",\").concat(cellIndex);\n      var patchKey = columnData.columnKey || columnData.rawColumnKey || \"\";\n      var tdChildren = cellChildren(cellIndex, column, data);\n      return h(\"td\", {\n        style: getCellStyle($index, cellIndex, row, column),\n        \"class\": getCellClass($index, cellIndex, row, column),\n        key: \"\".concat(patchKey).concat(baseKey),\n        rowspan: rowspan,\n        colspan: colspan,\n        onMouseenter: function onMouseenter($event) {\n          return handleCellMouseEnter($event, _objectSpread(_objectSpread({}, row), {}, {\n            tooltipEffect: tooltipEffect\n          }));\n        },\n        onMouseleave: handleCellMouseLeave\n      }, [tdChildren]);\n    }));\n  };\n\n  var cellChildren = function cellChildren(cellIndex, column, data) {\n    return column.renderCell(data);\n  };\n\n  var wrappedRowRender = function wrappedRowRender(row, $index) {\n    var store = props.store;\n    var isRowExpanded = store.isRowExpanded,\n        assertRowKey = store.assertRowKey;\n    var _store$states2 = store.states,\n        treeData = _store$states2.treeData,\n        lazyTreeNodeMap = _store$states2.lazyTreeNodeMap,\n        childrenColumnName = _store$states2.childrenColumnName,\n        rowKey = _store$states2.rowKey;\n    var columns = store.states.columns.value;\n    var hasExpandColumn = columns.some(function (_ref2) {\n      var type = _ref2.type;\n      return type === \"expand\";\n    });\n\n    if (hasExpandColumn) {\n      var expanded = isRowExpanded(row);\n      var tr = rowRender(row, $index, void 0, expanded);\n      var renderExpanded = parent.renderExpanded;\n\n      if (expanded) {\n        if (!renderExpanded) {\n          console.error(\"[Element Error]renderExpanded is required.\");\n          return tr;\n        }\n\n        return [[tr, h(\"tr\", {\n          key: \"expanded-row__\".concat(tr.key)\n        }, [h(\"td\", {\n          colspan: columns.length,\n          \"class\": \"el-table__cell el-table__expanded-cell\"\n        }, [renderExpanded({\n          row: row,\n          $index: $index,\n          store: store,\n          expanded: expanded\n        })])])]];\n      } else {\n        return [[tr]];\n      }\n    } else if (Object.keys(treeData.value).length) {\n      assertRowKey();\n      var key = getRowIdentity(row, rowKey.value);\n      var cur = treeData.value[key];\n      var treeRowData = null;\n\n      if (cur) {\n        treeRowData = {\n          expanded: cur.expanded,\n          level: cur.level,\n          display: true\n        };\n\n        if (typeof cur.lazy === \"boolean\") {\n          if (typeof cur.loaded === \"boolean\" && cur.loaded) {\n            treeRowData.noLazyChildren = !(cur.children && cur.children.length);\n          }\n\n          treeRowData.loading = cur.loading;\n        }\n      }\n\n      var tmp = [rowRender(row, $index, treeRowData)];\n\n      if (cur) {\n        var i = 0;\n\n        var traverse = function traverse(children, parent2) {\n          if (!(children && children.length && parent2)) return;\n          children.forEach(function (node) {\n            var innerTreeRowData = {\n              display: parent2.display && parent2.expanded,\n              level: parent2.level + 1,\n              expanded: false,\n              noLazyChildren: false,\n              loading: false\n            };\n            var childKey = getRowIdentity(node, rowKey.value);\n\n            if (childKey === void 0 || childKey === null) {\n              throw new Error(\"For nested data item, row-key is required.\");\n            }\n\n            cur = _objectSpread({}, treeData.value[childKey]);\n\n            if (cur) {\n              innerTreeRowData.expanded = cur.expanded;\n              cur.level = cur.level || innerTreeRowData.level;\n              cur.display = !!(cur.expanded && innerTreeRowData.display);\n\n              if (typeof cur.lazy === \"boolean\") {\n                if (typeof cur.loaded === \"boolean\" && cur.loaded) {\n                  innerTreeRowData.noLazyChildren = !(cur.children && cur.children.length);\n                }\n\n                innerTreeRowData.loading = cur.loading;\n              }\n            }\n\n            i++;\n            tmp.push(rowRender(node, $index + i, innerTreeRowData));\n\n            if (cur) {\n              var nodes2 = lazyTreeNodeMap.value[childKey] || node[childrenColumnName.value];\n              traverse(nodes2, cur);\n            }\n          });\n        };\n\n        cur.display = true;\n        var nodes = lazyTreeNodeMap.value[key] || row[childrenColumnName.value];\n        traverse(nodes, cur);\n      }\n\n      return tmp;\n    } else {\n      return rowRender(row, $index, void 0);\n    }\n  };\n\n  return {\n    wrappedRowRender: wrappedRowRender,\n    tooltipContent: tooltipContent,\n    tooltipTrigger: tooltipTrigger\n  };\n}\n\nexport { useRender as default };","map":{"version":3,"mappings":"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","names":["useRender","props","parent","inject","TABLE_INJECTION_KEY","useEvents","handleDoubleClick","handleClick","handleContextMenu","handleMouseEnter","handleMouseLeave","handleCellMouseEnter","handleCellMouseLeave","tooltipContent","tooltipTrigger","useStyles","getRowStyle","getRowClass","getCellStyle","getCellClass","getSpan","getColspanRealWidth","firstDefaultColumnIndex","computed","store","states","columns","value","findIndex","type","getKeyOfRow","row","index","rowKey","getRowIdentity","rowRender","$index","treeRowData","expanded","tooltipEffect","indent","rowClasses","display","push","level","displayStyle","h","style","key","onDblclick","$event","onClick","onContextmenu","onMouseenter","onMouseleave","map","column","cellIndex","rowspan","colspan","columnData","realWidth","data","_self","context","treeNode","loading","noLazyChildren","baseKey","patchKey","columnKey","rawColumnKey","tdChildren","cellChildren","renderCell","wrappedRowRender","isRowExpanded","assertRowKey","treeData","lazyTreeNodeMap","childrenColumnName","hasExpandColumn","some","tr","renderExpanded","console","error","length","Object","keys","cur","lazy","loaded","children","tmp","i","traverse","parent2","forEach","node","innerTreeRowData","childKey","Error","nodes2","nodes"],"sources":["../../../../../../../packages/components/table/src/table-body/render-helper.ts"],"sourcesContent":["import { computed, h, inject } from 'vue'\nimport { getRowIdentity } from '../util'\nimport { TABLE_INJECTION_KEY } from '../tokens'\nimport useEvents from './events-helper'\nimport useStyles from './styles-helper'\nimport type { TableBodyProps } from './defaults'\nimport type { RenderRowData, TableProps, TreeNode } from '../table/defaults'\n\nfunction useRender<T>(props: Partial<TableBodyProps<T>>) {\n  const parent = inject(TABLE_INJECTION_KEY)\n  const {\n    handleDoubleClick,\n    handleClick,\n    handleContextMenu,\n    handleMouseEnter,\n    handleMouseLeave,\n    handleCellMouseEnter,\n    handleCellMouseLeave,\n    tooltipContent,\n    tooltipTrigger,\n  } = useEvents(props)\n  const {\n    getRowStyle,\n    getRowClass,\n    getCellStyle,\n    getCellClass,\n    getSpan,\n    getColspanRealWidth,\n  } = useStyles(props)\n  const firstDefaultColumnIndex = computed(() => {\n    return props.store.states.columns.value.findIndex(\n      ({ type }) => type === 'default'\n    )\n  })\n  const getKeyOfRow = (row: T, index: number) => {\n    const rowKey = (parent.props as Partial<TableProps<T>>).rowKey\n    if (rowKey) {\n      return getRowIdentity(row, rowKey)\n    }\n    return index\n  }\n  const rowRender = (\n    row: T,\n    $index: number,\n    treeRowData?: TreeNode,\n    expanded = false\n  ) => {\n    const { tooltipEffect, store } = props\n    const { indent, columns } = store.states\n    const rowClasses = getRowClass(row, $index)\n    let display = true\n    if (treeRowData) {\n      rowClasses.push(`el-table__row--level-${treeRowData.level}`)\n      display = treeRowData.display\n    }\n    const displayStyle = display\n      ? null\n      : {\n          display: 'none',\n        }\n    return h(\n      'tr',\n      {\n        style: [displayStyle, getRowStyle(row, $index)],\n        class: rowClasses,\n        key: getKeyOfRow(row, $index),\n        onDblclick: ($event) => handleDoubleClick($event, row),\n        onClick: ($event) => handleClick($event, row),\n        onContextmenu: ($event) => handleContextMenu($event, row),\n        onMouseenter: () => handleMouseEnter($index),\n        onMouseleave: handleMouseLeave,\n      },\n      columns.value.map((column, cellIndex) => {\n        const { rowspan, colspan } = getSpan(row, column, $index, cellIndex)\n        if (!rowspan || !colspan) {\n          return null\n        }\n        const columnData = { ...column }\n        columnData.realWidth = getColspanRealWidth(\n          columns.value,\n          colspan,\n          cellIndex\n        )\n        const data: RenderRowData<T> = {\n          store: props.store,\n          _self: props.context || parent,\n          column: columnData,\n          row,\n          $index,\n          cellIndex,\n          expanded,\n        }\n        if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {\n          data.treeNode = {\n            indent: treeRowData.level * indent.value,\n            level: treeRowData.level,\n          }\n          if (typeof treeRowData.expanded === 'boolean') {\n            data.treeNode.expanded = treeRowData.expanded\n            // 表明是懒加载\n            if ('loading' in treeRowData) {\n              data.treeNode.loading = treeRowData.loading\n            }\n            if ('noLazyChildren' in treeRowData) {\n              data.treeNode.noLazyChildren = treeRowData.noLazyChildren\n            }\n          }\n        }\n        const baseKey = `${$index},${cellIndex}`\n        const patchKey = columnData.columnKey || columnData.rawColumnKey || ''\n        const tdChildren = cellChildren(cellIndex, column, data)\n        return h(\n          'td',\n          {\n            style: getCellStyle($index, cellIndex, row, column),\n            class: getCellClass($index, cellIndex, row, column),\n            key: `${patchKey}${baseKey}`,\n            rowspan,\n            colspan,\n            onMouseenter: ($event) =>\n              handleCellMouseEnter($event, { ...row, tooltipEffect }),\n            onMouseleave: handleCellMouseLeave,\n          },\n          [tdChildren]\n        )\n      })\n    )\n  }\n  const cellChildren = (cellIndex, column, data) => {\n    return column.renderCell(data)\n  }\n\n  const wrappedRowRender = (row: T, $index: number) => {\n    const store = props.store\n    const { isRowExpanded, assertRowKey } = store\n    const { treeData, lazyTreeNodeMap, childrenColumnName, rowKey } =\n      store.states\n    const columns = store.states.columns.value\n    const hasExpandColumn = columns.some(({ type }) => type === 'expand')\n    if (hasExpandColumn) {\n      const expanded = isRowExpanded(row)\n      const tr = rowRender(row, $index, undefined, expanded)\n      const renderExpanded = parent.renderExpanded\n      if (expanded) {\n        if (!renderExpanded) {\n          console.error('[Element Error]renderExpanded is required.')\n          return tr\n        }\n        // 使用二维数组，避免修改 $index\n        // Use a matrix to avoid modifying $index\n        return [\n          [\n            tr,\n            h(\n              'tr',\n              {\n                key: `expanded-row__${tr.key as string}`,\n              },\n              [\n                h(\n                  'td',\n                  {\n                    colspan: columns.length,\n                    class: 'el-table__cell el-table__expanded-cell',\n                  },\n                  [renderExpanded({ row, $index, store, expanded })]\n                ),\n              ]\n            ),\n          ],\n        ]\n      } else {\n        // 使用二维数组，避免修改 $index\n        // Use a two dimensional array avoid modifying $index\n        return [[tr]]\n      }\n    } else if (Object.keys(treeData.value).length) {\n      assertRowKey()\n      // TreeTable 时，rowKey 必须由用户设定，不使用 getKeyOfRow 计算\n      // 在调用 rowRender 函数时，仍然会计算 rowKey，不太好的操作\n      const key = getRowIdentity(row, rowKey.value)\n      let cur = treeData.value[key]\n      let treeRowData = null\n      if (cur) {\n        treeRowData = {\n          expanded: cur.expanded,\n          level: cur.level,\n          display: true,\n        }\n        if (typeof cur.lazy === 'boolean') {\n          if (typeof cur.loaded === 'boolean' && cur.loaded) {\n            treeRowData.noLazyChildren = !(cur.children && cur.children.length)\n          }\n          treeRowData.loading = cur.loading\n        }\n      }\n      const tmp = [rowRender(row, $index, treeRowData)]\n      // 渲染嵌套数据\n      if (cur) {\n        // currentRow 记录的是 index，所以还需主动增加 TreeTable 的 index\n        let i = 0\n        const traverse = (children, parent) => {\n          if (!(children && children.length && parent)) return\n          children.forEach((node) => {\n            // 父节点的 display 状态影响子节点的显示状态\n            const innerTreeRowData = {\n              display: parent.display && parent.expanded,\n              level: parent.level + 1,\n              expanded: false,\n              noLazyChildren: false,\n              loading: false,\n            }\n            const childKey = getRowIdentity(node, rowKey.value)\n            if (childKey === undefined || childKey === null) {\n              throw new Error('For nested data item, row-key is required.')\n            }\n            cur = { ...treeData.value[childKey] }\n            // 对于当前节点，分成有无子节点两种情况。\n            // 如果包含子节点的，设置 expanded 属性。\n            // 对于它子节点的 display 属性由它本身的 expanded 与 display 共同决定。\n            if (cur) {\n              innerTreeRowData.expanded = cur.expanded\n              // 懒加载的某些节点，level 未知\n              cur.level = cur.level || innerTreeRowData.level\n              cur.display = !!(cur.expanded && innerTreeRowData.display)\n              if (typeof cur.lazy === 'boolean') {\n                if (typeof cur.loaded === 'boolean' && cur.loaded) {\n                  innerTreeRowData.noLazyChildren = !(\n                    cur.children && cur.children.length\n                  )\n                }\n                innerTreeRowData.loading = cur.loading\n              }\n            }\n            i++\n            tmp.push(rowRender(node, $index + i, innerTreeRowData))\n            if (cur) {\n              const nodes =\n                lazyTreeNodeMap.value[childKey] ||\n                node[childrenColumnName.value]\n              traverse(nodes, cur)\n            }\n          })\n        }\n        // 对于 root 节点，display 一定为 true\n        cur.display = true\n        const nodes =\n          lazyTreeNodeMap.value[key] || row[childrenColumnName.value]\n        traverse(nodes, cur)\n      }\n      return tmp\n    } else {\n      return rowRender(row, $index, undefined)\n    }\n  }\n\n  return {\n    wrappedRowRender,\n    tooltipContent,\n    tooltipTrigger,\n  }\n}\n\nexport default useRender\n"]},"metadata":{},"sourceType":"module"}