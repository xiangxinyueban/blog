{"ast":null,"code":"import _slicedToArray from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { defineComponent, shallowRef, openBlock, createElementBlock, normalizeClass, unref, withKeys, withModifiers, createBlock, withCtx, renderSlot, createElementVNode } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport UploadDragger from './upload-dragger2.mjs';\nimport { uploadContentProps } from './upload-content.mjs';\nimport { genFileId } from './upload.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { entriesOf } from '../../../utils/objects.mjs';\nvar _hoisted_1 = [\"onKeydown\"];\nvar _hoisted_2 = [\"name\", \"multiple\", \"accept\"];\nvar __default__ = {\n  name: \"ElUploadContent\",\n  inheritAttrs: false\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: uploadContentProps,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    var props = __props;\n    var ns = useNamespace(\"upload\");\n    var requests = shallowRef({});\n    var inputRef = shallowRef();\n\n    var uploadFiles = function uploadFiles(files) {\n      if (files.length === 0) return;\n      var autoUpload = props.autoUpload,\n          limit = props.limit,\n          fileList = props.fileList,\n          multiple = props.multiple,\n          onStart = props.onStart,\n          onExceed = props.onExceed;\n\n      if (limit && fileList.length + files.length > limit) {\n        onExceed(files, fileList);\n        return;\n      }\n\n      if (!multiple) {\n        files = files.slice(0, 1);\n      }\n\n      var _iterator = _createForOfIteratorHelper(files),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var file = _step.value;\n          var rawFile = file;\n          rawFile.uid = genFileId();\n          onStart(rawFile);\n          if (autoUpload) upload(rawFile);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    };\n\n    var upload = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(rawFile) {\n        var hookResult, file, _i, _Object$keys, key;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                inputRef.value.value = \"\";\n\n                if (props.beforeUpload) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", doUpload(rawFile));\n\n              case 3:\n                _context.prev = 3;\n                _context.next = 6;\n                return props.beforeUpload(rawFile);\n\n              case 6:\n                hookResult = _context.sent;\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](3);\n                hookResult = false;\n\n              case 12:\n                if (!(hookResult === false)) {\n                  _context.next = 15;\n                  break;\n                }\n\n                props.onRemove(rawFile);\n                return _context.abrupt(\"return\");\n\n              case 15:\n                file = rawFile;\n\n                if (hookResult instanceof Blob) {\n                  if (hookResult instanceof File) {\n                    file = hookResult;\n                  } else {\n                    file = new File([hookResult], rawFile.name, {\n                      type: rawFile.type\n                    });\n                  }\n\n                  for (_i = 0, _Object$keys = Object.keys(rawFile); _i < _Object$keys.length; _i++) {\n                    key = _Object$keys[_i];\n                    file[key] = rawFile[key];\n                  }\n                }\n\n                doUpload(rawFile);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 9]]);\n      }));\n\n      return function upload(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    var doUpload = function doUpload(rawFile) {\n      var headers = props.headers,\n          data = props.data,\n          method = props.method,\n          withCredentials = props.withCredentials,\n          filename = props.name,\n          action = props.action,\n          _onProgress = props.onProgress,\n          _onSuccess = props.onSuccess,\n          _onError = props.onError,\n          httpRequest = props.httpRequest;\n      var uid = rawFile.uid;\n      var options = {\n        headers: headers || {},\n        withCredentials: withCredentials,\n        file: rawFile,\n        data: data,\n        method: method,\n        filename: filename,\n        action: action,\n        onProgress: function onProgress(evt) {\n          _onProgress(evt, rawFile);\n        },\n        onSuccess: function onSuccess(res) {\n          _onSuccess(res, rawFile);\n\n          delete requests.value[uid];\n        },\n        onError: function onError(err) {\n          _onError(err, rawFile);\n\n          delete requests.value[uid];\n        }\n      };\n      var request = httpRequest(options);\n      requests.value[uid] = request;\n\n      if (request instanceof Promise) {\n        request.then(options.onSuccess, options.onError);\n      }\n    };\n\n    var handleChange = function handleChange(e) {\n      var files = e.target.files;\n      if (!files) return;\n      uploadFiles(Array.from(files));\n    };\n\n    var handleClick = function handleClick() {\n      if (!props.disabled) {\n        inputRef.value.value = \"\";\n        inputRef.value.click();\n      }\n    };\n\n    var handleKeydown = function handleKeydown() {\n      handleClick();\n    };\n\n    var abort = function abort(file) {\n      var _reqs = entriesOf(requests.value).filter(file ? function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            uid = _ref4[0];\n\n        return String(file.uid) === uid;\n      } : function () {\n        return true;\n      });\n\n      _reqs.forEach(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            uid = _ref6[0],\n            req = _ref6[1];\n\n        if (req instanceof XMLHttpRequest) req.abort();\n        delete requests.value[uid];\n      });\n    };\n\n    expose({\n      abort: abort,\n      upload: upload\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        \"class\": normalizeClass([unref(ns).b(), unref(ns).m(_ctx.listType)]),\n        tabindex: \"0\",\n        onClick: handleClick,\n        onKeydown: withKeys(withModifiers(handleKeydown, [\"self\"]), [\"enter\", \"space\"])\n      }, [_ctx.drag ? (openBlock(), createBlock(UploadDragger, {\n        key: 0,\n        disabled: _ctx.disabled,\n        onFile: uploadFiles\n      }, {\n        \"default\": withCtx(function () {\n          return [renderSlot(_ctx.$slots, \"default\")];\n        }),\n        _: 3\n      }, 8, [\"disabled\"])) : renderSlot(_ctx.$slots, \"default\", {\n        key: 1\n      }), createElementVNode(\"input\", {\n        ref_key: \"inputRef\",\n        ref: inputRef,\n        \"class\": normalizeClass(unref(ns).e(\"input\")),\n        name: _ctx.name,\n        multiple: _ctx.multiple,\n        accept: _ctx.accept,\n        type: \"file\",\n        onChange: handleChange\n      }, null, 42, _hoisted_2)], 42, _hoisted_1);\n    };\n  }\n}));\n\nvar UploadContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/upload/src/upload-content.vue\"]]);\n\nexport { UploadContent as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;AAEA,6BACA,IADA;AAGA;;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACAA;AACA;AACA;;AAEA;AACAC;AACA;;AAZA,iDAcAA,KAdA;AAAA;;AAAA;AAcA;AAAA;AACA;AACAC;AACAC;AACA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAoBA,KApBA;;AAsBA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACAC;;AADA,oBAGAC,kBAHA;AAAA;AAAA;AAAA;;AAAA,iDAIAC,iBAJA;;AAAA;AAAA;AAAA;AAAA,uBASAD,2BATA;;AAAA;AASAE,0BATA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWAA;;AAXA;AAAA,sBAcAA,oBAdA;AAAA;AAAA;AAAA;;AAeAF;AAfA;;AAAA;AAmBAG,oBAnBA,GAmBAN,OAnBA;;AAoBA;AACA;AACAM;AACA,mBAFA,MAEA;AACAA;AACAC;AADA;AAGA;;AACA;AAAAC;AACAF;AACA;AACA;;AAEAF;;AAjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAoCA;AACA,UACAK,OADA,GAWAN,KAXA,CACAM,OADA;AAAA,UAEAC,IAFA,GAWAP,KAXA,CAEAO,IAFA;AAAA,UAGAC,MAHA,GAWAR,KAXA,CAGAQ,MAHA;AAAA,UAIAC,eAJA,GAWAT,KAXA,CAIAS,eAJA;AAAA,UAKAC,QALA,GAWAV,KAXA,CAKAW,IALA;AAAA,UAMAC,MANA,GAWAZ,KAXA,CAMAY,MANA;AAAA,UAOAC,WAPA,GAWAb,KAXA,CAOAa,UAPA;AAAA,UAQAC,UARA,GAWAd,KAXA,CAQAc,SARA;AAAA,UASAC,QATA,GAWAf,KAXA,CASAe,OATA;AAAA,UAUAC,WAVA,GAWAhB,KAXA,CAUAgB,WAVA;AAaA;AACA;AACAV,8BADA;AAEAG,wCAFA;AAGAN,qBAHA;AAIAI,kBAJA;AAKAC,sBALA;AAMAE,0BANA;AAOAE,sBAPA;AAQAC;AACAA;AACA,SAVA;AAWAC;AACAA;;AACA;AACA,SAdA;AAeAC;AACAA;;AACA;AACA;AAlBA;AAoBA;AACAE;;AACA;AACAC;AACA;AACA,KAxCA;;AA0CA;AACA;AACA;AACAC;AACA,KAJA;;AAMA;AACA;AACApB;AACAA;AACA;AACA,KALA;;AAOA;AACAqB;AACA,KAFA;;AAIA;AACA,mDACAjB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,OADA;;AAGAkB;AAAA;AAAA;AAAA;;AACA;AACA;AACA,OAHA;AAIA,KARA;;AAUAC;AACAC,kBADA;AAEAC;AAFA","names":["onExceed","files","rawFile","onStart","inputRef","props","doUpload","hookResult","file","type","key","headers","data","method","withCredentials","filename","name","action","onProgress","onSuccess","onError","httpRequest","requests","request","uploadFiles","handleClick","_reqs","expose","abort","upload"],"sources":["../../../../../../packages/components/upload/src/upload-content.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b(), ns.m(listType)]\"\n    tabindex=\"0\"\n    @click=\"handleClick\"\n    @keydown.self.enter.space=\"handleKeydown\"\n  >\n    <template v-if=\"drag\">\n      <upload-dragger :disabled=\"disabled\" @file=\"uploadFiles\">\n        <slot />\n      </upload-dragger>\n    </template>\n    <template v-else>\n      <slot />\n    </template>\n    <input\n      ref=\"inputRef\"\n      :class=\"ns.e('input')\"\n      :name=\"name\"\n      :multiple=\"multiple\"\n      :accept=\"accept\"\n      type=\"file\"\n      @change=\"handleChange\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { shallowRef } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { entriesOf } from '@element-plus/utils'\nimport UploadDragger from './upload-dragger.vue'\nimport { uploadContentProps } from './upload-content'\nimport { genFileId } from './upload'\n\nimport type {\n  UploadFile,\n  UploadHooks,\n  UploadRawFile,\n  UploadRequestOptions,\n} from './upload'\n\ndefineOptions({\n  name: 'ElUploadContent',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(uploadContentProps)\nconst ns = useNamespace('upload')\n\nconst requests = shallowRef<Record<string, XMLHttpRequest | Promise<unknown>>>(\n  {}\n)\nconst inputRef = shallowRef<HTMLInputElement>()\n\nconst uploadFiles = (files: File[]) => {\n  if (files.length === 0) return\n\n  const { autoUpload, limit, fileList, multiple, onStart, onExceed } = props\n\n  if (limit && fileList.length + files.length > limit) {\n    onExceed(files, fileList)\n    return\n  }\n\n  if (!multiple) {\n    files = files.slice(0, 1)\n  }\n\n  for (const file of files) {\n    const rawFile = file as UploadRawFile\n    rawFile.uid = genFileId()\n    onStart(rawFile)\n    if (autoUpload) upload(rawFile)\n  }\n}\n\nconst upload = async (rawFile: UploadRawFile) => {\n  inputRef.value!.value = ''\n\n  if (!props.beforeUpload) {\n    return doUpload(rawFile)\n  }\n\n  let hookResult: Exclude<ReturnType<UploadHooks['beforeUpload']>, Promise<any>>\n  try {\n    hookResult = await props.beforeUpload(rawFile)\n  } catch {\n    hookResult = false\n  }\n\n  if (hookResult === false) {\n    props.onRemove(rawFile)\n    return\n  }\n\n  let file: File = rawFile\n  if (hookResult instanceof Blob) {\n    if (hookResult instanceof File) {\n      file = hookResult\n    } else {\n      file = new File([hookResult], rawFile.name, {\n        type: rawFile.type,\n      })\n    }\n    for (const key of Object.keys(rawFile)) {\n      file[key] = rawFile[key]\n    }\n  }\n\n  doUpload(rawFile)\n}\n\nconst doUpload = (rawFile: UploadRawFile) => {\n  const {\n    headers,\n    data,\n    method,\n    withCredentials,\n    name: filename,\n    action,\n    onProgress,\n    onSuccess,\n    onError,\n    httpRequest,\n  } = props\n\n  const { uid } = rawFile\n  const options: UploadRequestOptions = {\n    headers: headers || {},\n    withCredentials,\n    file: rawFile,\n    data,\n    method,\n    filename,\n    action,\n    onProgress: (evt) => {\n      onProgress(evt, rawFile)\n    },\n    onSuccess: (res) => {\n      onSuccess(res, rawFile)\n      delete requests.value[uid]\n    },\n    onError: (err) => {\n      onError(err, rawFile)\n      delete requests.value[uid]\n    },\n  }\n  const request = httpRequest(options)\n  requests.value[uid] = request\n  if (request instanceof Promise) {\n    request.then(options.onSuccess, options.onError)\n  }\n}\n\nconst handleChange = (e: Event) => {\n  const files = (e.target as HTMLInputElement).files\n  if (!files) return\n  uploadFiles(Array.from(files))\n}\n\nconst handleClick = () => {\n  if (!props.disabled) {\n    inputRef.value!.value = ''\n    inputRef.value!.click()\n  }\n}\n\nconst handleKeydown = () => {\n  handleClick()\n}\n\nconst abort = (file?: UploadFile) => {\n  const _reqs = entriesOf(requests.value).filter(\n    file ? ([uid]) => String(file.uid) === uid : () => true\n  )\n  _reqs.forEach(([uid, req]) => {\n    if (req instanceof XMLHttpRequest) req.abort()\n    delete requests.value[uid]\n  })\n}\n\ndefineExpose({\n  abort,\n  upload,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}