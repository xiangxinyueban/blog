{"ast":null,"code":"import _defineProperty from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { defineComponent, ref, computed, unref, resolveComponent, openBlock, createBlock, mergeProps, withCtx, createElementBlock, normalizeClass, toDisplayString, createCommentVNode, renderSlot, createTextVNode } from 'vue';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport '../../popper/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { usePopoverProps } from './popover.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isString } from '@vue/shared';\nimport { useDeprecateAppendToBody } from '../../popper/src/deprecation.mjs';\nvar emits = [\"update:visible\", \"before-enter\", \"before-leave\", \"after-enter\", \"after-leave\"];\nvar COMPONENT_NAME = \"ElPopover\";\n\nvar _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElTooltip: ElTooltip\n  },\n  props: usePopoverProps,\n  emits: emits,\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var ns = useNamespace(\"popover\");\n    var tooltipRef = ref(null);\n    var popperRef = computed(function () {\n      var _a;\n\n      return (_a = unref(tooltipRef)) == null ? void 0 : _a.popperRef;\n    });\n    var width = computed(function () {\n      if (isString(props.width)) {\n        return props.width;\n      }\n\n      return \"\".concat(props.width, \"px\");\n    });\n    var style = computed(function () {\n      return [{\n        width: width.value\n      }, props.popperStyle];\n    });\n    var kls = computed(function () {\n      return [ns.b(), props.popperClass, _defineProperty({}, ns.m(\"plain\"), !!props.content)];\n    });\n    var gpuAcceleration = computed(function () {\n      return props.transition === \"el-fade-in-linear\";\n    });\n\n    var _useDeprecateAppendTo = useDeprecateAppendToBody(COMPONENT_NAME, \"appendToBody\"),\n        compatTeleported = _useDeprecateAppendTo.compatTeleported;\n\n    var hide = function hide() {\n      var _a;\n\n      (_a = tooltipRef.value) == null ? void 0 : _a.hide();\n    };\n\n    var beforeEnter = function beforeEnter() {\n      emit(\"before-enter\");\n    };\n\n    var beforeLeave = function beforeLeave() {\n      emit(\"before-leave\");\n    };\n\n    var afterEnter = function afterEnter() {\n      emit(\"after-enter\");\n    };\n\n    var afterLeave = function afterLeave() {\n      emit(\"update:visible\", false);\n      emit(\"after-leave\");\n    };\n\n    return {\n      compatTeleported: compatTeleported,\n      ns: ns,\n      kls: kls,\n      gpuAcceleration: gpuAcceleration,\n      style: style,\n      tooltipRef: tooltipRef,\n      popperRef: popperRef,\n      hide: hide,\n      beforeEnter: beforeEnter,\n      beforeLeave: beforeLeave,\n      afterEnter: afterEnter,\n      afterLeave: afterLeave\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  return openBlock(), createBlock(_component_el_tooltip, mergeProps({\n    ref: \"tooltipRef\"\n  }, _ctx.$attrs, {\n    trigger: _ctx.trigger,\n    placement: _ctx.placement,\n    disabled: _ctx.disabled,\n    visible: _ctx.visible,\n    transition: _ctx.transition,\n    \"popper-options\": _ctx.popperOptions,\n    tabindex: _ctx.tabindex,\n    \"append-to-body\": _ctx.appendToBody,\n    content: _ctx.content,\n    offset: _ctx.offset,\n    \"show-after\": _ctx.showAfter,\n    \"hide-after\": _ctx.hideAfter,\n    \"auto-close\": _ctx.autoClose,\n    \"show-arrow\": _ctx.showArrow,\n    \"aria-label\": _ctx.title,\n    effect: _ctx.effect,\n    enterable: _ctx.enterable,\n    \"popper-class\": _ctx.kls,\n    \"popper-style\": _ctx.style,\n    teleported: _ctx.compatTeleported,\n    persistent: _ctx.persistent,\n    \"gpu-acceleration\": _ctx.gpuAcceleration,\n    onBeforeShow: _ctx.beforeEnter,\n    onBeforeHide: _ctx.beforeLeave,\n    onShow: _ctx.afterEnter,\n    onHide: _ctx.afterLeave\n  }), {\n    content: withCtx(function () {\n      return [_ctx.title ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        \"class\": normalizeClass(_ctx.ns.e(\"title\")),\n        role: \"title\"\n      }, toDisplayString(_ctx.title), 3)) : createCommentVNode(\"v-if\", true), renderSlot(_ctx.$slots, \"default\", {}, function () {\n        return [createTextVNode(toDisplayString(_ctx.content), 1)];\n      })];\n    }),\n    \"default\": withCtx(function () {\n      return [_ctx.$slots.reference ? renderSlot(_ctx.$slots, \"reference\", {\n        key: 0\n      }) : createCommentVNode(\"v-if\", true)];\n    }),\n    _: 3\n  }, 16, [\"trigger\", \"placement\", \"disabled\", \"visible\", \"transition\", \"popper-options\", \"tabindex\", \"append-to-body\", \"content\", \"offset\", \"show-after\", \"hide-after\", \"auto-close\", \"show-arrow\", \"aria-label\", \"effect\", \"enterable\", \"popper-class\", \"popper-style\", \"teleported\", \"persistent\", \"gpu-acceleration\", \"onBeforeShow\", \"onBeforeHide\", \"onShow\", \"onHide\"]);\n}\n\nvar Popover = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/popover/src/index.vue\"]]);\n\nexport { Popover as default };","map":{"version":3,"mappings":";;;;;;;;;;;AAuDA,IAAMA,KAAQ,IACZ,gBADY,EAEZ,cAFY,EAGZ,cAHY,EAIZ,aAJY,EAKZ,aALY,CAAd;AAQA,IAAMC,cAAiB,cAAvB;;AAEA,IAAKC,YAAaC,eAAa;AAC7BC,MAAM,gBADuB;AAE7BC,YAAY;AACVC;AADU,GAFiB;AAK7BC,OAAO,iBALsB;AAM7BP,cAN6B;AAO7BQ,OAP6B,iBAOvBD,KAPuB,QAON;AAAA,QAARE,IAAQ,QAARA,IAAQ;AACf,aAAKC,aAAa,SAAb,CAAL;AACA,qBAAaC,IAA2C,IAA3C,CAAb;AACA,oBAAYC,SAAS,YAAM;AACxB;;AACR;AACK,KAHY,CAAZ;AAIA,wBAAe,aAAQ;AACzB,kBAAa,aAAb,EAAa;AACf;AACA;;AACD;AAEK,KANe,CAAf;AAOG;AACL;AAEAC;AAFA,SAIFN,iBAJE;AAOE,KARG;AASP,WAAO,GAACK,qBAA2B;AACpC;AAEK,KAHI,CAAR;AAIA,uBAA4B;AAC7B;AAED,KAH8B,CAA5B;;AAQF,gCAAmBE,wDAAnB;AAAA,QAAMC,gBAAN,yBAAMA,gBAAN;;AACE,eAAW,SAAXC,IAAW;AACb;;AAEA,iCAA0B,IAA1B,GAA0B,MAA1B,GAA0BC,SAA1B;AACE,KAJA;;AAKF;AACAR,UAAM,gBAAN;AACE,KAFF;;AAGA;AAEAA,UAAM,gBAAN;AACE,KAHF;;AAIA;AAEAA,UAAM,eAAN;AACE,KAHF;;AAIE,kBAAkB,YAAlBS,UAAkB;AACpBT;AAEOA;AACL,KAJA;;AAKA;AACAM,wCADA;AAEAI,YAFA;AAGAC,cAHA;AAIAC,sCAJA;AAKAC,kBALA;AAMAC,4BANA;AAOAC,0BAPA;AAQAR,gBARA;AASAS,8BATA;AAUAC,8BAVA;AAWFC,4BAXE;AAYJT;AAZI;;AAhEyB,EAA/B;;AAhEE,oEA0Ca;AAxCG,MACJU,sDADI;;AACJ,SACEC;AAAAlB;AAAA;AACXmB,WAAU,cADC;AAEXC,aAAS,gBAFE;AAGXC,YAAY,eAHD;AAIXC,WAAgB,cAJL;AAKXC,cAAU,iBALC;AAMX,sBAAgBC,kBANL;AAOXC,YAAS,eAPE;AAQX,sBAAQD,iBARG;AASXE,WAAY,cATD;AAUXC,UAAY,aAVD;AAWX,kBAAYH,cAXD;AAYX,kBAAYA,cAZD;AAaX,kBAAYA,cAbD;AAcX,kBAAQA,cAdG;AAeX,kBAAWA,UAfA;AAgBXI,UAAc,aAhBH;AAiBXC,aAAc,gBAjBH;AAkBX,oBAAYL,QAlBD;AAmBX,oBAAYA,UAnBD;AAoBXM,cAAkB,uBApBP;AAqBXC,cAAa,iBArBF;AAsBX,wBAAaP,oBAtBF;AAuBXQ,gBAAM,kBAvBK;AAwBXC,gBAAM,kBAxBK;AAwBLC,2BAxBK;AA8BDC;AA9BC,MA+BC;AAELT;AAAA,kBAFkB,yCAAM;AAAWU,WAAK,GAAhB;AAAgB,+BACpC,oBADoB;AAG9BC;AAH8B,SAKvBC,2BALuB,EAKvB,CALuB,KAIlBC,gCAFN,EAEMC;AAAA;AAAA,QAFN;AAAA,MAFK;;;;;MAAA;;AAAA,GA/BD,0WADF","names":["emits","COMPONENT_NAME","_sfc_main","defineComponent","name","components","ElTooltip","props","setup","emit","useNamespace","ref","computed","width","useDeprecateAppendToBody","compatTeleported","hide","_a","afterLeave","ns","kls","gpuAcceleration","style","tooltipRef","popperRef","beforeEnter","beforeLeave","afterEnter","_component_el_tooltip","_openBlock","trigger","placement","disabled","visible","transition","_ctx","tabindex","content","offset","effect","enterable","teleported","persistent","onBeforeShow","onBeforeHide","onShow","onHide","key","role","_toDisplayString","_createCommentVNode","_renderSlot"],"sources":["../../../../../../packages/components/popover/src/index.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"tooltipRef\"\n    v-bind=\"$attrs\"\n    :trigger=\"trigger\"\n    :placement=\"placement\"\n    :disabled=\"disabled\"\n    :visible=\"visible\"\n    :transition=\"transition\"\n    :popper-options=\"popperOptions\"\n    :tabindex=\"tabindex\"\n    :append-to-body=\"appendToBody\"\n    :content=\"content\"\n    :offset=\"offset\"\n    :show-after=\"showAfter\"\n    :hide-after=\"hideAfter\"\n    :auto-close=\"autoClose\"\n    :show-arrow=\"showArrow\"\n    :aria-label=\"title\"\n    :effect=\"effect\"\n    :enterable=\"enterable\"\n    :popper-class=\"kls\"\n    :popper-style=\"style\"\n    :teleported=\"compatTeleported\"\n    :persistent=\"persistent\"\n    :gpu-acceleration=\"gpuAcceleration\"\n    @before-show=\"beforeEnter\"\n    @before-hide=\"beforeLeave\"\n    @show=\"afterEnter\"\n    @hide=\"afterLeave\"\n  >\n    <template v-if=\"$slots.reference\">\n      <slot name=\"reference\" />\n    </template>\n\n    <template #content>\n      <div v-if=\"title\" :class=\"ns.e('title')\" role=\"title\">\n        {{ title }}\n      </div>\n      <slot>\n        {{ content }}\n      </slot>\n    </template>\n  </el-tooltip>\n</template>\n<script lang=\"ts\">\nimport { computed, defineComponent, ref, unref } from 'vue'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport { useDeprecateAppendToBody } from '@element-plus/components/popper'\nimport { isString } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { usePopoverProps } from './popover'\n\nimport type { StyleValue } from 'vue'\n\nconst emits = [\n  'update:visible',\n  'before-enter',\n  'before-leave',\n  'after-enter',\n  'after-leave',\n]\n\nconst COMPONENT_NAME = 'ElPopover'\n\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElTooltip,\n  },\n  props: usePopoverProps,\n  emits,\n  setup(props, { emit }) {\n    const ns = useNamespace('popover')\n    const tooltipRef = ref<InstanceType<typeof ElTooltip> | null>(null)\n    const popperRef = computed(() => {\n      return unref(tooltipRef)?.popperRef\n    })\n    const width = computed(() => {\n      if (isString(props.width)) {\n        return props.width as string\n      }\n      return `${props.width}px`\n    })\n\n    const style = computed(() => {\n      return [\n        {\n          width: width.value,\n        },\n        props.popperStyle,\n      ] as StyleValue\n    })\n\n    const kls = computed(() => {\n      return [ns.b(), props.popperClass, { [ns.m('plain')]: !!props.content }]\n    })\n\n    const gpuAcceleration = computed(() => {\n      return props.transition === 'el-fade-in-linear'\n    })\n\n    const { compatTeleported } = useDeprecateAppendToBody(\n      COMPONENT_NAME,\n      'appendToBody'\n    )\n\n    const hide = () => {\n      tooltipRef.value?.hide()\n    }\n\n    const beforeEnter = () => {\n      emit('before-enter')\n    }\n    const beforeLeave = () => {\n      emit('before-leave')\n    }\n\n    const afterEnter = () => {\n      emit('after-enter')\n    }\n\n    const afterLeave = () => {\n      emit('update:visible', false)\n      emit('after-leave')\n    }\n\n    return {\n      compatTeleported,\n      ns,\n      kls,\n      gpuAcceleration,\n      style,\n      tooltipRef,\n      popperRef,\n      hide,\n      beforeEnter,\n      beforeLeave,\n      afterEnter,\n      afterLeave,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}