{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport { defineComponent, inject, ref, unref, nextTick, computed, provide, resolveComponent, openBlock, createBlock, withCtx, renderSlot } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElCollectionItem, ROVING_FOCUS_COLLECTION_INJECTION_KEY as COLLECTION_INJECTION_KEY } from './roving-focus-group.mjs';\nimport { ROVING_FOCUS_GROUP_INJECTION_KEY, ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY } from './tokens.mjs';\nimport { getFocusIntent, reorderArray, focusFirst } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\n\nvar _sfc_main = defineComponent({\n  components: {\n    ElRovingFocusCollectionItem: ElCollectionItem\n  },\n  props: {\n    focusable: {\n      type: Boolean,\n      \"default\": true\n    },\n    active: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  emits: [\"mousedown\", \"focus\", \"keydown\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n\n    var _inject = inject(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0),\n        currentTabbedId = _inject.currentTabbedId,\n        loop = _inject.loop,\n        onItemFocus = _inject.onItemFocus,\n        onItemShiftTab = _inject.onItemShiftTab;\n\n    var _inject2 = inject(COLLECTION_INJECTION_KEY, void 0),\n        getItems = _inject2.getItems;\n\n    var id = useId();\n    var rovingFocusGroupItemRef = ref(null);\n    var handleMousedown = composeEventHandlers(function (e) {\n      emit(\"mousedown\", e);\n    }, function (e) {\n      if (!props.focusable) {\n        e.preventDefault();\n      } else {\n        onItemFocus(unref(id));\n      }\n    });\n    var handleFocus = composeEventHandlers(function (e) {\n      emit(\"focus\", e);\n    }, function () {\n      onItemFocus(unref(id));\n    });\n    var handleKeydown = composeEventHandlers(function (e) {\n      emit(\"keydown\", e);\n    }, function (e) {\n      var key = e.key,\n          shiftKey = e.shiftKey,\n          target = e.target,\n          currentTarget = e.currentTarget;\n\n      if (key === EVENT_CODE.tab && shiftKey) {\n        onItemShiftTab();\n        return;\n      }\n\n      if (target !== currentTarget) return;\n      var focusIntent = getFocusIntent(e);\n\n      if (focusIntent) {\n        e.preventDefault();\n        var items = getItems().filter(function (item) {\n          return item.focusable;\n        });\n        var elements = items.map(function (item) {\n          return item.ref;\n        });\n\n        switch (focusIntent) {\n          case \"last\":\n            {\n              elements.reverse();\n              break;\n            }\n\n          case \"prev\":\n          case \"next\":\n            {\n              if (focusIntent === \"prev\") {\n                elements.reverse();\n              }\n\n              var currentIdx = elements.indexOf(currentTarget);\n              elements = loop.value ? reorderArray(elements, currentIdx + 1) : elements.slice(currentIdx + 1);\n              break;\n            }\n\n          default:\n            {\n              break;\n            }\n        }\n\n        nextTick(function () {\n          focusFirst(elements);\n        });\n      }\n    });\n    var isCurrentTab = computed(function () {\n      return currentTabbedId.value === unref(id);\n    });\n    provide(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {\n      rovingFocusGroupItemRef: rovingFocusGroupItemRef,\n      tabIndex: computed(function () {\n        return unref(isCurrentTab) ? 0 : -1;\n      }),\n      handleMousedown: handleMousedown,\n      handleFocus: handleFocus,\n      handleKeydown: handleKeydown\n    });\n    return {\n      id: id,\n      handleKeydown: handleKeydown,\n      handleFocus: handleFocus,\n      handleMousedown: handleMousedown\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_roving_focus_collection_item = resolveComponent(\"el-roving-focus-collection-item\");\n\n  return openBlock(), createBlock(_component_el_roving_focus_collection_item, {\n    id: _ctx.id,\n    focusable: _ctx.focusable,\n    active: _ctx.active\n  }, {\n    \"default\": withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"default\")];\n    }),\n    _: 3\n  }, 8, [\"id\", \"focusable\", \"active\"]);\n}\n\nvar ElRovingFocusItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-item.vue\"]]);\n\nexport { ElRovingFocusItem as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","components","ElRovingFocusCollectionItem","props","focusable","type","active","emits","setup","emit","inject","ROVING_FOCUS_GROUP_INJECTION_KEY","currentTabbedId","loop","onItemFocus","onItemShiftTab","getItems","id","useId","ref","composeEventHandlers","e","preventDefault","key","shiftKey","target","currentTarget","EVENT_CODE","getFocusIntent","focusIntent","items","filter","item","elements","reverse","value","reorderArray","currentIdx","slice","nextTick","focusFirst","isCurrentTab","computed","unref","provide","ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY","rovingFocusGroupItemRef","tabIndex","handleMousedown","handleFocus","handleKeydown","_createBlock","_renderSlot"],"sources":["../../../../../../packages/components/roving-focus-group/src/roving-focus-item.vue"],"sourcesContent":["<template>\n  <el-roving-focus-collection-item\n    :id=\"id\"\n    :focusable=\"focusable\"\n    :active=\"active\"\n  >\n    <slot />\n  </el-roving-focus-collection-item>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  provide,\n  ref,\n  unref,\n} from 'vue'\nimport { useId } from '@element-plus/hooks'\nimport { composeEventHandlers } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport {\n  ElCollectionItem as ElRovingFocusCollectionItem,\n  ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n} from './roving-focus-group'\nimport {\n  ROVING_FOCUS_GROUP_INJECTION_KEY,\n  ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY,\n} from './tokens'\nimport { focusFirst, getFocusIntent, reorderArray } from './utils'\n\nexport default defineComponent({\n  components: {\n    ElRovingFocusCollectionItem,\n  },\n  props: {\n    focusable: {\n      type: Boolean,\n      default: true,\n    },\n    active: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['mousedown', 'focus', 'keydown'],\n  setup(props, { emit }) {\n    const { currentTabbedId, loop, onItemFocus, onItemShiftTab } = inject(\n      ROVING_FOCUS_GROUP_INJECTION_KEY,\n      undefined\n    )!\n\n    const { getItems } = inject(\n      ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n      undefined\n    )!\n\n    const id = useId()\n    const rovingFocusGroupItemRef = ref<HTMLElement | null>(null)\n\n    const handleMousedown = composeEventHandlers(\n      (e: Event) => {\n        emit('mousedown', e)\n      },\n      (e) => {\n        if (!props.focusable) {\n          e.preventDefault()\n        } else {\n          onItemFocus(unref(id))\n        }\n      }\n    )\n\n    const handleFocus = composeEventHandlers(\n      (e: Event) => {\n        emit('focus', e)\n      },\n      () => {\n        onItemFocus(unref(id))\n      }\n    )\n\n    const handleKeydown = composeEventHandlers(\n      (e: Event) => {\n        emit('keydown', e)\n      },\n      (e) => {\n        const { key, shiftKey, target, currentTarget } = e as KeyboardEvent\n        if (key === EVENT_CODE.tab && shiftKey) {\n          onItemShiftTab()\n          return\n        }\n        if (target !== currentTarget) return\n        const focusIntent = getFocusIntent(e as KeyboardEvent)\n\n        if (focusIntent) {\n          e.preventDefault()\n          const items = getItems<typeof props>().filter(\n            (item) => item.focusable\n          )\n\n          let elements = items.map((item) => item.ref!)\n\n          switch (focusIntent) {\n            case 'last': {\n              elements.reverse()\n              break\n            }\n            case 'prev':\n            case 'next': {\n              if (focusIntent === 'prev') {\n                elements.reverse()\n              }\n              const currentIdx = elements.indexOf(currentTarget as HTMLElement)\n              elements = loop.value\n                ? reorderArray(elements, currentIdx + 1)\n                : elements.slice(currentIdx + 1)\n              break\n            }\n            default: {\n              break\n            }\n          }\n\n          nextTick(() => {\n            focusFirst(elements)\n          })\n        }\n      }\n    )\n\n    const isCurrentTab = computed(() => currentTabbedId.value === unref(id))\n\n    provide(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {\n      rovingFocusGroupItemRef,\n      tabIndex: computed(() => (unref(isCurrentTab) ? 0 : -1)),\n      handleMousedown,\n      handleFocus,\n      handleKeydown,\n    })\n\n    return {\n      id,\n      handleKeydown,\n      handleFocus,\n      handleMousedown,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}