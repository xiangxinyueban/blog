{"ast":null,"code":"import \"core-js/modules/es.reflect.apply.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.reflect.to-string-tag.js\";\nimport normalizeWheel from 'normalize-wheel-es';\nimport '../../utils/index.mjs';\nimport { isFirefox } from '../../utils/browser.mjs';\n\nvar mousewheel = function mousewheel(element, callback) {\n  if (element && element.addEventListener) {\n    var fn = function fn(event) {\n      var normalized = normalizeWheel(event);\n      callback && Reflect.apply(callback, this, [event, normalized]);\n    };\n\n    if (isFirefox()) {\n      element.addEventListener(\"DOMMouseScroll\", fn);\n    } else {\n      element.onmousewheel = fn;\n    }\n  }\n};\n\nvar Mousewheel = {\n  beforeMount: function beforeMount(el, binding) {\n    mousewheel(el, binding.value);\n  }\n};\nexport { Mousewheel as default };","map":{"version":3,"mappings":";;;;;;;AAEA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAASC,OAAT,EAAkBC,QAAlB,EAA4B;AAC7C,MAAID,OAAO,IAAIA,OAAO,CAACE,gBAAvB,EAAyC;AACvC,QAAMC,EAAE,GAAG,SAALA,EAAK,CAASC,KAAT,EAAgB;AACzB,UAAMC,UAAU,GAAGC,cAAc,CAACF,KAAD,CAAjC;AACAH,cAAQ,IAAIM,OAAO,CAACC,KAAR,CAAcP,QAAd,EAAwB,IAAxB,EAA8B,CAACG,KAAD,EAAQC,UAAR,CAA9B,CAAZ;AACD,KAHD;;AAIA,QAAII,SAAS,EAAb,EAAiB;AACfT,aAAO,CAACE,gBAAR,CAAyB,gBAAzB,EAA2CC,EAA3C;AACD,KAFD,MAEO;AACLH,aAAO,CAACU,YAAR,GAAuBP,EAAvB;AACD;AACF;AACF,CAZD;;AAaK,IAACQ,UAAU,GAAG;AACjBC,aADiB,uBACLC,EADK,EACDC,OADC,EACQ;AACvBf,cAAU,CAACc,EAAD,EAAKC,OAAO,CAACC,KAAb,CAAV;AACD;AAHgB,CAAd","names":["mousewheel","element","callback","addEventListener","fn","event","normalized","normalizeWheel","Reflect","apply","isFirefox","onmousewheel","Mousewheel","beforeMount","el","binding","value"],"sources":["../../../../../packages/directives/mousewheel/index.ts"],"sourcesContent":["import normalizeWheel from 'normalize-wheel-es'\nimport { isFirefox } from '@element-plus/utils'\nimport type { DirectiveBinding, ObjectDirective } from 'vue'\n\nconst mousewheel = function (element, callback) {\n  if (element && element.addEventListener) {\n    const fn = function (this: any, event) {\n      const normalized = normalizeWheel(event)\n      callback && Reflect.apply(callback, this, [event, normalized])\n    }\n    if (isFirefox()) {\n      element.addEventListener('DOMMouseScroll', fn)\n    } else {\n      element.onmousewheel = fn\n    }\n  }\n}\n\nconst Mousewheel: ObjectDirective = {\n  beforeMount(el: HTMLElement, binding: DirectiveBinding) {\n    mousewheel(el, binding.value)\n  },\n}\n\nexport default Mousewheel\n"]},"metadata":{},"sourceType":"module"}