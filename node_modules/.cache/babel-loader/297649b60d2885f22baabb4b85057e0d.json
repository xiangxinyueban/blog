{"ast":null,"code":"import _defineProperty from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { defineComponent, inject, computed, ref, onMounted, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, normalizeStyle, renderSlot } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { selectKey } from './token.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { addResizeListener, removeResizeListener } from '../../../utils/dom/resize-event.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElSelectDropdown\",\n  componentName: \"ElSelectDropdown\",\n  setup: function setup() {\n    var select = inject(selectKey);\n    var ns = useNamespace(\"select\");\n    var popperClass = computed(function () {\n      return select.props.popperClass;\n    });\n    var isMultiple = computed(function () {\n      return select.props.multiple;\n    });\n    var isFitInputWidth = computed(function () {\n      return select.props.fitInputWidth;\n    });\n    var minWidth = ref(\"\");\n\n    function updateMinWidth() {\n      var _a;\n\n      minWidth.value = \"\".concat((_a = select.selectWrapper) == null ? void 0 : _a.getBoundingClientRect().width, \"px\");\n    }\n\n    onMounted(function () {\n      updateMinWidth();\n      addResizeListener(select.selectWrapper, updateMinWidth);\n    });\n    onBeforeUnmount(function () {\n      removeResizeListener(select.selectWrapper, updateMinWidth);\n    });\n    return {\n      ns: ns,\n      minWidth: minWidth,\n      popperClass: popperClass,\n      isMultiple: isMultiple,\n      isFitInputWidth: isFitInputWidth\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    \"class\": normalizeClass([_ctx.ns.b(\"dropdown\"), _ctx.ns.is(\"multiple\", _ctx.isMultiple), _ctx.popperClass]),\n    style: normalizeStyle(_defineProperty({}, _ctx.isFitInputWidth ? \"width\" : \"minWidth\", _ctx.minWidth))\n  }, [renderSlot(_ctx.$slots, \"default\")], 6);\n}\n\nvar ElSelectMenu = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/select/src/select-dropdown.vue\"]]);\n\nexport { ElSelectMenu as default };","map":{"version":3,"mappings":";;;;;;;;;AAuBA,IAAKA,YAAaC,eAAa;AAC7BC,MAAM,oBADuB;AAG7BC,eAAe,oBAHc;AAK7BC,OAL6B,mBAKrB;AACA,iBAASC,OAAOC,SAAP,CAAT;AACA,aAAKC,aAAa,QAAb,CAAL;AAGN,QAAMC,WAAc,YAAS;AAAA,aAAMC,OAAOC,KAAP,CAAaF,WAAnB;AAAA,KAAT,CAApB;AACA,QAAMG,UAAa,YAAS;AAAA,aAAMF,OAAOC,KAAP,CAAaE,QAAnB;AAAA,KAAT,CAAnB;AACA,QAAMC,eAAkB,YAAS;AAAA,aAAMJ,OAAOC,KAAP,CAAaI,aAAnB;AAAA,KAAT,CAAxB;AACM,mBAAWC,IAAI,EAAJ,CAAX;;AAEoB;AACxB;;AAGFC;AAEA;;AAGiBC;AAEbC;AAGHC;AAED,KAPiB;AASbC;AAGHC;AAEM,KALH;AAMF;AACAC,YADA;AAEAN,wBAFA;AAGAR,8BAHA;AAIAG,4BAJA;AAKFE;AALE;AAOL;AA9C8B,EAA/B;;2BAjBQU;AAJH,kBAAQ,sBAAI;AACZ,aAAKC,oBAAoB,GAApB,CAAoBC,CAApB,CAAoB,UAApB,GAAoBC,2BAAkC,WAAlC,CAApB,EAAsDA,gBAAtD,EADO;AAC+CC;AAD/C,KAGL,oCAHK,IAAZ","names":["_sfc_main","defineComponent","name","componentName","setup","inject","selectKey","useNamespace","popperClass","select","props","isMultiple","multiple","isFitInputWidth","fitInputWidth","ref","minWidth","onMounted","updateMinWidth","addResizeListener","onBeforeUnmount","removeResizeListener","ns","_cache","_normalizeClass","b","_ctx","style"],"sources":["../../../../../../packages/components/select/src/select-dropdown.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b('dropdown'), ns.is('multiple', isMultiple), popperClass]\"\n    :style=\"{ [isFitInputWidth ? 'width' : 'minWidth']: minWidth }\"\n  >\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  onBeforeUnmount,\n  onMounted,\n  ref,\n} from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { addResizeListener, removeResizeListener } from '@element-plus/utils'\nimport { selectKey } from './token'\nimport type { ResizableElement } from '@element-plus/utils'\n\nexport default defineComponent({\n  name: 'ElSelectDropdown',\n\n  componentName: 'ElSelectDropdown',\n\n  setup() {\n    const select = inject(selectKey)!\n    const ns = useNamespace('select')\n\n    // computed\n    const popperClass = computed(() => select.props.popperClass)\n    const isMultiple = computed(() => select.props.multiple)\n    const isFitInputWidth = computed(() => select.props.fitInputWidth)\n    const minWidth = ref('')\n\n    function updateMinWidth() {\n      minWidth.value = `${\n        select.selectWrapper?.getBoundingClientRect().width\n      }px`\n    }\n\n    onMounted(() => {\n      // TODO: updatePopper\n      // popper.value.update()\n      updateMinWidth()\n      addResizeListener(\n        select.selectWrapper as ResizableElement,\n        updateMinWidth\n      )\n    })\n\n    onBeforeUnmount(() => {\n      removeResizeListener(\n        select.selectWrapper as ResizableElement,\n        updateMinWidth\n      )\n    })\n\n    return {\n      ns,\n      minWidth,\n      popperClass,\n      isMultiple,\n      isFitInputWidth,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}