{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport { defineComponent, ref, watch, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, withCtx, Fragment, renderList, createBlock } from 'vue';\nimport { isEqual } from 'lodash-unified';\nimport { ElSelect, ElOption } from '../../../select/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport '../../../../utils/index.mjs';\nimport { usePagination } from '../usePagination.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { buildProps, definePropType } from '../../../../utils/vue/props.mjs';\nimport { mutable } from '../../../../utils/typescript.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nvar paginationSizesProps = buildProps({\n  pageSize: {\n    type: Number,\n    required: true\n  },\n  pageSizes: {\n    type: definePropType(Array),\n    \"default\": function _default() {\n      return mutable([10, 20, 30, 40, 50, 100]);\n    }\n  },\n  popperClass: {\n    type: String,\n    \"default\": \"\"\n  },\n  disabled: Boolean,\n  size: {\n    type: String,\n    \"default\": \"default\"\n  }\n});\n\nvar _sfc_main = defineComponent({\n  name: \"ElPaginationSizes\",\n  components: {\n    ElSelect: ElSelect,\n    ElOption: ElOption\n  },\n  props: paginationSizesProps,\n  emits: [\"page-size-change\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n\n    var _useLocale = useLocale(),\n        t = _useLocale.t;\n\n    var ns = useNamespace(\"pagination\");\n    var pagination = usePagination();\n    var innerPageSize = ref(props.pageSize);\n    watch(function () {\n      return props.pageSizes;\n    }, function (newVal, oldVal) {\n      if (isEqual(newVal, oldVal)) return;\n\n      if (Array.isArray(newVal)) {\n        var pageSize = newVal.includes(props.pageSize) ? props.pageSize : props.pageSizes[0];\n        emit(\"page-size-change\", pageSize);\n      }\n    });\n    watch(function () {\n      return props.pageSize;\n    }, function (newVal) {\n      innerPageSize.value = newVal;\n    });\n    var innerPagesizes = computed(function () {\n      return props.pageSizes;\n    });\n\n    function handleChange(val) {\n      var _a;\n\n      if (val !== innerPageSize.value) {\n        innerPageSize.value = val;\n        (_a = pagination.handleSizeChange) == null ? void 0 : _a.call(pagination, Number(val));\n      }\n    }\n\n    return {\n      ns: ns,\n      innerPagesizes: innerPagesizes,\n      innerPageSize: innerPageSize,\n      t: t,\n      handleChange: handleChange\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_option = resolveComponent(\"el-option\");\n\n  var _component_el_select = resolveComponent(\"el-select\");\n\n  return openBlock(), createElementBlock(\"span\", {\n    \"class\": normalizeClass(_ctx.ns.e(\"sizes\"))\n  }, [createVNode(_component_el_select, {\n    \"model-value\": _ctx.innerPageSize,\n    disabled: _ctx.disabled,\n    \"popper-class\": _ctx.popperClass,\n    size: _ctx.size,\n    onChange: _ctx.handleChange\n  }, {\n    \"default\": withCtx(function () {\n      return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.innerPagesizes, function (item) {\n        return openBlock(), createBlock(_component_el_option, {\n          key: item,\n          value: item,\n          label: item + _ctx.t(\"el.pagination.pagesize\")\n        }, null, 8, [\"value\", \"label\"]);\n      }), 128))];\n    }),\n    _: 1\n  }, 8, [\"model-value\", \"disabled\", \"popper-class\", \"size\", \"onChange\"])], 2);\n}\n\nvar Sizes = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/sizes.vue\"]]);\n\nexport { Sizes as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AA6BA,IAAMA,uBAAuBC,UAAW;AACtCC,UAAU;AACRC,QAAM,QADE;AAERC,YAAU;AAFF,GAD4B;AAKtCC,WAAW;AACTF,UAAMG,eAAyBC,KAAzB,CADG;AAET,eAAS;AAAA,aAAMC,QAAQ,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,GAArB,CAAR,CAAN;AAAA;AAFA,GAL2B;AAStCC,aAAa;AACXN,QAAM,QADK;AAEX,eAAS;AAFE,GATyB;AAatCO,UAAU,SAb4B;AActCC,MAAM;AACJR,QAAM,QADF;AAEJ,eAAS;AAFL;AAdgC,EAAxC;;AAoBA,IAAKS,YAAaC,eAAa;AAC7BC,MAAM,qBADuB;AAG7BC,YAAY;AACVC,sBADU;AAEVC;AAFU,GAHiB;AAQ7BC,OAAO,sBARsB;AAS7BC,SAAO,CAAC,kBAAD,CATsB;AAW7BC,OAX6B,iBAWvBF,KAXuB,QAWN;AAAA,QAARG,IAAQ,QAARA,IAAQ;;AACf,qBAAQC,SAAU,EAAlB;AAAA,QAAEC,CAAF,cAAEA,CAAF;;AACA,aAAKC,aAAa,YAAb,CAAL;AACN,QAAMC,aAAaC,aAAc,EAAjC;AACM,wBAAgBC,GAAsB,OAAMzB,QAAN,CAAtC;AAEN0B,UACE;AAAA,aAAMV,MAAMb,SAAZ;AAAA,KADF,EAEE,UAACwB,MAAD,EAASC,MAAT,EAAoB;AACd,kBAAQD,MAAR,EAAgBC,MAAhB,GAAyB;;AACzB,gBAAMC,OAAN,CAAcF,MAAd,GAAuB;AACnB,uBAAWA,OAAOG,QAAP,CAAgBd,MAAMhB,QAAtB,IACbgB,MAAMhB,QADO,GAEbgB,MAAMb,SAAN,CAAgB,CAAhB,CAFE;AAGNgB,aAAK,kBAAL,EAAyBnB,QAAzB;AACF;AAEJ,KAXA;AAaA0B,UACE;AAAA,aAAMV,MAAMhB,QAAZ;AAAA,KADF,EAEE,UAAC2B,MAAD,EAAY;AACVI,oBAAcC,KAAd,GAAsBL,MAAtB;AAEJ,KALA;AAOA,QAAMM,cAAiB,YAAS;AAAA,aAAMjB,MAAMb,SAAZ;AAAA,KAAT,CAAvB;;AAEA,0BAAsB+B,GAAtB,EAAmC;AAC7B;;AACF,+BAAsB,MAAtB,EAAsB;AACXH;AACb;AACF;AAEO;;AACL;AACAI,YADA;AAEAF,oCAFA;AAIAF,kCAJA;AAKAV,UALA;AAMFe;AANE;AAQL;AAvD8B,EAA/B;;;;;0BAjCS;;AAfA,kBAAO,sBAAI;AAAA;AAAA,KAcJ,YAZI;AACb,mBAAUC,kBADG;AAEb7B,YAAc,eAFD;AAGb,oBAAM6B,gBAHO;AAIb5B,QAAQ,WAJK;AAIL6B;AAJK;AAOkB;AAAA,aAI9B;AAAA,eAHMC;AACLC,aAAO,MADF;AAELR,iBAAOS,IAFF;AAEUC;AAFV,uCAGN;OAAA,SAJ8B;AAAA;;GAPlB,qEAYJ,CAdI,IAAX","names":["paginationSizesProps","buildProps","pageSize","type","required","pageSizes","definePropType","Array","mutable","popperClass","disabled","size","_sfc_main","defineComponent","name","components","ElSelect","ElOption","props","emits","setup","emit","useLocale","t","useNamespace","pagination","usePagination","ref","watch","newVal","oldVal","isArray","includes","innerPageSize","value","innerPagesizes","val","ns","handleChange","_ctx","onChange","_openBlock","key","item","label"],"sources":["../../../../../../../packages/components/pagination/src/components/sizes.vue"],"sourcesContent":["<template>\n  <span :class=\"ns.e('sizes')\">\n    <el-select\n      :model-value=\"innerPageSize\"\n      :disabled=\"disabled\"\n      :popper-class=\"popperClass\"\n      :size=\"size\"\n      @change=\"handleChange\"\n    >\n      <el-option\n        v-for=\"item in innerPagesizes\"\n        :key=\"item\"\n        :value=\"item\"\n        :label=\"item + t('el.pagination.pagesize')\"\n      />\n    </el-select>\n  </span>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, ref, watch } from 'vue'\nimport { isEqual } from 'lodash-unified'\nimport { ElOption, ElSelect } from '@element-plus/components/select'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { buildProps, definePropType, mutable } from '@element-plus/utils'\nimport { usePagination } from '../usePagination'\n\nimport type { Nullable } from '@element-plus/utils'\n\nconst paginationSizesProps = buildProps({\n  pageSize: {\n    type: Number,\n    required: true,\n  },\n  pageSizes: {\n    type: definePropType<number[]>(Array),\n    default: () => mutable([10, 20, 30, 40, 50, 100] as const),\n  },\n  popperClass: {\n    type: String,\n    default: '',\n  },\n  disabled: Boolean,\n  size: {\n    type: String,\n    default: 'default',\n  },\n} as const)\n\nexport default defineComponent({\n  name: 'ElPaginationSizes',\n\n  components: {\n    ElSelect,\n    ElOption,\n  },\n\n  props: paginationSizesProps,\n  emits: ['page-size-change'],\n\n  setup(props, { emit }) {\n    const { t } = useLocale()\n    const ns = useNamespace('pagination')\n    const pagination = usePagination()\n    const innerPageSize = ref<Nullable<number>>(props.pageSize)\n\n    watch(\n      () => props.pageSizes,\n      (newVal, oldVal) => {\n        if (isEqual(newVal, oldVal)) return\n        if (Array.isArray(newVal)) {\n          const pageSize = newVal.includes(props.pageSize)\n            ? props.pageSize\n            : props.pageSizes[0]\n          emit('page-size-change', pageSize)\n        }\n      }\n    )\n\n    watch(\n      () => props.pageSize,\n      (newVal) => {\n        innerPageSize.value = newVal\n      }\n    )\n\n    const innerPagesizes = computed(() => props.pageSizes)\n\n    function handleChange(val: number) {\n      if (val !== innerPageSize.value) {\n        innerPageSize.value = val\n        pagination.handleSizeChange?.(Number(val))\n      }\n    }\n\n    return {\n      ns,\n      innerPagesizes,\n      innerPageSize,\n\n      t,\n      handleChange,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}