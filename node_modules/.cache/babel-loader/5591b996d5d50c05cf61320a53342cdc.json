{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport './hooks/index.mjs';\nimport { version } from './version.mjs';\nimport { provideGlobalConfig } from './hooks/use-global-config/index.mjs';\nvar INSTALLED_KEY = Symbol(\"INSTALLED_KEY\");\n\nvar makeInstaller = function makeInstaller() {\n  var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  var install = function install(app, options) {\n    if (app[INSTALLED_KEY]) return;\n    app[INSTALLED_KEY] = true;\n    components.forEach(function (c) {\n      return app.use(c);\n    });\n    if (options) provideGlobalConfig(options, app, true);\n  };\n\n  return {\n    version: version,\n    install: install\n  };\n};\n\nexport { makeInstaller };","map":{"version":3,"mappings":";;;;;;;;AAEA,IAAMA,aAAa,GAAGC,MAAM,CAAC,eAAD,CAA5B;;AACY,IAACC,aAAa,GAAG,SAAhBA,aAAgB,GAAqB;AAAA,MAApBC,UAAoB,uEAAP,EAAO;;AAChD,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAMC,OAAN,EAAkB;AAChC,QAAID,GAAG,CAACL,aAAD,CAAP,EACE;AACFK,OAAG,CAACL,aAAD,CAAH,GAAqB,IAArB;AACAG,cAAU,CAACI,OAAX,CAAmB,UAACC,CAAD;AAAA,aAAOH,GAAG,CAACI,GAAJ,CAAQD,CAAR,CAAP;AAAA,KAAnB;AACA,QAAIF,OAAJ,EACEI,mBAAmB,CAACJ,OAAD,EAAUD,GAAV,EAAe,IAAf,CAAnB;AACH,GAPD;;AAQA,SAAO;AACLM,WAAO,EAAPA,OADK;AAELP,WAAO,EAAPA;AAFK,GAAP;AAIF,CAbY","names":["INSTALLED_KEY","Symbol","makeInstaller","components","install","app","options","forEach","c","use","provideGlobalConfig","version"],"sources":["../../../packages/element-plus/make-installer.ts"],"sourcesContent":["import { provideGlobalConfig } from '@element-plus/hooks'\nimport { version } from './version'\nimport type { App, Plugin } from 'vue'\nimport type { ConfigProviderContext } from '@element-plus/tokens'\n\nconst INSTALLED_KEY = Symbol('INSTALLED_KEY')\n\nexport const makeInstaller = (components: Plugin[] = []) => {\n  const install = (app: App, options?: ConfigProviderContext) => {\n    if (app[INSTALLED_KEY]) return\n\n    app[INSTALLED_KEY] = true\n    components.forEach((c) => app.use(c))\n\n    if (options) provideGlobalConfig(options, app, true)\n  }\n\n  return {\n    version,\n    install,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}