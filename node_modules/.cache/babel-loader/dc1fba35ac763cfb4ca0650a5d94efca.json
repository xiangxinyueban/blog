{"ast":null,"code":"import { watch, isRef } from 'vue';\n\nvar useRestoreActive = function useRestoreActive(toggle, initialFocus) {\n  var previousActive;\n  watch(function () {\n    return toggle.value;\n  }, function (val) {\n    var _a, _b;\n\n    if (val) {\n      previousActive = document.activeElement;\n\n      if (isRef(initialFocus)) {\n        (_b = (_a = initialFocus.value).focus) == null ? void 0 : _b.call(_a);\n      }\n    } else {\n      if (process.env.NODE_ENV === \"test\") {\n        previousActive.focus.call(previousActive);\n      } else {\n        previousActive.focus();\n      }\n    }\n  });\n};\n\nexport { useRestoreActive };","map":{"version":3,"mappings":";;AACY,IAACA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,MAAD,EAASC,YAAT,EAA0B;AACxD,MAAIC,cAAJ;AACAC,OAAK,CAAC;AAAA,WAAMH,MAAM,CAACI,KAAb;AAAA,GAAD,EAAqB,UAACC,GAAD,EAAS;AACjC,QAAIC,EAAJ,EAAQC,EAAR;;AACA,QAAIF,GAAJ,EAAS;AACPH,oBAAc,GAAGM,QAAQ,CAACC,aAA1B;;AACA,UAAIC,KAAK,CAACT,YAAD,CAAT,EAAyB;AACvB,SAACM,EAAE,GAAG,CAACD,EAAE,GAAGL,YAAY,CAACG,KAAnB,EAA0BO,KAAhC,KAA0C,IAA1C,GAAiD,KAAK,CAAtD,GAA0DJ,EAAE,CAACK,IAAH,CAAQN,EAAR,CAA1D;AACD;AACF,KALD,MAKO;AACL,UAAIO,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnCb,sBAAc,CAACS,KAAf,CAAqBC,IAArB,CAA0BV,cAA1B;AACD,OAFD,MAEO;AACLA,sBAAc,CAACS,KAAf;AACD;AACF;AACF,GAdI,CAAL;AAeF,CAjBY","names":["useRestoreActive","toggle","initialFocus","previousActive","watch","value","val","_a","_b","document","activeElement","isRef","focus","call","process","env","NODE_ENV"],"sources":["../../../../../packages/hooks/use-restore-active/index.ts"],"sourcesContent":["import { isRef, watch } from 'vue'\nimport type { Ref } from 'vue'\n\n/**\n * This method provides dialogable components the ability to restore previously activated element before\n * the dialog gets opened\n */\nexport const useRestoreActive = (\n  toggle: Ref<boolean>,\n  initialFocus?: Ref<HTMLElement>\n) => {\n  let previousActive: HTMLElement\n  watch(\n    () => toggle.value,\n    (val) => {\n      if (val) {\n        previousActive = document.activeElement as HTMLElement\n        if (isRef(initialFocus)) {\n          initialFocus.value.focus?.()\n        }\n      } else {\n        if (process.env.NODE_ENV === 'test') {\n          previousActive.focus.call(previousActive)\n        } else {\n          previousActive.focus()\n        }\n      }\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}