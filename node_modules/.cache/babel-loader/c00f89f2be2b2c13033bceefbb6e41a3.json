{"ast":null,"code":"import \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport { getCurrentInstance, ref, unref } from 'vue';\nimport { getRowIdentity } from '../util.mjs';\n\nfunction useCurrent(watcherData) {\n  var instance = getCurrentInstance();\n\n  var _currentRowKey = ref(null);\n\n  var currentRow = ref(null);\n\n  var setCurrentRowKey = function setCurrentRowKey(key) {\n    instance.store.assertRowKey();\n    _currentRowKey.value = key;\n    setCurrentRowByKey(key);\n  };\n\n  var restoreCurrentRowKey = function restoreCurrentRowKey() {\n    _currentRowKey.value = null;\n  };\n\n  var setCurrentRowByKey = function setCurrentRowByKey(key) {\n    var data = watcherData.data,\n        rowKey = watcherData.rowKey;\n    var _currentRow = null;\n\n    if (rowKey.value) {\n      _currentRow = (unref(data) || []).find(function (item) {\n        return getRowIdentity(item, rowKey.value) === key;\n      });\n    }\n\n    currentRow.value = _currentRow;\n    instance.emit(\"current-change\", currentRow.value, null);\n  };\n\n  var updateCurrentRow = function updateCurrentRow(_currentRow) {\n    var oldCurrentRow = currentRow.value;\n\n    if (_currentRow && _currentRow !== oldCurrentRow) {\n      currentRow.value = _currentRow;\n      instance.emit(\"current-change\", currentRow.value, oldCurrentRow);\n      return;\n    }\n\n    if (!_currentRow && oldCurrentRow) {\n      currentRow.value = null;\n      instance.emit(\"current-change\", null, oldCurrentRow);\n    }\n  };\n\n  var updateCurrentRowData = function updateCurrentRowData() {\n    var rowKey = watcherData.rowKey.value;\n    var data = watcherData.data.value || [];\n    var oldCurrentRow = currentRow.value;\n\n    if (!data.includes(oldCurrentRow) && oldCurrentRow) {\n      if (rowKey) {\n        var currentRowKey = getRowIdentity(oldCurrentRow, rowKey);\n        setCurrentRowByKey(currentRowKey);\n      } else {\n        currentRow.value = null;\n      }\n\n      if (currentRow.value === null) {\n        instance.emit(\"current-change\", null, oldCurrentRow);\n      }\n    } else if (_currentRowKey.value) {\n      setCurrentRowByKey(_currentRowKey.value);\n      restoreCurrentRowKey();\n    }\n  };\n\n  return {\n    setCurrentRowKey: setCurrentRowKey,\n    restoreCurrentRowKey: restoreCurrentRowKey,\n    setCurrentRowByKey: setCurrentRowByKey,\n    updateCurrentRow: updateCurrentRow,\n    updateCurrentRowData: updateCurrentRowData,\n    states: {\n      _currentRowKey: _currentRowKey,\n      currentRow: currentRow\n    }\n  };\n}\n\nexport { useCurrent as default };","map":{"version":3,"mappings":"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","names":["useCurrent","watcherData","instance","getCurrentInstance","_currentRowKey","ref","currentRow","setCurrentRowKey","key","store","assertRowKey","value","setCurrentRowByKey","restoreCurrentRowKey","data","rowKey","_currentRow","unref","find","item","getRowIdentity","emit","updateCurrentRow","oldCurrentRow","updateCurrentRowData","includes","currentRowKey","states"],"sources":["../../../../../../../packages/components/table/src/store/current.ts"],"sourcesContent":["import { getCurrentInstance, ref, unref } from 'vue'\nimport { getRowIdentity } from '../util'\n\nimport type { Ref } from 'vue'\nimport type { Table } from '../table/defaults'\nimport type { WatcherPropsData } from '.'\n\nfunction useCurrent<T>(watcherData: WatcherPropsData<T>) {\n  const instance = getCurrentInstance() as Table<T>\n  const _currentRowKey = ref<string>(null)\n  const currentRow: Ref<T> = ref(null)\n\n  const setCurrentRowKey = (key: string) => {\n    instance.store.assertRowKey()\n    _currentRowKey.value = key\n    setCurrentRowByKey(key)\n  }\n\n  const restoreCurrentRowKey = () => {\n    _currentRowKey.value = null\n  }\n\n  const setCurrentRowByKey = (key: string) => {\n    const { data, rowKey } = watcherData\n    let _currentRow = null\n    if (rowKey.value) {\n      _currentRow = (unref(data) || []).find(\n        (item) => getRowIdentity(item, rowKey.value) === key\n      )\n    }\n    currentRow.value = _currentRow\n    instance.emit('current-change', currentRow.value, null)\n  }\n\n  const updateCurrentRow = (_currentRow: T) => {\n    const oldCurrentRow = currentRow.value\n    if (_currentRow && _currentRow !== oldCurrentRow) {\n      currentRow.value = _currentRow\n      instance.emit('current-change', currentRow.value, oldCurrentRow)\n      return\n    }\n    if (!_currentRow && oldCurrentRow) {\n      currentRow.value = null\n      instance.emit('current-change', null, oldCurrentRow)\n    }\n  }\n\n  const updateCurrentRowData = () => {\n    const rowKey = watcherData.rowKey.value\n    // data 为 null 时，解构时的默认值会被忽略\n    const data = watcherData.data.value || []\n    const oldCurrentRow = currentRow.value\n    // 当 currentRow 不在 data 中时尝试更新数据\n    if (!data.includes(oldCurrentRow) && oldCurrentRow) {\n      if (rowKey) {\n        const currentRowKey = getRowIdentity(oldCurrentRow, rowKey)\n        setCurrentRowByKey(currentRowKey)\n      } else {\n        currentRow.value = null\n      }\n      if (currentRow.value === null) {\n        instance.emit('current-change', null, oldCurrentRow)\n      }\n    } else if (_currentRowKey.value) {\n      // 把初始时下设置的 rowKey 转化成 rowData\n      setCurrentRowByKey(_currentRowKey.value)\n      restoreCurrentRowKey()\n    }\n  }\n\n  return {\n    setCurrentRowKey,\n    restoreCurrentRowKey,\n    setCurrentRowByKey,\n    updateCurrentRow,\n    updateCurrentRowData,\n    states: {\n      _currentRowKey,\n      currentRow,\n    },\n  }\n}\n\nexport default useCurrent\n"]},"metadata":{},"sourceType":"module"}