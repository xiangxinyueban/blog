{"ast":null,"code":"import _typeof from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _classCallCheck from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.number.parse-float.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.parse-int.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.number.is-nan.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport '../../../utils/index.mjs';\nimport { hasOwn } from '@vue/shared';\n\nvar hsv2hsl = function hsv2hsl(hue, sat, val) {\n  return [hue, sat * val / ((hue = (2 - sat) * val) < 1 ? hue : 2 - hue) || 0, hue / 2];\n};\n\nvar isOnePointZero = function isOnePointZero(n) {\n  return typeof n === \"string\" && n.includes(\".\") && Number.parseFloat(n) === 1;\n};\n\nvar isPercentage = function isPercentage(n) {\n  return typeof n === \"string\" && n.includes(\"%\");\n};\n\nvar bound01 = function bound01(value, max) {\n  if (isOnePointZero(value)) value = \"100%\";\n  var processPercent = isPercentage(value);\n  value = Math.min(max, Math.max(0, Number.parseFloat(\"\".concat(value))));\n\n  if (processPercent) {\n    value = Number.parseInt(\"\".concat(value * max), 10) / 100;\n  }\n\n  if (Math.abs(value - max) < 1e-6) {\n    return 1;\n  }\n\n  return value % max / Number.parseFloat(max);\n};\n\nvar INT_HEX_MAP = {\n  10: \"A\",\n  11: \"B\",\n  12: \"C\",\n  13: \"D\",\n  14: \"E\",\n  15: \"F\"\n};\n\nvar hexOne = function hexOne(value) {\n  value = Math.min(Math.round(value), 255);\n  var high = Math.floor(value / 16);\n  var low = value % 16;\n  return \"\".concat(INT_HEX_MAP[high] || high).concat(INT_HEX_MAP[low] || low);\n};\n\nvar toHex = function toHex(_ref) {\n  var r = _ref.r,\n      g = _ref.g,\n      b = _ref.b;\n  if (Number.isNaN(+r) || Number.isNaN(+g) || Number.isNaN(+b)) return \"\";\n  return \"#\".concat(hexOne(r)).concat(hexOne(g)).concat(hexOne(b));\n};\n\nvar HEX_INT_MAP = {\n  A: 10,\n  B: 11,\n  C: 12,\n  D: 13,\n  E: 14,\n  F: 15\n};\n\nvar parseHexChannel = function parseHexChannel(hex) {\n  if (hex.length === 2) {\n    return (HEX_INT_MAP[hex[0].toUpperCase()] || +hex[0]) * 16 + (HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1]);\n  }\n\n  return HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1];\n};\n\nvar hsl2hsv = function hsl2hsv(hue, sat, light) {\n  sat = sat / 100;\n  light = light / 100;\n  var smin = sat;\n  var lmin = Math.max(light, 0.01);\n  light *= 2;\n  sat *= light <= 1 ? light : 2 - light;\n  smin *= lmin <= 1 ? lmin : 2 - lmin;\n  var v = (light + sat) / 2;\n  var sv = light === 0 ? 2 * smin / (lmin + smin) : 2 * sat / (light + sat);\n  return {\n    h: hue,\n    s: sv * 100,\n    v: v * 100\n  };\n};\n\nvar rgb2hsv = function rgb2hsv(r, g, b) {\n  r = bound01(r, 255);\n  g = bound01(g, 255);\n  b = bound01(b, 255);\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var h;\n  var v = max;\n  var d = max - min;\n  var s = max === 0 ? 0 : d / max;\n\n  if (max === min) {\n    h = 0;\n  } else {\n    switch (max) {\n      case r:\n        {\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n        }\n\n      case g:\n        {\n          h = (b - r) / d + 2;\n          break;\n        }\n\n      case b:\n        {\n          h = (r - g) / d + 4;\n          break;\n        }\n    }\n\n    h /= 6;\n  }\n\n  return {\n    h: h * 360,\n    s: s * 100,\n    v: v * 100\n  };\n};\n\nvar hsv2rgb = function hsv2rgb(h, s, v) {\n  h = bound01(h, 360) * 6;\n  s = bound01(s, 100);\n  v = bound01(v, 100);\n  var i = Math.floor(h);\n  var f = h - i;\n  var p = v * (1 - s);\n  var q = v * (1 - f * s);\n  var t = v * (1 - (1 - f) * s);\n  var mod = i % 6;\n  var r = [v, q, p, p, t, v][mod];\n  var g = [t, v, v, q, p, p][mod];\n  var b = [p, p, t, v, v, q][mod];\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n};\n\nvar Color = /*#__PURE__*/function () {\n  function Color(options) {\n    _classCallCheck(this, Color);\n\n    this._hue = 0;\n    this._saturation = 100;\n    this._value = 100;\n    this._alpha = 100;\n    this.enableAlpha = false;\n    this.format = \"hex\";\n    this.value = \"\";\n    options = options || {};\n\n    for (var option in options) {\n      if (hasOwn(options, option)) {\n        this[option] = options[option];\n      }\n    }\n\n    if (options.value) {\n      this.fromString(options.value);\n    } else {\n      this.doOnChange();\n    }\n  }\n\n  _createClass(Color, [{\n    key: \"set\",\n    value: function set(prop, value) {\n      if (arguments.length === 1 && _typeof(prop) === \"object\") {\n        for (var p in prop) {\n          if (hasOwn(prop, p)) {\n            this.set(p, prop[p]);\n          }\n        }\n\n        return;\n      }\n\n      this[\"_\".concat(prop)] = value;\n      this.doOnChange();\n    }\n  }, {\n    key: \"get\",\n    value: function get(prop) {\n      if (prop === \"alpha\") {\n        return Math.floor(this[\"_\".concat(prop)]);\n      }\n\n      return this[\"_\".concat(prop)];\n    }\n  }, {\n    key: \"toRgb\",\n    value: function toRgb() {\n      return hsv2rgb(this._hue, this._saturation, this._value);\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      var _this = this;\n\n      if (!value) {\n        this._hue = 0;\n        this._saturation = 100;\n        this._value = 100;\n        this.doOnChange();\n        return;\n      }\n\n      var fromHSV = function fromHSV(h, s, v) {\n        _this._hue = Math.max(0, Math.min(360, h));\n        _this._saturation = Math.max(0, Math.min(100, s));\n        _this._value = Math.max(0, Math.min(100, v));\n\n        _this.doOnChange();\n      };\n\n      if (value.includes(\"hsl\")) {\n        var parts = value.replace(/hsla|hsl|\\(|\\)/gm, \"\").split(/\\s|,/g).filter(function (val) {\n          return val !== \"\";\n        }).map(function (val, index) {\n          return index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10);\n        });\n\n        if (parts.length === 4) {\n          this._alpha = Number.parseFloat(parts[3]) * 100;\n        } else if (parts.length === 3) {\n          this._alpha = 100;\n        }\n\n        if (parts.length >= 3) {\n          var _hsl2hsv = hsl2hsv(parts[0], parts[1], parts[2]),\n              h = _hsl2hsv.h,\n              s = _hsl2hsv.s,\n              v = _hsl2hsv.v;\n\n          fromHSV(h, s, v);\n        }\n      } else if (value.includes(\"hsv\")) {\n        var _parts = value.replace(/hsva|hsv|\\(|\\)/gm, \"\").split(/\\s|,/g).filter(function (val) {\n          return val !== \"\";\n        }).map(function (val, index) {\n          return index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10);\n        });\n\n        if (_parts.length === 4) {\n          this._alpha = Number.parseFloat(_parts[3]) * 100;\n        } else if (_parts.length === 3) {\n          this._alpha = 100;\n        }\n\n        if (_parts.length >= 3) {\n          fromHSV(_parts[0], _parts[1], _parts[2]);\n        }\n      } else if (value.includes(\"rgb\")) {\n        var _parts2 = value.replace(/rgba|rgb|\\(|\\)/gm, \"\").split(/\\s|,/g).filter(function (val) {\n          return val !== \"\";\n        }).map(function (val, index) {\n          return index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10);\n        });\n\n        if (_parts2.length === 4) {\n          this._alpha = Number.parseFloat(_parts2[3]) * 100;\n        } else if (_parts2.length === 3) {\n          this._alpha = 100;\n        }\n\n        if (_parts2.length >= 3) {\n          var _rgb2hsv = rgb2hsv(_parts2[0], _parts2[1], _parts2[2]),\n              _h = _rgb2hsv.h,\n              _s = _rgb2hsv.s,\n              _v = _rgb2hsv.v;\n\n          fromHSV(_h, _s, _v);\n        }\n      } else if (value.includes(\"#\")) {\n        var hex = value.replace(\"#\", \"\").trim();\n        if (!/^[0-9a-fA-F]{3}$|^[0-9a-fA-F]{6}$|^[0-9a-fA-F]{8}$/.test(hex)) return;\n        var r, g, b;\n\n        if (hex.length === 3) {\n          r = parseHexChannel(hex[0] + hex[0]);\n          g = parseHexChannel(hex[1] + hex[1]);\n          b = parseHexChannel(hex[2] + hex[2]);\n        } else if (hex.length === 6 || hex.length === 8) {\n          r = parseHexChannel(hex.slice(0, 2));\n          g = parseHexChannel(hex.slice(2, 4));\n          b = parseHexChannel(hex.slice(4, 6));\n        }\n\n        if (hex.length === 8) {\n          this._alpha = parseHexChannel(hex.slice(6)) / 255 * 100;\n        } else if (hex.length === 3 || hex.length === 6) {\n          this._alpha = 100;\n        }\n\n        var _rgb2hsv2 = rgb2hsv(r, g, b),\n            _h2 = _rgb2hsv2.h,\n            _s2 = _rgb2hsv2.s,\n            _v2 = _rgb2hsv2.v;\n\n        fromHSV(_h2, _s2, _v2);\n      }\n    }\n  }, {\n    key: \"compare\",\n    value: function compare(color) {\n      return Math.abs(color._hue - this._hue) < 2 && Math.abs(color._saturation - this._saturation) < 1 && Math.abs(color._value - this._value) < 1 && Math.abs(color._alpha - this._alpha) < 1;\n    }\n  }, {\n    key: \"doOnChange\",\n    value: function doOnChange() {\n      var _hue = this._hue,\n          _saturation = this._saturation,\n          _value = this._value,\n          _alpha = this._alpha,\n          format = this.format;\n\n      if (this.enableAlpha) {\n        switch (format) {\n          case \"hsl\":\n            {\n              var hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);\n              this.value = \"hsla(\".concat(_hue, \", \").concat(Math.round(hsl[1] * 100), \"%, \").concat(Math.round(hsl[2] * 100), \"%, \").concat(this.get(\"alpha\") / 100, \")\");\n              break;\n            }\n\n          case \"hsv\":\n            {\n              this.value = \"hsva(\".concat(_hue, \", \").concat(Math.round(_saturation), \"%, \").concat(Math.round(_value), \"%, \").concat(this.get(\"alpha\") / 100, \")\");\n              break;\n            }\n\n          case \"hex\":\n            {\n              this.value = \"\".concat(toHex(hsv2rgb(_hue, _saturation, _value))).concat(hexOne(_alpha * 255 / 100));\n              break;\n            }\n\n          default:\n            {\n              var _hsv2rgb = hsv2rgb(_hue, _saturation, _value),\n                  r = _hsv2rgb.r,\n                  g = _hsv2rgb.g,\n                  b = _hsv2rgb.b;\n\n              this.value = \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(this.get(\"alpha\") / 100, \")\");\n            }\n        }\n      } else {\n        switch (format) {\n          case \"hsl\":\n            {\n              var _hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);\n\n              this.value = \"hsl(\".concat(_hue, \", \").concat(Math.round(_hsl[1] * 100), \"%, \").concat(Math.round(_hsl[2] * 100), \"%)\");\n              break;\n            }\n\n          case \"hsv\":\n            {\n              this.value = \"hsv(\".concat(_hue, \", \").concat(Math.round(_saturation), \"%, \").concat(Math.round(_value), \"%)\");\n              break;\n            }\n\n          case \"rgb\":\n            {\n              var _hsv2rgb2 = hsv2rgb(_hue, _saturation, _value),\n                  _r = _hsv2rgb2.r,\n                  _g = _hsv2rgb2.g,\n                  _b = _hsv2rgb2.b;\n\n              this.value = \"rgb(\".concat(_r, \", \").concat(_g, \", \").concat(_b, \")\");\n              break;\n            }\n\n          default:\n            {\n              this.value = toHex(hsv2rgb(_hue, _saturation, _value));\n            }\n        }\n      }\n    }\n  }]);\n\n  return Color;\n}();\n\nexport { Color as default };","map":{"version":3,"mappings":"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","names":["hsv2hsl","hue","sat","val","isOnePointZero","n","includes","Number","parseFloat","isPercentage","bound01","value","max","processPercent","Math","min","parseInt","abs","INT_HEX_MAP","hexOne","round","high","floor","low","toHex","r","g","b","isNaN","HEX_INT_MAP","A","B","C","D","E","F","parseHexChannel","hex","length","toUpperCase","hsl2hsv","light","smin","lmin","v","sv","h","s","rgb2hsv","d","hsv2rgb","i","f","p","q","t","mod","Color","options","_hue","_saturation","_value","_alpha","enableAlpha","format","option","hasOwn","fromString","doOnChange","prop","arguments","set","fromHSV","parts","replace","split","filter","map","index","trim","test","slice","color","hsl","get"],"sources":["../../../../../../packages/components/color-picker/src/color.ts"],"sourcesContent":["import { hasOwn } from '@element-plus/utils'\n\nconst hsv2hsl = function (hue: number, sat: number, val: number) {\n  return [\n    hue,\n    (sat * val) / ((hue = (2 - sat) * val) < 1 ? hue : 2 - hue) || 0,\n    hue / 2,\n  ]\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nconst isOnePointZero = function (n: unknown) {\n  return typeof n === 'string' && n.includes('.') && Number.parseFloat(n) === 1\n}\n\nconst isPercentage = function (n: unknown) {\n  return typeof n === 'string' && n.includes('%')\n}\n\n// Take input from [0, n] and return it as [0, 1]\nconst bound01 = function (value: number | string, max: number | string) {\n  if (isOnePointZero(value)) value = '100%'\n\n  const processPercent = isPercentage(value)\n  value = Math.min(max as number, Math.max(0, Number.parseFloat(`${value}`)))\n\n  // Automatically convert percentage into number\n  if (processPercent) {\n    value = Number.parseInt(`${value * (max as number)}`, 10) / 100\n  }\n\n  // Handle floating point rounding errors\n  if (Math.abs(value - (max as number)) < 0.000001) {\n    return 1\n  }\n\n  // Convert into [0, 1] range if it isn't already\n  return (value % (max as number)) / Number.parseFloat(max as string)\n}\n\nconst INT_HEX_MAP = { 10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F' }\n\nconst hexOne = function (value: number) {\n  value = Math.min(Math.round(value), 255)\n  const high = Math.floor(value / 16)\n  const low = value % 16\n  return `${INT_HEX_MAP[high] || high}${INT_HEX_MAP[low] || low}`\n}\n\nconst toHex = function ({ r, g, b }) {\n  if (Number.isNaN(+r) || Number.isNaN(+g) || Number.isNaN(+b)) return ''\n\n  return `#${hexOne(r)}${hexOne(g)}${hexOne(b)}`\n}\n\nconst HEX_INT_MAP = { A: 10, B: 11, C: 12, D: 13, E: 14, F: 15 }\n\nconst parseHexChannel = function (hex: string) {\n  if (hex.length === 2) {\n    return (\n      (HEX_INT_MAP[hex[0].toUpperCase()] || +hex[0]) * 16 +\n      (HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1])\n    )\n  }\n\n  return HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1]\n}\n\nconst hsl2hsv = function (hue: number, sat: number, light: number) {\n  sat = sat / 100\n  light = light / 100\n  let smin = sat\n  const lmin = Math.max(light, 0.01)\n  // let sv\n  // let v\n\n  light *= 2\n  sat *= light <= 1 ? light : 2 - light\n  smin *= lmin <= 1 ? lmin : 2 - lmin\n  const v = (light + sat) / 2\n  const sv =\n    light === 0 ? (2 * smin) / (lmin + smin) : (2 * sat) / (light + sat)\n\n  return {\n    h: hue,\n    s: sv * 100,\n    v: v * 100,\n  }\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nconst rgb2hsv = function (r, g, b) {\n  r = bound01(r, 255)\n  g = bound01(g, 255)\n  b = bound01(b, 255)\n\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  let h\n  const v = max\n\n  const d = max - min\n  const s = max === 0 ? 0 : d / max\n\n  if (max === min) {\n    h = 0 // achromatic\n  } else {\n    switch (max) {\n      case r: {\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      }\n      case g: {\n        h = (b - r) / d + 2\n        break\n      }\n      case b: {\n        h = (r - g) / d + 4\n        break\n      }\n    }\n    h /= 6\n  }\n\n  return { h: h * 360, s: s * 100, v: v * 100 }\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nconst hsv2rgb = function (h, s, v) {\n  h = bound01(h, 360) * 6\n  s = bound01(s, 100)\n  v = bound01(v, 100)\n\n  const i = Math.floor(h)\n  const f = h - i\n  const p = v * (1 - s)\n  const q = v * (1 - f * s)\n  const t = v * (1 - (1 - f) * s)\n  const mod = i % 6\n  const r = [v, q, p, p, t, v][mod]\n  const g = [t, v, v, q, p, p][mod]\n  const b = [p, p, t, v, v, q][mod]\n\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255),\n  }\n}\n\nexport interface Options {\n  enableAlpha: boolean\n  format: string\n  value?: string\n}\n\nexport default class Color {\n  private _hue = 0\n  private _saturation = 100\n  private _value = 100\n  private _alpha = 100\n  public enableAlpha = false\n  public format = 'hex'\n  public value = ''\n  public selected?: boolean\n  constructor(options?: Options) {\n    options = options || ({} as Options)\n\n    for (const option in options) {\n      if (hasOwn(options, option)) {\n        this[option] = options[option]\n      }\n    }\n    if (options.value) {\n      this.fromString(options.value)\n    } else {\n      this.doOnChange()\n    }\n  }\n\n  set(prop: { [key: string]: any } | any, value?: number) {\n    if (arguments.length === 1 && typeof prop === 'object') {\n      for (const p in prop) {\n        if (hasOwn(prop, p)) {\n          this.set(p, prop[p])\n        }\n      }\n\n      return\n    }\n\n    this[`_${prop}`] = value\n    this.doOnChange()\n  }\n\n  get(prop: string) {\n    if (prop === 'alpha') {\n      return Math.floor(this[`_${prop}`])\n    }\n    return this[`_${prop}`]\n  }\n\n  toRgb() {\n    return hsv2rgb(this._hue, this._saturation, this._value)\n  }\n\n  fromString(value) {\n    if (!value) {\n      this._hue = 0\n      this._saturation = 100\n      this._value = 100\n\n      this.doOnChange()\n      return\n    }\n\n    const fromHSV = (h, s, v) => {\n      this._hue = Math.max(0, Math.min(360, h))\n      this._saturation = Math.max(0, Math.min(100, s))\n      this._value = Math.max(0, Math.min(100, v))\n\n      this.doOnChange()\n    }\n\n    if (value.includes('hsl')) {\n      const parts = value\n        .replace(/hsla|hsl|\\(|\\)/gm, '')\n        .split(/\\s|,/g)\n        .filter((val) => val !== '')\n        .map((val, index) =>\n          index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10)\n        )\n\n      if (parts.length === 4) {\n        this._alpha = Number.parseFloat(parts[3]) * 100\n      } else if (parts.length === 3) {\n        this._alpha = 100\n      }\n      if (parts.length >= 3) {\n        const { h, s, v } = hsl2hsv(parts[0], parts[1], parts[2])\n        fromHSV(h, s, v)\n      }\n    } else if (value.includes('hsv')) {\n      const parts = value\n        .replace(/hsva|hsv|\\(|\\)/gm, '')\n        .split(/\\s|,/g)\n        .filter((val) => val !== '')\n        .map((val, index) =>\n          index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10)\n        )\n\n      if (parts.length === 4) {\n        this._alpha = Number.parseFloat(parts[3]) * 100\n      } else if (parts.length === 3) {\n        this._alpha = 100\n      }\n      if (parts.length >= 3) {\n        fromHSV(parts[0], parts[1], parts[2])\n      }\n    } else if (value.includes('rgb')) {\n      const parts = value\n        .replace(/rgba|rgb|\\(|\\)/gm, '')\n        .split(/\\s|,/g)\n        .filter((val) => val !== '')\n        .map((val, index) =>\n          index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10)\n        )\n\n      if (parts.length === 4) {\n        this._alpha = Number.parseFloat(parts[3]) * 100\n      } else if (parts.length === 3) {\n        this._alpha = 100\n      }\n      if (parts.length >= 3) {\n        const { h, s, v } = rgb2hsv(parts[0], parts[1], parts[2])\n        fromHSV(h, s, v)\n      }\n    } else if (value.includes('#')) {\n      const hex = value.replace('#', '').trim()\n      if (!/^[0-9a-fA-F]{3}$|^[0-9a-fA-F]{6}$|^[0-9a-fA-F]{8}$/.test(hex))\n        return\n      let r, g, b\n\n      if (hex.length === 3) {\n        r = parseHexChannel(hex[0] + hex[0])\n        g = parseHexChannel(hex[1] + hex[1])\n        b = parseHexChannel(hex[2] + hex[2])\n      } else if (hex.length === 6 || hex.length === 8) {\n        r = parseHexChannel(hex.slice(0, 2))\n        g = parseHexChannel(hex.slice(2, 4))\n        b = parseHexChannel(hex.slice(4, 6))\n      }\n\n      if (hex.length === 8) {\n        this._alpha = (parseHexChannel(hex.slice(6)) / 255) * 100\n      } else if (hex.length === 3 || hex.length === 6) {\n        this._alpha = 100\n      }\n\n      const { h, s, v } = rgb2hsv(r, g, b)\n      fromHSV(h, s, v)\n    }\n  }\n\n  compare(color) {\n    return (\n      Math.abs(color._hue - this._hue) < 2 &&\n      Math.abs(color._saturation - this._saturation) < 1 &&\n      Math.abs(color._value - this._value) < 1 &&\n      Math.abs(color._alpha - this._alpha) < 1\n    )\n  }\n\n  doOnChange() {\n    const { _hue, _saturation, _value, _alpha, format } = this\n\n    if (this.enableAlpha) {\n      switch (format) {\n        case 'hsl': {\n          const hsl = hsv2hsl(_hue, _saturation / 100, _value / 100)\n          this.value = `hsla(${_hue}, ${Math.round(\n            hsl[1] * 100\n          )}%, ${Math.round(hsl[2] * 100)}%, ${this.get('alpha') / 100})`\n          break\n        }\n        case 'hsv': {\n          this.value = `hsva(${_hue}, ${Math.round(_saturation)}%, ${Math.round(\n            _value\n          )}%, ${this.get('alpha') / 100})`\n          break\n        }\n        case 'hex': {\n          this.value = `${toHex(hsv2rgb(_hue, _saturation, _value))}${hexOne(\n            (_alpha * 255) / 100\n          )}`\n          break\n        }\n        default: {\n          const { r, g, b } = hsv2rgb(_hue, _saturation, _value)\n          this.value = `rgba(${r}, ${g}, ${b}, ${this.get('alpha') / 100})`\n        }\n      }\n    } else {\n      switch (format) {\n        case 'hsl': {\n          const hsl = hsv2hsl(_hue, _saturation / 100, _value / 100)\n          this.value = `hsl(${_hue}, ${Math.round(hsl[1] * 100)}%, ${Math.round(\n            hsl[2] * 100\n          )}%)`\n          break\n        }\n        case 'hsv': {\n          this.value = `hsv(${_hue}, ${Math.round(_saturation)}%, ${Math.round(\n            _value\n          )}%)`\n          break\n        }\n        case 'rgb': {\n          const { r, g, b } = hsv2rgb(_hue, _saturation, _value)\n          this.value = `rgb(${r}, ${g}, ${b})`\n          break\n        }\n        default: {\n          this.value = toHex(hsv2rgb(_hue, _saturation, _value))\n        }\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}