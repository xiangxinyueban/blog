{"ast":null,"code":"import _defineProperty from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport { defineComponent, inject, ref, computed, unref, watch, onMounted, provide, openBlock, createElementBlock, normalizeStyle, normalizeClass, renderSlot, createVNode, withCtx, Fragment, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { offset } from '@floating-ui/dom';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../visual-hidden/index.mjs';\nimport { tooltipV2ContentProps } from './content.mjs';\nimport { tooltipV2CommonProps } from './common.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { tooltipV2RootKey, tooltipV2ContentKey } from '../../../tokens/tooltip-v2.mjs';\nimport { useFloating, arrowMiddleware } from '../../../hooks/use-floating/index.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport ElVisuallyHidden from '../../visual-hidden/src/visual-hidden.mjs';\nvar _hoisted_1 = [\"data-side\"];\nvar __default__ = {\n  name: \"ElTooltipV2Content\"\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: _objectSpread(_objectSpread({}, tooltipV2ContentProps), tooltipV2CommonProps),\n  setup: function setup(__props) {\n    var props = __props;\n\n    var _inject = inject(tooltipV2RootKey),\n        triggerRef = _inject.triggerRef,\n        contentId = _inject.contentId;\n\n    var placement = ref(props.placement);\n    var strategy = ref(props.strategy);\n    var arrowRef = ref(null);\n\n    var _useFloating = useFloating({\n      placement: placement,\n      strategy: strategy,\n      middleware: computed(function () {\n        var middleware = [offset(props.offset)];\n\n        if (props.showArrow) {\n          middleware.push(arrowMiddleware({\n            arrowRef: arrowRef\n          }));\n        }\n\n        return middleware;\n      })\n    }),\n        referenceRef = _useFloating.referenceRef,\n        contentRef = _useFloating.contentRef,\n        middlewareData = _useFloating.middlewareData,\n        x = _useFloating.x,\n        y = _useFloating.y,\n        update = _useFloating.update;\n\n    var zIndex = useZIndex().nextZIndex();\n    var ns = useNamespace(\"tooltip-v2\");\n    var side = computed(function () {\n      return placement.value.split(\"-\")[0];\n    });\n    var contentStyle = computed(function () {\n      return {\n        position: unref(strategy),\n        top: \"\".concat(unref(y) || 0, \"px\"),\n        left: \"\".concat(unref(x) || 0, \"px\"),\n        zIndex: zIndex\n      };\n    });\n    var arrowStyle = computed(function () {\n      var _ref;\n\n      if (!props.showArrow) return {};\n\n      var _unref = unref(middlewareData),\n          arrow = _unref.arrow;\n\n      return _ref = {}, _defineProperty(_ref, \"--\".concat(ns.namespace.value, \"-tooltip-v2-arrow-x\"), \"\".concat(arrow == null ? void 0 : arrow.x, \"px\") || \"\"), _defineProperty(_ref, \"--\".concat(ns.namespace.value, \"-tooltip-v2-arrow-y\"), \"\".concat(arrow == null ? void 0 : arrow.y, \"px\") || \"\"), _ref;\n    });\n    var contentClass = computed(function () {\n      return [ns.e(\"content\"), ns.is(\"dark\", props.effect === \"dark\"), ns.is(unref(strategy)), props.contentClass];\n    });\n    watch(arrowRef, function () {\n      return update();\n    });\n    watch(function () {\n      return props.placement;\n    }, function (val) {\n      return placement.value = val;\n    });\n    onMounted(function () {\n      watch(function () {\n        return props.reference || triggerRef.value;\n      }, function (el) {\n        referenceRef.value = el || void 0;\n      }, {\n        immediate: true\n      });\n    });\n    provide(tooltipV2ContentKey, {\n      arrowRef: arrowRef\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"contentRef\",\n        ref: contentRef,\n        style: normalizeStyle(unref(contentStyle)),\n        \"data-tooltip-v2-root\": \"\"\n      }, [!_ctx.nowrap ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        \"data-side\": unref(side),\n        \"class\": normalizeClass(unref(contentClass))\n      }, [renderSlot(_ctx.$slots, \"default\", {\n        contentStyle: unref(contentStyle),\n        contentClass: unref(contentClass)\n      }), createVNode(unref(ElVisuallyHidden), {\n        id: unref(contentId),\n        role: \"tooltip\"\n      }, {\n        \"default\": withCtx(function () {\n          return [_ctx.ariaLabel ? (openBlock(), createElementBlock(Fragment, {\n            key: 0\n          }, [createTextVNode(toDisplayString(_ctx.ariaLabel), 1)], 2112)) : renderSlot(_ctx.$slots, \"default\", {\n            key: 1\n          })];\n        }),\n        _: 3\n      }, 8, [\"id\"]), renderSlot(_ctx.$slots, \"arrow\", {\n        style: normalizeStyle(unref(arrowStyle)),\n        side: unref(side)\n      })], 10, _hoisted_1)) : createCommentVNode(\"v-if\", true)], 4);\n    };\n  }\n}));\n\nvar TooltipV2Content = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tooltip-v2/src/content.vue\"]]);\n\nexport { TooltipV2Content as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;AAAA;AAAA;;AAEA;AACA;AACA;;AAEA;AACAA,0BADA;AAEAC,wBAFA;AAGAC;AACA;;AAEA;AACAA,0BACAC;AACAC;AADA,YADA;AAKA;;AAEA;AACA,OAZA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA;AAEA;AAEA;AACA;AACA,KAFA;AAIA;AACA;AACAC,iCADA;AAEAC,2CAFA;AAGAC,4CAHA;AAIAC;AAJA;AAMA,KAPA;AASA;AAAA;;AACA;;AAEA;AAAA;;AAEA,0DACAC,kBADA,0BACA,uDADA,qCAEAA,kBAFA,0BAEA,uDAFA;AAIA,KATA;AAWA;AAAA,cACAA,eADA,EAEAA,sCAFA,EAGAA,sBAHA,EAIAC,kBAJA;AAAA;AAOAC;AAAA;AAAA;AAEAA,UACA;AAAA;AAAA,KADA,EAEA;AAAA;AAAA,KAFA;AAKAC;AACAD,YACA;AAAA;AAAA,OADA,EAEA;AACAE;AAEA,OALA,EAKA;AACAC;AADA,OALA;AASA,KAVA;AAYAC;AAAAX;AAAA","names":["placement","strategy","middleware","arrowMiddleware","arrowRef","position","top","left","zIndex","ns","props","watch","onMounted","referenceRef","immediate","provide"],"sources":["../../../../../../packages/components/tooltip-v2/src/content.vue"],"sourcesContent":["<template>\n  <div ref=\"contentRef\" :style=\"contentStyle\" data-tooltip-v2-root>\n    <div v-if=\"!nowrap\" :data-side=\"side\" :class=\"contentClass\">\n      <slot :content-style=\"contentStyle\" :content-class=\"contentClass\" />\n      <el-visually-hidden :id=\"contentId\" role=\"tooltip\">\n        <template v-if=\"ariaLabel\">\n          {{ ariaLabel }}\n        </template>\n        <slot v-else />\n      </el-visually-hidden>\n      <slot name=\"arrow\" :style=\"arrowStyle\" :side=\"side\" />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, inject, onMounted, provide, ref, unref, watch } from 'vue'\nimport { offset } from '@floating-ui/dom'\nimport { tooltipV2ContentKey, tooltipV2RootKey } from '@element-plus/tokens'\nimport {\n  arrowMiddleware,\n  useFloating,\n  useNamespace,\n  useZIndex,\n} from '@element-plus/hooks'\nimport ElVisuallyHidden from '@element-plus/components/visual-hidden'\nimport { tooltipV2ContentProps } from './content'\nimport { tooltipV2CommonProps } from './common'\n\nimport type { CSSProperties } from 'vue'\nimport type { Middleware } from '@floating-ui/dom'\n\ndefineOptions({\n  name: 'ElTooltipV2Content',\n})\n\nconst props = defineProps({ ...tooltipV2ContentProps, ...tooltipV2CommonProps })\n\nconst { triggerRef, contentId } = inject(tooltipV2RootKey)!\n\nconst placement = ref(props.placement)\nconst strategy = ref(props.strategy)\nconst arrowRef = ref<HTMLElement | null>(null)\n\nconst { referenceRef, contentRef, middlewareData, x, y, update } = useFloating({\n  placement,\n  strategy,\n  middleware: computed(() => {\n    const middleware: Middleware[] = [offset(props.offset)]\n\n    if (props.showArrow) {\n      middleware.push(\n        arrowMiddleware({\n          arrowRef,\n        })\n      )\n    }\n\n    return middleware\n  }),\n})\n\nconst zIndex = useZIndex().nextZIndex()\n\nconst ns = useNamespace('tooltip-v2')\n\nconst side = computed(() => {\n  return placement.value.split('-')[0]\n})\n\nconst contentStyle = computed<CSSProperties>(() => {\n  return {\n    position: unref(strategy),\n    top: `${unref(y) || 0}px`,\n    left: `${unref(x) || 0}px`,\n    zIndex,\n  }\n})\n\nconst arrowStyle = computed<CSSProperties>(() => {\n  if (!props.showArrow) return {}\n\n  const { arrow } = unref(middlewareData)\n\n  return {\n    [`--${ns.namespace.value}-tooltip-v2-arrow-x`]: `${arrow?.x}px` || '',\n    [`--${ns.namespace.value}-tooltip-v2-arrow-y`]: `${arrow?.y}px` || '',\n  }\n})\n\nconst contentClass = computed(() => [\n  ns.e('content'),\n  ns.is('dark', props.effect === 'dark'),\n  ns.is(unref(strategy)),\n  props.contentClass,\n])\n\nwatch(arrowRef, () => update())\n\nwatch(\n  () => props.placement,\n  (val) => (placement.value = val)\n)\n\nonMounted(() => {\n  watch(\n    () => props.reference || triggerRef.value,\n    (el) => {\n      referenceRef.value = el || undefined\n    },\n    {\n      immediate: true,\n    }\n  )\n})\n\nprovide(tooltipV2ContentKey, { arrowRef })\n</script>\n"]},"metadata":{},"sourceType":"module"}