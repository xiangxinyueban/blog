{"ast":null,"code":"import { defineComponent, inject, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, normalizeStyle, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, createVNode } from 'vue';\nimport { CaretRight } from '@element-plus/icons-vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport '../../../hooks/index.mjs';\nimport ElNodeContent from './tree-node-content.mjs';\nimport { treeNodeProps, treeNodeEmits, ROOT_TREE_INJECTION_KEY, NODE_CONTEXTMENU } from './virtual-tree.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar DEFAULT_ICON = \"caret-right\";\n\nvar _sfc_main = defineComponent({\n  name: \"ElTreeNode\",\n  components: {\n    ElIcon: ElIcon,\n    CaretRight: CaretRight,\n    ElCheckbox: ElCheckbox,\n    ElNodeContent: ElNodeContent\n  },\n  props: treeNodeProps,\n  emits: treeNodeEmits,\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var tree = inject(ROOT_TREE_INJECTION_KEY);\n    var ns = useNamespace(\"tree\");\n    var indent = computed(function () {\n      var _a;\n\n      return (_a = tree == null ? void 0 : tree.props.indent) != null ? _a : 16;\n    });\n    var icon = computed(function () {\n      var _a;\n\n      return (_a = tree == null ? void 0 : tree.props.icon) != null ? _a : DEFAULT_ICON;\n    });\n\n    var handleClick = function handleClick(e) {\n      emit(\"click\", props.node, e);\n    };\n\n    var handleExpandIconClick = function handleExpandIconClick() {\n      emit(\"toggle\", props.node);\n    };\n\n    var handleCheckChange = function handleCheckChange(value) {\n      emit(\"check\", props.node, value);\n    };\n\n    var handleContextMenu = function handleContextMenu(event) {\n      var _a, _b, _c, _d;\n\n      if ((_c = (_b = (_a = tree == null ? void 0 : tree.instance) == null ? void 0 : _a.vnode) == null ? void 0 : _b.props) == null ? void 0 : _c[\"onNodeContextmenu\"]) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n\n      tree == null ? void 0 : tree.ctx.emit(NODE_CONTEXTMENU, event, (_d = props.node) == null ? void 0 : _d.data, props.node);\n    };\n\n    return {\n      ns: ns,\n      indent: indent,\n      icon: icon,\n      handleClick: handleClick,\n      handleExpandIconClick: handleExpandIconClick,\n      handleCheckChange: handleCheckChange,\n      handleContextMenu: handleContextMenu\n    };\n  }\n});\n\nvar _hoisted_1 = [\"aria-expanded\", \"aria-disabled\", \"aria-checked\", \"data-key\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a, _b, _c;\n\n  var _component_el_icon = resolveComponent(\"el-icon\");\n\n  var _component_el_checkbox = resolveComponent(\"el-checkbox\");\n\n  var _component_el_node_content = resolveComponent(\"el-node-content\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"node$\",\n    \"class\": normalizeClass([_ctx.ns.b(\"node\"), _ctx.ns.is(\"expanded\", _ctx.expanded), _ctx.ns.is(\"current\", _ctx.current), _ctx.ns.is(\"focusable\", !_ctx.disabled), _ctx.ns.is(\"checked\", !_ctx.disabled && _ctx.checked)]),\n    role: \"treeitem\",\n    tabindex: \"-1\",\n    \"aria-expanded\": _ctx.expanded,\n    \"aria-disabled\": _ctx.disabled,\n    \"aria-checked\": _ctx.checked,\n    \"data-key\": (_a = _ctx.node) == null ? void 0 : _a.key,\n    onClick: _cache[1] || (_cache[1] = withModifiers(function () {\n      return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);\n    }, [\"stop\"])),\n    onContextmenu: _cache[2] || (_cache[2] = function () {\n      return _ctx.handleContextMenu && _ctx.handleContextMenu.apply(_ctx, arguments);\n    })\n  }, [createElementVNode(\"div\", {\n    \"class\": normalizeClass(_ctx.ns.be(\"node\", \"content\")),\n    style: normalizeStyle({\n      paddingLeft: \"\".concat((_ctx.node.level - 1) * _ctx.indent, \"px\")\n    })\n  }, [_ctx.icon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    \"class\": normalizeClass([_ctx.ns.is(\"leaf\", !!((_b = _ctx.node) == null ? void 0 : _b.isLeaf)), _ctx.ns.is(\"hidden\", _ctx.hiddenExpandIcon), {\n      expanded: !((_c = _ctx.node) == null ? void 0 : _c.isLeaf) && _ctx.expanded\n    }, _ctx.ns.be(\"node\", \"expand-icon\")]),\n    onClick: withModifiers(_ctx.handleExpandIconClick, [\"stop\"])\n  }, {\n    \"default\": withCtx(function () {\n      return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))];\n    }),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.showCheckbox ? (openBlock(), createBlock(_component_el_checkbox, {\n    key: 1,\n    \"model-value\": _ctx.checked,\n    indeterminate: _ctx.indeterminate,\n    disabled: _ctx.disabled,\n    onChange: _ctx.handleCheckChange,\n    onClick: _cache[0] || (_cache[0] = withModifiers(function () {}, [\"stop\"]))\n  }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onChange\"])) : createCommentVNode(\"v-if\", true), createVNode(_component_el_node_content, {\n    node: _ctx.node\n  }, null, 8, [\"node\"])], 6)], 42, _hoisted_1);\n}\n\nvar ElTreeNode = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tree-v2/src/tree-node.vue\"]]);\n\nexport { ElTreeNode as default };","map":{"version":3,"mappings":";;;;;;;;;AAgEA,IAAMA,YAAe,gBAArB;;AAEA,IAAKC,YAAaC,eAAa;AAC7BC,MAAM,cADuB;AAE7BC,YAAY;AACVC,kBADU;AAEVC,0BAFU;AAGVC,0BAHU;AAIVC;AAJU,GAFiB;AAQ7BC,OAAO,eARsB;AAS7BC,OAAO,eATsB;AAU7BC,OAV6B,iBAUvBF,KAVuB,QAUN;AAAA,QAARG,IAAQ,QAARA,IAAQ;AACf,eAAOC,OAAOC,uBAAP,CAAP;AACA,aAAKC,aAAa,MAAb,CAAL;AAEA,iBAASC,SAAS,YAAM;AACrB;;AACR;AAEK,KAJS,CAAT;AAKG,uBAAY,CAAQ;AAC5B;;AAEK,2BAAiC,IAAjC,GAAiC,MAAjC,GAAiCC,eAAjC,KAAiC,IAAjC,GAAiCC,EAAjC,GAAiClB,YAAjC;AACC,KAJc,CAAZ;;AAKT;AACAY,UAAM,wBAAN;AACO,KAFP;;AAGA;AACMA;AACC,KAFP;;AAGA;AACMA,gCAAsCO,KAAtC;AACJ,KAFF;;AAGI,yBAAsB,YAAtBC,iBAAsB;AACtB,cAAMC,EAAN,EAAqBC,EAArB,EAAqBC,EAArB;;AACF;AACMC;AACRA;AAEO;;AACLP;AACA,KARE;;AASF;AACAQ,YADA;AAEAC,oBAFA;AAGAC,gBAHA;AAIAC,8BAJA;AAKFC,kDALE;AAMJC,0CANI;AAOLV;AAPK;;AA1CyB,EAA/B;;;;;;;AAnBQ,MA7CAW,gDA6CA;;AA7CA,MACEC,wDADF;;AACE,gCAAc,sCAAd;;AAA8B,kBAAK,sBAAqB;AAASC,gBAAT;AAA0C,2BAAK,EAAgCC,IAAG,GAAH,CAAGC,CAAH,CAAG,MAAH,CAAhC,EAAqED,qCAArE,EAOxGA,mCAPwG,EAQpGA,uCARoG,EAS7FA,qDAT6F,EAA/C;AAW7DE,QAAc,YAX+C;AAY7DC,kBAZ6D;AAa7D,kCAb6D;AAc7D,qBAAaH,aAdgD;AAchD,gCAdgD;AAgB9D,gBA2BM,0CA3CwD;AAiB3DI,aAAKC,MAAE,GAAF,KAAEA,YAAKC;AAAA;AAAA,gBAAP,CAjBsD;AAiB/CC,iBACP;AAAA,aAA0BP,0BAAmBA,6CAA7C;AAAA;AAlBsD,KAkBT,CAG3CQ;AAYE,0DAZF;SACA;AAAAC;AAAA;AADA,KACA,CAAuDT,aAAKU,aAA2BC;AAAAC;AAAsC,6BAAgBZ,qEAAhB,EAAiDA,QAAGa,EAAH,CAAK,QAAL,EAAKb,qBAAL,CAAjD,EAAsD;AAQxLc,4BAAiC,KAAjC,KAAiC,IAAjC,GAAiC,MAAjC,GAAiC1B,SAAjC,KAAiCY;AARuJ,KAAtD,qBAU3G,cAV2G,EAAtC;AAUzEI;AAVyE;;eAavFM,gDAMN,WANM;;AACLK,KAAa;GAd+E,EAe7E,CAf6E,EAe7E,oBAf6E,CAAhC,IAe7CC,gCAfV,EAeUhB,IACL,aADK,IACLU;AACVE,OAAQ,GADE;AAEV,mBAADZ,YAFW;AAEAiB,qCAFA;AAEAC,2BAFA;AAImBC,oCAJnB;AAIef;AAJf,uEADK,oCAfV;;uBAAA,CADA,IAH2C,CAlBS,iBAA1B","names":["DEFAULT_ICON","_sfc_main","defineComponent","name","components","ElIcon","CaretRight","ElCheckbox","ElNodeContent","props","emits","setup","emit","inject","ROOT_TREE_INJECTION_KEY","useNamespace","computed","tree","_a","value","handleContextMenu","_b","_c","_d","event","ns","indent","icon","handleClick","handleExpandIconClick","handleCheckChange","_component_el_icon","_component_el_checkbox","ref","_ctx","b","role","tabindex","onClick","_cache","_withModifiers","onContextmenu","_createElementVNode","paddingLeft","_openBlock","_createBlock","key","is","expanded","_","_createCommentVNode","indeterminate","disabled","onChange"],"sources":["../../../../../../packages/components/tree-v2/src/tree-node.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"node$\"\n    :class=\"[\n      ns.b('node'),\n      ns.is('expanded', expanded),\n      ns.is('current', current),\n      ns.is('focusable', !disabled),\n      ns.is('checked', !disabled && checked),\n    ]\"\n    role=\"treeitem\"\n    tabindex=\"-1\"\n    :aria-expanded=\"expanded\"\n    :aria-disabled=\"disabled\"\n    :aria-checked=\"checked\"\n    :data-key=\"node?.key\"\n    @click.stop=\"handleClick\"\n    @contextmenu=\"handleContextMenu\"\n  >\n    <div\n      :class=\"ns.be('node', 'content')\"\n      :style=\"{ paddingLeft: `${(node.level - 1) * indent}px` }\"\n    >\n      <el-icon\n        v-if=\"icon\"\n        :class=\"[\n          ns.is('leaf', !!node?.isLeaf),\n          ns.is('hidden', hiddenExpandIcon),\n          {\n            expanded: !node?.isLeaf && expanded,\n          },\n          ns.be('node', 'expand-icon'),\n        ]\"\n        @click.stop=\"handleExpandIconClick\"\n      >\n        <component :is=\"icon\" />\n      </el-icon>\n      <el-checkbox\n        v-if=\"showCheckbox\"\n        :model-value=\"checked\"\n        :indeterminate=\"indeterminate\"\n        :disabled=\"disabled\"\n        @change=\"handleCheckChange\"\n        @click.stop\n      />\n      <el-node-content :node=\"node\" />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, inject } from 'vue'\nimport { CaretRight } from '@element-plus/icons-vue'\nimport ElIcon from '@element-plus/components/icon'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { useNamespace } from '@element-plus/hooks'\nimport ElNodeContent from './tree-node-content'\nimport {\n  NODE_CONTEXTMENU,\n  ROOT_TREE_INJECTION_KEY,\n  treeNodeEmits,\n  treeNodeProps,\n} from './virtual-tree'\n\nconst DEFAULT_ICON = 'caret-right'\n\nexport default defineComponent({\n  name: 'ElTreeNode',\n  components: {\n    ElIcon,\n    CaretRight,\n    ElCheckbox,\n    ElNodeContent,\n  },\n  props: treeNodeProps,\n  emits: treeNodeEmits,\n  setup(props, { emit }) {\n    const tree = inject(ROOT_TREE_INJECTION_KEY)\n    const ns = useNamespace('tree')\n\n    const indent = computed(() => {\n      return tree?.props.indent ?? 16\n    })\n\n    const icon = computed(() => {\n      return tree?.props.icon ?? DEFAULT_ICON\n    })\n\n    const handleClick = (e: MouseEvent) => {\n      emit('click', props.node, e)\n    }\n    const handleExpandIconClick = () => {\n      emit('toggle', props.node)\n    }\n    const handleCheckChange = (value: boolean) => {\n      emit('check', props.node, value)\n    }\n    const handleContextMenu = (event: Event) => {\n      if (tree?.instance?.vnode?.props?.['onNodeContextmenu']) {\n        event.stopPropagation()\n        event.preventDefault()\n      }\n      tree?.ctx.emit(NODE_CONTEXTMENU, event, props.node?.data, props.node)\n    }\n\n    return {\n      ns,\n      indent,\n      icon,\n      handleClick,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleContextMenu,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}