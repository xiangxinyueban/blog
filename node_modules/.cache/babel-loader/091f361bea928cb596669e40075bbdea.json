{"ast":null,"code":"import { ref, h, Teleport, onUnmounted } from 'vue';\nimport { NOOP } from '@vue/shared';\nimport { isClient } from '@vueuse/core';\nimport '../../utils/index.mjs';\nimport { createGlobalNode, removeGlobalNode } from '../../utils/vue/global-node.mjs';\n\nvar useTeleport = function useTeleport(contentRenderer, appendToBody) {\n  var isTeleportVisible = ref(false);\n\n  if (!isClient) {\n    return {\n      isTeleportVisible: isTeleportVisible,\n      showTeleport: NOOP,\n      hideTeleport: NOOP,\n      renderTeleport: NOOP\n    };\n  }\n\n  var $el = null;\n\n  var showTeleport = function showTeleport() {\n    isTeleportVisible.value = true;\n    if ($el !== null) return;\n    $el = createGlobalNode();\n  };\n\n  var hideTeleport = function hideTeleport() {\n    isTeleportVisible.value = false;\n\n    if ($el !== null) {\n      removeGlobalNode($el);\n      $el = null;\n    }\n  };\n\n  var renderTeleport = function renderTeleport() {\n    return appendToBody.value !== true ? contentRenderer() : isTeleportVisible.value ? [h(Teleport, {\n      to: $el\n    }, contentRenderer())] : void 0;\n  };\n\n  onUnmounted(hideTeleport);\n  return {\n    isTeleportVisible: isTeleportVisible,\n    showTeleport: showTeleport,\n    hideTeleport: hideTeleport,\n    renderTeleport: renderTeleport\n  };\n};\n\nexport { useTeleport };","map":{"version":3,"mappings":";;;;;;AAIY,IAACA,WAAW,GAAG,SAAdA,WAAc,CAACC,eAAD,EAAkBC,YAAlB,EAAmC;AAC5D,MAAMC,iBAAiB,GAAGC,GAAG,CAAC,KAAD,CAA7B;;AACA,MAAI,CAACC,QAAL,EAAe;AACb,WAAO;AACLF,uBAAiB,EAAjBA,iBADK;AAELG,kBAAY,EAAEC,IAFT;AAGLC,kBAAY,EAAED,IAHT;AAILE,oBAAc,EAAEF;AAJX,KAAP;AAMD;;AACD,MAAIG,GAAG,GAAG,IAAV;;AACA,MAAMJ,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBH,qBAAiB,CAACQ,KAAlB,GAA0B,IAA1B;AACA,QAAID,GAAG,KAAK,IAAZ,EACE;AACFA,OAAG,GAAGE,gBAAgB,EAAtB;AACD,GALD;;AAMA,MAAMJ,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBL,qBAAiB,CAACQ,KAAlB,GAA0B,KAA1B;;AACA,QAAID,GAAG,KAAK,IAAZ,EAAkB;AAChBG,sBAAgB,CAACH,GAAD,CAAhB;AACAA,SAAG,GAAG,IAAN;AACD;AACF,GAND;;AAOA,MAAMD,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,WAAOP,YAAY,CAACS,KAAb,KAAuB,IAAvB,GAA8BV,eAAe,EAA7C,GAAkDE,iBAAiB,CAACQ,KAAlB,GAA0B,CAACG,CAAC,CAACC,QAAD,EAAW;AAAEC,QAAE,EAAEN;AAAN,KAAX,EAAwBT,eAAe,EAAvC,CAAF,CAA1B,GAA0E,KAAK,CAAxI;AACD,GAFD;;AAGAgB,aAAW,CAACT,YAAD,CAAX;AACA,SAAO;AACLL,qBAAiB,EAAjBA,iBADK;AAELG,gBAAY,EAAZA,YAFK;AAGLE,gBAAY,EAAZA,YAHK;AAILC,kBAAc,EAAdA;AAJK,GAAP;AAMF,CAlCY","names":["useTeleport","contentRenderer","appendToBody","isTeleportVisible","ref","isClient","showTeleport","NOOP","hideTeleport","renderTeleport","$el","value","createGlobalNode","removeGlobalNode","h","Teleport","to","onUnmounted"],"sources":["../../../../../packages/hooks/use-teleport/index.ts"],"sourcesContent":["import { Teleport, h, onUnmounted, ref } from 'vue'\nimport { NOOP } from '@vue/shared'\nimport { isClient } from '@vueuse/core'\nimport { createGlobalNode, removeGlobalNode } from '@element-plus/utils'\n\nimport type { Ref, VNode } from 'vue'\n\nexport const useTeleport = (\n  contentRenderer: () => VNode,\n  appendToBody: Ref<boolean>\n) => {\n  const isTeleportVisible = ref(false)\n\n  if (!isClient) {\n    return {\n      isTeleportVisible,\n      showTeleport: NOOP,\n      hideTeleport: NOOP,\n      renderTeleport: NOOP,\n    }\n  }\n\n  let $el: HTMLElement | null = null\n\n  const showTeleport = () => {\n    isTeleportVisible.value = true\n    // this allows the delayed showing strategy since the the content itself could be enterable\n    // e.g. el-popper\n    if ($el !== null) return\n\n    $el = createGlobalNode()\n  }\n\n  const hideTeleport = () => {\n    isTeleportVisible.value = false\n    if ($el !== null) {\n      removeGlobalNode($el)\n      $el = null\n    }\n  }\n\n  const renderTeleport = () => {\n    return appendToBody.value !== true\n      ? contentRenderer()\n      : isTeleportVisible.value\n      ? [h(Teleport, { to: $el }, contentRenderer())]\n      : undefined\n  }\n\n  onUnmounted(hideTeleport)\n\n  return {\n    isTeleportVisible,\n    showTeleport,\n    hideTeleport,\n    renderTeleport,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}