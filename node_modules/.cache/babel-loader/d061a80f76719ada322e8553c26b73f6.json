{"ast":null,"code":"import _objectSpread from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport { defineComponent, inject, ref, openBlock, createElementBlock, normalizeClass, unref, withModifiers, renderSlot } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { uploadDraggerProps, uploadDraggerEmits } from './upload-dragger.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { uploadContextKey } from '../../../tokens/upload.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar _hoisted_1 = [\"onDrop\", \"onDragover\"];\nvar __default__ = {\n  name: \"ElUploadDrag\"\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: uploadDraggerProps,\n  emits: uploadDraggerEmits,\n  setup: function setup(__props, _ref) {\n    var emit = _ref.emit;\n    var props = __props;\n    var COMPONENT_NAME = \"ElUploadDrag\";\n    var uploaderContext = inject(uploadContextKey);\n\n    if (!uploaderContext) {\n      throwError(COMPONENT_NAME, \"usage: <el-upload><el-upload-dragger /></el-upload>\");\n    }\n\n    var ns = useNamespace(\"upload\");\n    var dragover = ref(false);\n\n    var onDrop = function onDrop(e) {\n      if (props.disabled) return;\n      dragover.value = false;\n      var files = Array.from(e.dataTransfer.files);\n      var accept = uploaderContext.accept.value;\n\n      if (!accept) {\n        emit(\"file\", files);\n        return;\n      }\n\n      var filesFiltered = files.filter(function (file) {\n        var type = file.type,\n            name = file.name;\n        var extension = name.includes(\".\") ? \".\".concat(name.split(\".\").pop()) : \"\";\n        var baseType = type.replace(/\\/.*$/, \"\");\n        return accept.split(\",\").map(function (type2) {\n          return type2.trim();\n        }).filter(function (type2) {\n          return type2;\n        }).some(function (acceptedType) {\n          if (acceptedType.startsWith(\".\")) {\n            return extension === acceptedType;\n          }\n\n          if (/\\/\\*$/.test(acceptedType)) {\n            return baseType === acceptedType.replace(/\\/\\*$/, \"\");\n          }\n\n          if (/^[^/]+\\/[^/]+$/.test(acceptedType)) {\n            return type === acceptedType;\n          }\n\n          return false;\n        });\n      });\n      emit(\"file\", filesFiltered);\n    };\n\n    var onDragover = function onDragover() {\n      if (!props.disabled) dragover.value = true;\n    };\n\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        \"class\": normalizeClass([unref(ns).b(\"dragger\"), unref(ns).is(\"dragover\", dragover.value)]),\n        onDrop: withModifiers(onDrop, [\"prevent\"]),\n        onDragover: withModifiers(onDragover, [\"prevent\"]),\n        onDragleave: _cache[0] || (_cache[0] = withModifiers(function ($event) {\n          return dragover.value = false;\n        }, [\"prevent\"]))\n      }, [renderSlot(_ctx.$slots, \"default\")], 42, _hoisted_1);\n    };\n  }\n}));\n\nvar UploadDragger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/upload/src/upload-dragger.vue\"]]);\n\nexport { UploadDragger as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;AASA;;AACA;AACAA,iBACAC,cADA,EAEA,qDAFA;AAIA;;AAEA;AACA;;AAEA;AACA;AACAC;AAEA;AACA;;AACA;AACAC;AACA;AACA;;AAEA;AACA;AAAA;AACA;AACA;AACA,sBACAC,KADA,CACA,GADA,EAEAC,GAFA,CAEA;AAAA;AAAA,SAFA,EAGAC,MAHA,CAGA;AAAA;AAAA,SAHA,EAIAC,IAJA,CAIA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA,SAfA;AAgBA,OApBA;AAsBAJ;AACA,KAlCA;;AAoCA;AACA;AACA,KAFA","names":["throwError","COMPONENT_NAME","dragover","emit","split","map","filter","some"],"sources":["../../../../../../packages/components/upload/src/upload-dragger.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b('dragger'), ns.is('dragover', dragover)]\"\n    @drop.prevent=\"onDrop\"\n    @dragover.prevent=\"onDragover\"\n    @dragleave.prevent=\"dragover = false\"\n  >\n    <slot />\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { inject, ref } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\n\nimport { uploadContextKey } from '@element-plus/tokens'\nimport { throwError } from '@element-plus/utils/error'\nimport { uploadDraggerEmits, uploadDraggerProps } from './upload-dragger'\n\nconst COMPONENT_NAME = 'ElUploadDrag'\n\ndefineOptions({\n  name: 'ElUploadDrag',\n})\n\nconst props = defineProps(uploadDraggerProps)\nconst emit = defineEmits(uploadDraggerEmits)\n\nconst uploaderContext = inject(uploadContextKey)\nif (!uploaderContext) {\n  throwError(\n    COMPONENT_NAME,\n    'usage: <el-upload><el-upload-dragger /></el-upload>'\n  )\n}\n\nconst ns = useNamespace('upload')\nconst dragover = ref(false)\n\nconst onDrop = (e: DragEvent) => {\n  if (props.disabled) return\n  dragover.value = false\n\n  const files = Array.from(e.dataTransfer!.files)\n  const accept = uploaderContext.accept.value\n  if (!accept) {\n    emit('file', files)\n    return\n  }\n\n  const filesFiltered = files.filter((file) => {\n    const { type, name } = file\n    const extension = name.includes('.') ? `.${name.split('.').pop()}` : ''\n    const baseType = type.replace(/\\/.*$/, '')\n    return accept\n      .split(',')\n      .map((type) => type.trim())\n      .filter((type) => type)\n      .some((acceptedType) => {\n        if (acceptedType.startsWith('.')) {\n          return extension === acceptedType\n        }\n        if (/\\/\\*$/.test(acceptedType)) {\n          return baseType === acceptedType.replace(/\\/\\*$/, '')\n        }\n        if (/^[^/]+\\/[^/]+$/.test(acceptedType)) {\n          return type === acceptedType\n        }\n        return false\n      })\n  })\n\n  emit('file', filesFiltered)\n}\n\nconst onDragover = () => {\n  if (!props.disabled) dragover.value = true\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}