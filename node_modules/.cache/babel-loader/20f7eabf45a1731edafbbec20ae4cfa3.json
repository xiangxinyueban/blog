{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { unref, computed, isRef, ref } from 'vue';\nimport { get } from 'lodash-unified';\nimport English from '../../locale/lang/en.mjs';\nimport { useGlobalConfig } from '../use-global-config/index.mjs';\n\nvar buildTranslator = function buildTranslator(locale) {\n  return function (path, option) {\n    return translate(path, option, unref(locale));\n  };\n};\n\nvar translate = function translate(path, option, locale) {\n  return get(locale, path, path).replace(/\\{(\\w+)\\}/g, function (_, key) {\n    var _a;\n\n    return \"\".concat((_a = option == null ? void 0 : option[key]) != null ? _a : \"{\".concat(key, \"}\"));\n  });\n};\n\nvar buildLocaleContext = function buildLocaleContext(locale) {\n  var lang = computed(function () {\n    return unref(locale).name;\n  });\n  var localeRef = isRef(locale) ? locale : ref(locale);\n  return {\n    lang: lang,\n    locale: localeRef,\n    t: buildTranslator(locale)\n  };\n};\n\nvar useLocale = function useLocale() {\n  var locale = useGlobalConfig(\"locale\");\n  return buildLocaleContext(computed(function () {\n    return locale.value || English;\n  }));\n};\n\nexport { buildLocaleContext, buildTranslator, translate, useLocale };","map":{"version":3,"mappings":";;;;;;;;AAIY,IAACA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD;AAAA,SAAY,UAACC,IAAD,EAAOC,MAAP;AAAA,WAAkBC,SAAS,CAACF,IAAD,EAAOC,MAAP,EAAeE,KAAK,CAACJ,MAAD,CAApB,CAA3B;AAAA,GAAZ;AAAA,CAAnB;;AACA,IAACG,SAAS,GAAG,SAAZA,SAAY,CAACF,IAAD,EAAOC,MAAP,EAAeF,MAAf;AAAA,SAA0BK,GAAG,CAACL,MAAD,EAASC,IAAT,EAAeA,IAAf,CAAH,CAAwBK,OAAxB,CAAgC,YAAhC,EAA8C,UAACC,CAAD,EAAIC,GAAJ,EAAY;AAC3G,QAAIC,EAAJ;;AACA,qBAAU,CAACA,EAAE,GAAGP,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACM,GAAD,CAAtC,KAAgD,IAAhD,GAAuDC,EAAvD,cAAgED,GAAhE,MAAV;AACD,GAHkD,CAA1B;AAAA,CAAb;;AAIA,IAACE,kBAAkB,GAAG,SAArBA,kBAAqB,CAACV,MAAD,EAAY;AAC5C,MAAMW,IAAI,GAAGC,QAAQ,CAAC;AAAA,WAAMR,KAAK,CAACJ,MAAD,CAAL,CAAca,IAApB;AAAA,GAAD,CAArB;AACA,MAAMC,SAAS,GAAGC,KAAK,CAACf,MAAD,CAAL,GAAgBA,MAAhB,GAAyBgB,GAAG,CAAChB,MAAD,CAA9C;AACA,SAAO;AACLW,QAAI,EAAJA,IADK;AAELX,UAAM,EAAEc,SAFH;AAGLG,KAAC,EAAElB,eAAe,CAACC,MAAD;AAHb,GAAP;AAKF,CARY;;AASA,IAACkB,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC7B,MAAMlB,MAAM,GAAGmB,eAAe,CAAC,QAAD,CAA9B;AACA,SAAOT,kBAAkB,CAACE,QAAQ,CAAC;AAAA,WAAMZ,MAAM,CAACoB,KAAP,IAAgBC,OAAtB;AAAA,GAAD,CAAT,CAAzB;AACF,CAHY","names":["buildTranslator","locale","path","option","translate","unref","get","replace","_","key","_a","buildLocaleContext","lang","computed","name","localeRef","isRef","ref","t","useLocale","useGlobalConfig","value","English"],"sources":["../../../../../packages/hooks/use-locale/index.ts"],"sourcesContent":["import { computed, isRef, ref, unref } from 'vue'\nimport { get } from 'lodash-unified'\nimport English from '@element-plus/locale/lang/en'\nimport { useGlobalConfig } from '../use-global-config'\nimport type { MaybeRef } from '@vueuse/core'\nimport type { Ref } from 'vue'\nimport type { Language } from '@element-plus/locale'\n\nexport type TranslatorOption = Record<string, string | number>\nexport type Translator = (path: string, option?: TranslatorOption) => string\nexport type LocaleContext = {\n  locale: Ref<Language>\n  lang: Ref<string>\n  t: Translator\n}\n\nexport const buildTranslator =\n  (locale: MaybeRef<Language>): Translator =>\n  (path, option) =>\n    translate(path, option, unref(locale))\n\nexport const translate = (\n  path: string,\n  option: undefined | TranslatorOption,\n  locale: Language\n): string =>\n  (get(locale, path, path) as string).replace(\n    /\\{(\\w+)\\}/g,\n    (_, key) => `${option?.[key] ?? `{${key}}`}`\n  )\n\nexport const buildLocaleContext = (\n  locale: MaybeRef<Language>\n): LocaleContext => {\n  const lang = computed(() => unref(locale).name)\n  const localeRef = isRef(locale) ? locale : ref(locale)\n  return {\n    lang,\n    locale: localeRef,\n    t: buildTranslator(locale),\n  }\n}\n\nexport const useLocale = () => {\n  const locale = useGlobalConfig('locale')\n  return buildLocaleContext(computed(() => locale.value || English))\n}\n"]},"metadata":{},"sourceType":"module"}