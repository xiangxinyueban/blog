{"ast":null,"code":"import _asyncToGenerator from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { inject, shallowRef, ref, computed, nextTick } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { formContextKey, formItemContextKey } from '../../../tokens/form.mjs';\nimport { UPDATE_MODEL_EVENT, INPUT_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\n\nvar useSlide = function useSlide(props, initData, emit) {\n  var elForm = inject(formContextKey, {});\n  var elFormItem = inject(formItemContextKey, {});\n  var slider = shallowRef(null);\n  var firstButton = ref(null);\n  var secondButton = ref(null);\n  var buttonRefs = {\n    firstButton: firstButton,\n    secondButton: secondButton\n  };\n  var sliderDisabled = computed(function () {\n    return props.disabled || elForm.disabled || false;\n  });\n  var minValue = computed(function () {\n    return Math.min(initData.firstValue, initData.secondValue);\n  });\n  var maxValue = computed(function () {\n    return Math.max(initData.firstValue, initData.secondValue);\n  });\n  var barSize = computed(function () {\n    return props.range ? \"\".concat(100 * (maxValue.value - minValue.value) / (props.max - props.min), \"%\") : \"\".concat(100 * (initData.firstValue - props.min) / (props.max - props.min), \"%\");\n  });\n  var barStart = computed(function () {\n    return props.range ? \"\".concat(100 * (minValue.value - props.min) / (props.max - props.min), \"%\") : \"0%\";\n  });\n  var runwayStyle = computed(function () {\n    return props.vertical ? {\n      height: props.height\n    } : {};\n  });\n  var barStyle = computed(function () {\n    return props.vertical ? {\n      height: barSize.value,\n      bottom: barStart.value\n    } : {\n      width: barSize.value,\n      left: barStart.value\n    };\n  });\n\n  var resetSize = function resetSize() {\n    if (slider.value) {\n      initData.sliderSize = slider.value[\"client\".concat(props.vertical ? \"Height\" : \"Width\")];\n    }\n  };\n\n  var setPosition = function setPosition(percent) {\n    var targetValue = props.min + percent * (props.max - props.min) / 100;\n\n    if (!props.range) {\n      firstButton.value.setPosition(percent);\n      return;\n    }\n\n    var buttonRefName;\n\n    if (Math.abs(minValue.value - targetValue) < Math.abs(maxValue.value - targetValue)) {\n      buttonRefName = initData.firstValue < initData.secondValue ? \"firstButton\" : \"secondButton\";\n    } else {\n      buttonRefName = initData.firstValue > initData.secondValue ? \"firstButton\" : \"secondButton\";\n    }\n\n    buttonRefs[buttonRefName].value.setPosition(percent);\n  };\n\n  var setFirstValue = function setFirstValue(firstValue) {\n    initData.firstValue = firstValue;\n\n    _emit(props.range ? [minValue.value, maxValue.value] : firstValue);\n  };\n\n  var setSecondValue = function setSecondValue(secondValue) {\n    initData.secondValue = secondValue;\n\n    if (props.range) {\n      _emit([minValue.value, maxValue.value]);\n    }\n  };\n\n  var _emit = function _emit(val) {\n    emit(UPDATE_MODEL_EVENT, val);\n    emit(INPUT_EVENT, val);\n  };\n\n  var emitChange = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return nextTick();\n\n            case 2:\n              emit(CHANGE_EVENT, props.range ? [minValue.value, maxValue.value] : props.modelValue);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function emitChange() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var onSliderClick = function onSliderClick(event) {\n    if (sliderDisabled.value || initData.dragging) return;\n    resetSize();\n\n    if (props.vertical) {\n      var sliderOffsetBottom = slider.value.getBoundingClientRect().bottom;\n      setPosition((sliderOffsetBottom - event.clientY) / initData.sliderSize * 100);\n    } else {\n      var sliderOffsetLeft = slider.value.getBoundingClientRect().left;\n      setPosition((event.clientX - sliderOffsetLeft) / initData.sliderSize * 100);\n    }\n\n    emitChange();\n  };\n\n  return {\n    elFormItem: elFormItem,\n    slider: slider,\n    firstButton: firstButton,\n    secondButton: secondButton,\n    sliderDisabled: sliderDisabled,\n    minValue: minValue,\n    maxValue: maxValue,\n    runwayStyle: runwayStyle,\n    barStyle: barStyle,\n    resetSize: resetSize,\n    setPosition: setPosition,\n    emitChange: emitChange,\n    onSliderClick: onSliderClick,\n    setFirstValue: setFirstValue,\n    setSecondValue: setSecondValue\n  };\n};\n\nexport { useSlide };","map":{"version":3,"mappings":"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","names":["useSlide","props","initData","emit","elForm","inject","formContextKey","elFormItem","formItemContextKey","slider","shallowRef","firstButton","ref","secondButton","buttonRefs","sliderDisabled","computed","disabled","minValue","Math","min","firstValue","secondValue","maxValue","max","barSize","range","value","barStart","runwayStyle","vertical","height","barStyle","bottom","width","left","resetSize","sliderSize","setPosition","percent","targetValue","buttonRefName","abs","setFirstValue","_emit","setSecondValue","val","UPDATE_MODEL_EVENT","INPUT_EVENT","emitChange","nextTick","CHANGE_EVENT","modelValue","onSliderClick","event","dragging","sliderOffsetBottom","getBoundingClientRect","clientY","sliderOffsetLeft","clientX"],"sources":["../../../../../../packages/components/slider/src/useSlide.ts"],"sourcesContent":["import { computed, inject, nextTick, ref, shallowRef } from 'vue'\nimport {\n  CHANGE_EVENT,\n  INPUT_EVENT,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { formContextKey, formItemContextKey } from '@element-plus/tokens'\nimport type { CSSProperties } from 'vue'\nimport type { ButtonRefs, ISliderInitData, ISliderProps } from './slider.type'\nimport type { FormContext, FormItemContext } from '@element-plus/tokens'\nimport type { Nullable } from '@element-plus/utils'\n\nexport const useSlide = (\n  props: ISliderProps,\n  initData: ISliderInitData,\n  emit\n) => {\n  const elForm = inject(formContextKey, {} as FormContext)\n  const elFormItem = inject(formItemContextKey, {} as FormItemContext)\n\n  const slider = shallowRef<Nullable<HTMLElement>>(null)\n\n  const firstButton = ref(null)\n\n  const secondButton = ref(null)\n\n  const buttonRefs: ButtonRefs = {\n    firstButton,\n    secondButton,\n  }\n\n  const sliderDisabled = computed(() => {\n    return props.disabled || elForm.disabled || false\n  })\n\n  const minValue = computed(() => {\n    return Math.min(initData.firstValue, initData.secondValue)\n  })\n\n  const maxValue = computed(() => {\n    return Math.max(initData.firstValue, initData.secondValue)\n  })\n\n  const barSize = computed(() => {\n    return props.range\n      ? `${\n          (100 * (maxValue.value - minValue.value)) / (props.max - props.min)\n        }%`\n      : `${\n          (100 * (initData.firstValue - props.min)) / (props.max - props.min)\n        }%`\n  })\n\n  const barStart = computed(() => {\n    return props.range\n      ? `${(100 * (minValue.value - props.min)) / (props.max - props.min)}%`\n      : '0%'\n  })\n\n  const runwayStyle = computed<CSSProperties>(() => {\n    return props.vertical ? { height: props.height } : {}\n  })\n\n  const barStyle = computed<CSSProperties>(() => {\n    return props.vertical\n      ? {\n          height: barSize.value,\n          bottom: barStart.value,\n        }\n      : {\n          width: barSize.value,\n          left: barStart.value,\n        }\n  })\n\n  const resetSize = () => {\n    if (slider.value) {\n      initData.sliderSize =\n        slider.value[`client${props.vertical ? 'Height' : 'Width'}`]\n    }\n  }\n\n  const setPosition = (percent: number) => {\n    const targetValue = props.min + (percent * (props.max - props.min)) / 100\n    if (!props.range) {\n      firstButton.value.setPosition(percent)\n      return\n    }\n    let buttonRefName: string\n    if (\n      Math.abs(minValue.value - targetValue) <\n      Math.abs(maxValue.value - targetValue)\n    ) {\n      buttonRefName =\n        initData.firstValue < initData.secondValue\n          ? 'firstButton'\n          : 'secondButton'\n    } else {\n      buttonRefName =\n        initData.firstValue > initData.secondValue\n          ? 'firstButton'\n          : 'secondButton'\n    }\n    buttonRefs[buttonRefName].value.setPosition(percent)\n  }\n\n  const setFirstValue = (firstValue: number) => {\n    initData.firstValue = firstValue\n    _emit(props.range ? [minValue.value, maxValue.value] : firstValue)\n  }\n\n  const setSecondValue = (secondValue: number) => {\n    initData.secondValue = secondValue\n\n    if (props.range) {\n      _emit([minValue.value, maxValue.value])\n    }\n  }\n\n  const _emit = (val: number | number[]) => {\n    emit(UPDATE_MODEL_EVENT, val)\n    emit(INPUT_EVENT, val)\n  }\n\n  const emitChange = async () => {\n    await nextTick()\n    emit(\n      CHANGE_EVENT,\n      props.range ? [minValue.value, maxValue.value] : props.modelValue\n    )\n  }\n\n  const onSliderClick = (event: MouseEvent) => {\n    if (sliderDisabled.value || initData.dragging) return\n    resetSize()\n    if (props.vertical) {\n      const sliderOffsetBottom = slider.value.getBoundingClientRect().bottom\n      setPosition(\n        ((sliderOffsetBottom - event.clientY) / initData.sliderSize) * 100\n      )\n    } else {\n      const sliderOffsetLeft = slider.value.getBoundingClientRect().left\n      setPosition(\n        ((event.clientX - sliderOffsetLeft) / initData.sliderSize) * 100\n      )\n    }\n    emitChange()\n  }\n\n  return {\n    elFormItem,\n    slider,\n    firstButton,\n    secondButton,\n    sliderDisabled,\n    minValue,\n    maxValue,\n    runwayStyle,\n    barStyle,\n    resetSize,\n    setPosition,\n    emitChange,\n    onSliderClick,\n    setFirstValue,\n    setSecondValue,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}