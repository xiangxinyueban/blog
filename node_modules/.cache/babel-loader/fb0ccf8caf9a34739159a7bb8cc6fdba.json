{"ast":null,"code":"import _slicedToArray from \"C:/PartTimeJob/blog/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { defineComponent, ref, provide, unref, onMounted, nextTick, watch, onBeforeUnmount, renderSlot } from 'vue';\nimport '../../../constants/index.mjs';\nimport { getEdges, tryFocus, focusableStack, focusFirstDescendant, obtainAllFocusableElements } from './utils.mjs';\nimport { ON_MOUNT_FOCUS_EVT, ON_UNMOUNT_FOCUS_EVT, FOCUS_TRAP_INJECTION_KEY, FOCUS_ON_MOUNT, FOCUS_ON_MOUNT_OPTS, FOCUS_ON_UNMOUNT } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElFocusTrap\",\n  inheritAttrs: false,\n  props: {\n    loop: Boolean,\n    trapped: Boolean\n  },\n  emits: [ON_MOUNT_FOCUS_EVT, ON_UNMOUNT_FOCUS_EVT],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var focusTrapRef = ref();\n    var forwardRef = ref(null);\n    var lastFocusBeforeMounted;\n    var lastFocusAfterMounted;\n    var focusLayer = {\n      paused: false,\n      pause: function pause() {\n        this.paused = true;\n      },\n      resume: function resume() {\n        this.paused = false;\n      }\n    };\n\n    var onKeydown = function onKeydown(e) {\n      if (!props.loop && !props.trapped) return;\n      if (focusLayer.paused) return;\n      var key = e.key,\n          altKey = e.altKey,\n          ctrlKey = e.ctrlKey,\n          metaKey = e.metaKey,\n          currentTarget = e.currentTarget,\n          shiftKey = e.shiftKey;\n      var loop = props.loop;\n      var isTabbing = key === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey;\n      var currentFocusingEl = document.activeElement;\n\n      if (isTabbing && currentFocusingEl) {\n        var container = currentTarget;\n\n        var _getEdges = getEdges(container),\n            _getEdges2 = _slicedToArray(_getEdges, 2),\n            first = _getEdges2[0],\n            last = _getEdges2[1];\n\n        var isTabbable = first && last;\n\n        if (!isTabbable) {\n          if (currentFocusingEl === container) e.preventDefault();\n        } else {\n          if (!shiftKey && currentFocusingEl === last) {\n            e.preventDefault();\n            if (loop) tryFocus(first, true);\n          } else if (shiftKey && currentFocusingEl === first) {\n            e.preventDefault();\n            if (loop) tryFocus(last, true);\n          }\n        }\n      }\n    };\n\n    provide(FOCUS_TRAP_INJECTION_KEY, {\n      focusTrapRef: forwardRef,\n      onKeydown: onKeydown\n    });\n\n    var focusOnMount = function focusOnMount(e) {\n      emit(ON_MOUNT_FOCUS_EVT, e);\n    };\n\n    var focusOnUnmount = function focusOnUnmount(e) {\n      return emit(ON_UNMOUNT_FOCUS_EVT, e);\n    };\n\n    var onFocusIn = function onFocusIn(e) {\n      var trapContainer = unref(forwardRef);\n      if (focusLayer.paused || !trapContainer) return;\n      var target = e.target;\n\n      if (target && trapContainer.contains(target)) {\n        lastFocusAfterMounted = target;\n      } else {\n        tryFocus(lastFocusAfterMounted, true);\n      }\n    };\n\n    var onFocusOut = function onFocusOut(e) {\n      var trapContainer = unref(forwardRef);\n      if (focusLayer.paused || !trapContainer) return;\n\n      if (!trapContainer.contains(e.relatedTarget)) {\n        tryFocus(lastFocusAfterMounted, true);\n      }\n    };\n\n    var cleanupDocumentListeners = function cleanupDocumentListeners() {\n      document.removeEventListener(\"focusin\", onFocusIn);\n      document.removeEventListener(\"focusout\", onFocusOut);\n    };\n\n    onMounted(function () {\n      var trapContainer = unref(forwardRef);\n\n      if (trapContainer) {\n        focusableStack.push(focusLayer);\n        var prevFocusedElement = document.activeElement;\n        lastFocusBeforeMounted = prevFocusedElement;\n        var isPrevFocusContained = trapContainer.contains(prevFocusedElement);\n\n        if (!isPrevFocusContained) {\n          var mountEvent = new Event(FOCUS_ON_MOUNT, FOCUS_ON_MOUNT_OPTS);\n          trapContainer.addEventListener(FOCUS_ON_MOUNT, focusOnMount);\n          trapContainer.dispatchEvent(mountEvent);\n\n          if (!mountEvent.defaultPrevented) {\n            nextTick(function () {\n              focusFirstDescendant(obtainAllFocusableElements(trapContainer), true);\n\n              if (document.activeElement === prevFocusedElement) {\n                tryFocus(trapContainer);\n              }\n            });\n          }\n        }\n      }\n\n      watch(function () {\n        return props.trapped;\n      }, function (trapped) {\n        if (trapped) {\n          document.addEventListener(\"focusin\", onFocusIn);\n          document.addEventListener(\"focusout\", onFocusOut);\n        } else {\n          cleanupDocumentListeners();\n        }\n      }, {\n        immediate: true\n      });\n    });\n    onBeforeUnmount(function () {\n      cleanupDocumentListeners();\n      var trapContainer = unref(forwardRef);\n\n      if (trapContainer) {\n        trapContainer.removeEventListener(FOCUS_ON_MOUNT, focusOnMount);\n        var unmountEvent = new Event(FOCUS_ON_UNMOUNT, FOCUS_ON_MOUNT_OPTS);\n        trapContainer.addEventListener(FOCUS_ON_UNMOUNT, focusOnUnmount);\n        trapContainer.dispatchEvent(unmountEvent);\n\n        if (!unmountEvent.defaultPrevented) {\n          tryFocus(lastFocusBeforeMounted != null ? lastFocusBeforeMounted : document.body, true);\n        }\n\n        trapContainer.removeEventListener(FOCUS_ON_UNMOUNT, focusOnMount);\n        focusableStack.remove(focusLayer);\n      }\n    });\n    return {\n      focusTrapRef: focusTrapRef,\n      forwardRef: forwardRef,\n      onKeydown: onKeydown\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return renderSlot(_ctx.$slots, \"default\");\n}\n\nvar ElFocusTrap = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/focus-trap/src/focus-trap.vue\"]]);\n\nexport { ElFocusTrap as default };","map":{"version":3,"mappings":";;;;;;;;AAiCA,IAAKA,YAAaC,eAAa;AAC7BC,MAAM,eADuB;AAE7BC,cAAc,OAFe;AAG7BC,OAAO;AACLC,QAAM,SADD;AAELC,WAAS;AAFJ,GAHsB;AAO7BC,SAAO,CAACC,kBAAD,EAAqBC,oBAArB,CAPsB;AAQ7BC,OAR6B,iBAQvBN,KARuB,QAQN;AAAA,QAARO,IAAQ,QAARA,IAAQ;AACrB,QAAMC,eAAeC,GAAwB,EAA7C;AACM,qBAAaA,IAAwB,IAAxB,CAAb;AACF;AACA;AAEJ,QAAMC,UAAyB;AAC7BC,YAAQ,OADqB;AAE7BC,WAF6B,mBAErB;AACN,aAAKD,MAAL,GAAc,IAAd;AACF,OAJ6B;AAK7BE,YAL6B,oBAKpB;AACP,aAAKF,MAAL,GAAc,KAAd;AACF;AAP6B,KAA/B;;AAUM,oBAAY,SAAZG,SAAY,CAACC,CAAD,EAAsB;AACtC,UAAI,CAACf,MAAMC,IAAP,IAAe,CAACD,KAAM,QAA1B,EAAmC;AACnC,UAAIU,UAAW,OAAf,EAAuB;AAEvB,UAAQM,GAAR,GAAmED,CAAnE,CAAQC,GAAR;AAAA,UAAaC,MAAb,GAAmEF,CAAnE,CAAaE,MAAb;AAAA,UAAqBC,OAArB,GAAmEH,CAAnE,CAAqBG,OAArB;AAAA,UAA8BC,OAA9B,GAAmEJ,CAAnE,CAA8BI,OAA9B;AAAA,UAAuCC,aAAvC,GAAmEL,CAAnE,CAAuCK,aAAvC;AAAA,UAAsDC,QAAtD,GAAmEN,CAAnE,CAAsDM,QAAtD;AACA,UAAQpB,IAAR,GAAiBD,KAAjB,CAAQC,IAAR;AACM,sBACJe,QAAQM,UAAW,IAAnB,IAA0B,CAACL,MAA3B,IAAqC,CAACC,OAAtC,IAAiD,CAACC,OAD9C;AAGN,UAAMI,oBAAoBC,QAAS,cAAnC;;AACA,UAAIC,aAAaF,iBAAjB,EAAoC;AAClC,YAAMG,SAAY,gBAAlB;;AACA,wBAAsBC,SAASD,SAAT,CAAtB;AAAA;AAAA,YAAOE,KAAP;AAAA,YAAcC,IAAd;;AACA,YAAMC,aAAaF,KAAS,QAA5B;;AAEA,YAAI,CAACE,UAAL,EAAiB;AACf,cAAIP,iBAAsB,cAA1B,EAAqCR,EAAEgB,cAAF;AAChC,SAFP,MAEO;AACD,eAACV,QAAD,IAAaE,sBAAsBM,IAAnC,EAAyC;AAC3Cd,cAAEgB,cAAF;AACI,sBAAMC,SAASJ,KAAT,EAAgB,IAAhB;AACZ,WAHI,MAGJ,IAAWP,QAAY,0BAAsBO,KAA7C,EAAoD;AAClDb,cAAEgB,cAAF;AACI,sBAAMC,SAASH,IAAT,EAAe,IAAf;AACZ;AACF;AACF;AACF,KA3BM;;AA6BNI,YAAQC,wBAAR,EAAkC;AAChC1B,kBAAc,YADkB;AAEhCM;AAFgC,KAAlC;;AAKM,uBAAe,SAAfqB,YAAe,CAACpB,CAAD,EAAc;AACjCR,WAAKH,kBAAL,EAAyBW,CAAzB;AACF,KAFM;;AAGN,QAAMqB,cAAiB,YAAjBA,cAAiB,CAACrB,CAAD;AAAA,aAAcR,KAAKF,oBAAL,EAA2BU,CAA3B,CAAd;AAAA,KAAvB;;AACM,oBAAY,SAAZsB,SAAY,CAACtB,CAAD,EAAc;AACxB,0BAAgBuB,MAAMC,UAAN,CAAhB;AACF,qBAAW5B,MAAX,IAAqB,CAAC6B,aAAtB,EAAqC;AACzC,UAAMC,SAAS1B,CAAE,OAAjB;;AACA,UAAI0B,MAAU,kBAAcC,QAAd,CAAuBD,MAAvB,CAAd,EAA8C;AACpBE;AACnB,OAFP,MAEO;AACLX,iBAASW,qBAAT,EAAgC,IAAhC;AACF;AACF,KATM;;AAWA,qBAAa,SAAbC,UAAa,CAAC7B,CAAD,EAAc;AACzB,0BAAgBuB,MAAMC,UAAN,CAAhB;AACF,qBAAW5B,MAAX,IAAqB,CAAC6B,aAAtB,EAAqC;;AAEzC,UACE,CAACA,cAAcE,QAAd,CACE3B,EAAiB8B,aADnB,CADH,EAIE;AACAb,iBAASW,qBAAT,EAAgC,IAAhC;AACF;AACF,KAXM;;AAaN,QAAMG,2BAA2B,SAA3BA,wBAA2B,GAAM;AAC5BtB,mCAAoB,SAApB,EAA+Ba,SAA/B;AACAb,mCAAoB,UAApB,EAAgCoB,UAAhC;AACX,KAHA;;AAKAG,cAAU,YAAM;AACR,0BAAgBT,MAAMC,UAAN,CAAhB;;AACN,UAAIC,aAAJ,EAAmB;AACjBQ,uBAAeC,IAAf,CAAoBvC,UAApB;AACA,YAAMwC,qBAAqB1B,QAAS,cAApC;AACyB2B;AACnB,mCAAuBX,aAAc,SAAd,CAAuBU,kBAAvB,CAAvB;;AACN,YAAI,CAACE,oBAAL,EAA2B;AACzB,cAAMC,UAAa,OAAIC,KAAJ,CAAUC,cAAV,EAA0BC,mBAA1B,CAAnB;AACchB,yCAAiBe,cAAjB,EAAiCpB,YAAjC;AACdK,wBAAciB,aAAd,CAA4BJ,UAA5B;;AACI,eAACA,WAAWK,gBAAZ,EAA8B;AAChCC,qBAAS,YAAM;AAEXC,8DAA2BpB,aAA3B,GACA,IADA;;AAGE,2BAASqB,aAAT,KAA2BX,kBAA3B,EAA+C;AACjDlB,yBAASQ,aAAT;AACF;AACD,aARD;AASF;AACF;AACF;;AAEAsB,YACE;AAAA,eAAM9D,MAAME,OAAZ;AAAA,OADF,EAEE,UAACA,OAAD,EAAa;AACX,YAAIA,OAAJ,EAAa;AACFsB,oCAAiB,SAAjB,EAA4Ba,SAA5B;AACAb,oCAAiB,UAAjB,EAA6BoB,UAA7B;AACJ,SAHP,MAGO;AACoBE;AAC3B;AAEF,OAVF,EAUE;AAAEiB,iBAAW;AAAb,OAVF;AAYD,KArCD;AAuCAC,oBAAgB,YAAM;AACKlB;AACnB,0BAAgBR,MAAMC,UAAN,CAAhB;;AAEN,UAAIC,aAAJ,EAAmB;AACHA,0CAAoBe,cAApB,EAAoCpB,YAApC;AACd,YAAM8B,YAAe,OAAIX,KAAJ,CAAUY,gBAAV,EAA4BV,mBAA5B,CAArB;AAEchB,uCAAiB0B,gBAAjB,EAAmC9B,cAAnC;AACdI,sBAAciB,aAAd,CAA4BQ,YAA5B;;AAEI,aAACA,aAAaP,gBAAd,EAAgC;AACzB1B,6CAA0B,IAA1B,GAAmCmB,sBAAnC,GAA6C3B,aAA7C,EAA6C,IAA7C;AACX;;AAEcgB,0CAAoB0B,gBAApB,EAAsC/B,YAAtC;AACda,uBAAemB,MAAf,CAAsBzD,UAAtB;AACF;AACD,KAlBD;AAoBO;AACLF,gCADK;AAEL+B,4BAFK;AAGLzB;AAHK;AAKT;AA3J6B,EAA/B;;;SAhCEsD,UAAQ","names":["_sfc_main","defineComponent","name","inheritAttrs","props","loop","trapped","emits","ON_MOUNT_FOCUS_EVT","ON_UNMOUNT_FOCUS_EVT","setup","emit","focusTrapRef","ref","focusLayer","paused","pause","resume","onKeydown","e","key","altKey","ctrlKey","metaKey","currentTarget","shiftKey","EVENT_CODE","currentFocusingEl","document","isTabbing","container","getEdges","first","last","isTabbable","preventDefault","tryFocus","provide","FOCUS_TRAP_INJECTION_KEY","focusOnMount","focusOnUnmount","onFocusIn","unref","forwardRef","trapContainer","target","contains","lastFocusAfterMounted","onFocusOut","relatedTarget","cleanupDocumentListeners","onMounted","focusableStack","push","prevFocusedElement","lastFocusBeforeMounted","isPrevFocusContained","mountEvent","Event","FOCUS_ON_MOUNT","FOCUS_ON_MOUNT_OPTS","dispatchEvent","defaultPrevented","nextTick","focusFirstDescendant","activeElement","watch","immediate","onBeforeUnmount","unmountEvent","FOCUS_ON_UNMOUNT","remove","_renderSlot"],"sources":["../../../../../../packages/components/focus-trap/src/focus-trap.vue"],"sourcesContent":["<template>\n  <slot />\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  ref,\n  unref,\n  watch,\n} from 'vue'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport {\n  focusFirstDescendant,\n  focusableStack,\n  getEdges,\n  obtainAllFocusableElements,\n  tryFocus,\n} from './utils'\nimport {\n  FOCUS_ON_MOUNT,\n  FOCUS_ON_MOUNT_OPTS,\n  FOCUS_ON_UNMOUNT,\n  FOCUS_TRAP_INJECTION_KEY,\n  ON_MOUNT_FOCUS_EVT,\n  ON_UNMOUNT_FOCUS_EVT,\n} from './tokens'\n\nimport type { FocusLayer } from './utils'\n\nexport default defineComponent({\n  name: 'ElFocusTrap',\n  inheritAttrs: false,\n  props: {\n    loop: Boolean,\n    trapped: Boolean,\n  },\n  emits: [ON_MOUNT_FOCUS_EVT, ON_UNMOUNT_FOCUS_EVT],\n  setup(props, { emit }) {\n    const focusTrapRef = ref<HTMLElement | null>()\n    const forwardRef = ref<HTMLElement | null>(null)\n    let lastFocusBeforeMounted: HTMLElement | null\n    let lastFocusAfterMounted: HTMLElement | null\n\n    const focusLayer: FocusLayer = {\n      paused: false,\n      pause() {\n        this.paused = true\n      },\n      resume() {\n        this.paused = false\n      },\n    }\n\n    const onKeydown = (e: KeyboardEvent) => {\n      if (!props.loop && !props.trapped) return\n      if (focusLayer.paused) return\n\n      const { key, altKey, ctrlKey, metaKey, currentTarget, shiftKey } = e\n      const { loop } = props\n      const isTabbing =\n        key === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey\n\n      const currentFocusingEl = document.activeElement\n      if (isTabbing && currentFocusingEl) {\n        const container = currentTarget as HTMLElement\n        const [first, last] = getEdges(container)\n        const isTabbable = first && last\n\n        if (!isTabbable) {\n          if (currentFocusingEl === container) e.preventDefault()\n        } else {\n          if (!shiftKey && currentFocusingEl === last) {\n            e.preventDefault()\n            if (loop) tryFocus(first, true)\n          } else if (shiftKey && currentFocusingEl === first) {\n            e.preventDefault()\n            if (loop) tryFocus(last, true)\n          }\n        }\n      }\n    }\n\n    provide(FOCUS_TRAP_INJECTION_KEY, {\n      focusTrapRef: forwardRef,\n      onKeydown,\n    })\n\n    const focusOnMount = (e: Event) => {\n      emit(ON_MOUNT_FOCUS_EVT, e)\n    }\n    const focusOnUnmount = (e: Event) => emit(ON_UNMOUNT_FOCUS_EVT, e)\n    const onFocusIn = (e: Event) => {\n      const trapContainer = unref(forwardRef)\n      if (focusLayer.paused || !trapContainer) return\n      const target = e.target as HTMLElement | null\n      if (target && trapContainer.contains(target)) {\n        lastFocusAfterMounted = target\n      } else {\n        tryFocus(lastFocusAfterMounted, true)\n      }\n    }\n\n    const onFocusOut = (e: Event) => {\n      const trapContainer = unref(forwardRef)\n      if (focusLayer.paused || !trapContainer) return\n\n      if (\n        !trapContainer.contains(\n          (e as FocusEvent).relatedTarget as HTMLElement | null\n        )\n      ) {\n        tryFocus(lastFocusAfterMounted, true)\n      }\n    }\n\n    const cleanupDocumentListeners = () => {\n      document.removeEventListener('focusin', onFocusIn)\n      document.removeEventListener('focusout', onFocusOut)\n    }\n\n    onMounted(() => {\n      const trapContainer = unref(forwardRef)\n      if (trapContainer) {\n        focusableStack.push(focusLayer)\n        const prevFocusedElement = document.activeElement\n        lastFocusBeforeMounted = prevFocusedElement as HTMLElement | null\n        const isPrevFocusContained = trapContainer.contains(prevFocusedElement)\n        if (!isPrevFocusContained) {\n          const mountEvent = new Event(FOCUS_ON_MOUNT, FOCUS_ON_MOUNT_OPTS)\n          trapContainer.addEventListener(FOCUS_ON_MOUNT, focusOnMount)\n          trapContainer.dispatchEvent(mountEvent)\n          if (!mountEvent.defaultPrevented) {\n            nextTick(() => {\n              focusFirstDescendant(\n                obtainAllFocusableElements(trapContainer),\n                true\n              )\n              if (document.activeElement === prevFocusedElement) {\n                tryFocus(trapContainer)\n              }\n            })\n          }\n        }\n      }\n\n      watch(\n        () => props.trapped,\n        (trapped) => {\n          if (trapped) {\n            document.addEventListener('focusin', onFocusIn)\n            document.addEventListener('focusout', onFocusOut)\n          } else {\n            cleanupDocumentListeners()\n          }\n        },\n        { immediate: true }\n      )\n    })\n\n    onBeforeUnmount(() => {\n      cleanupDocumentListeners()\n      const trapContainer = unref(forwardRef)\n\n      if (trapContainer) {\n        trapContainer.removeEventListener(FOCUS_ON_MOUNT, focusOnMount)\n        const unmountEvent = new Event(FOCUS_ON_UNMOUNT, FOCUS_ON_MOUNT_OPTS)\n\n        trapContainer.addEventListener(FOCUS_ON_UNMOUNT, focusOnUnmount)\n        trapContainer.dispatchEvent(unmountEvent)\n\n        if (!unmountEvent.defaultPrevented) {\n          tryFocus(lastFocusBeforeMounted ?? document.body, true)\n        }\n\n        trapContainer.removeEventListener(FOCUS_ON_UNMOUNT, focusOnMount)\n        focusableStack.remove(focusLayer)\n      }\n    })\n\n    return {\n      focusTrapRef,\n      forwardRef,\n      onKeydown,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}